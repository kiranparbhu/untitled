import 'dart:convert';
import 'dart:io';
import 'dart:math';
import 'package:col/utils/customDropdown.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:http/http.dart' as http;

//import 'dart:developer';
import 'dart:ui';
import 'dart:async';
import 'package:camera/camera.dart';
import 'package:col/localizations/app_language.dart';
import 'package:col/ui/home/inspection_application/model/InspectionOneSiteDocModel.dart';
import 'package:col/utils/alert_dialog.dart';
import 'package:col/utils/notification_utils.dart';
import 'package:col/widgets/circular_loader.dart';
import 'package:col/widgets/map_view.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:ensure_visible_when_focused/ensure_visible_when_focused.dart';

import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:provider/provider.dart';

import 'package:col/ui/auth/model/loginResponseModel.dart';
import 'package:col/ui/home/inspection_application/bloc/inspectionDetailsBloc/inspection_details_bloc.dart';
import 'package:col/ui/home/inspection_application/model/InspectionOneSiteModel.dart';
import 'package:col/utils/Language.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:col/constants/app_constants.dart';
import 'package:col/preferences/preferences_manager.dart';
import 'package:col/ui/home/inspection_application/model/dropdown_model.dart';
import 'package:col/utils/app_styles.dart';
import 'package:col/utils/app_utils.dart';
import 'package:col/utils/base_state.dart';
import 'package:col/utils/database_helper.dart';
import 'package:col/widgets/app_custom_button.dart';
import 'package:col/widgets/app_text_field.dart';
import 'package:dio/dio.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get_it/get_it.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:rxdart/rxdart.dart';
import 'package:syncfusion_flutter_signaturepad/signaturepad.dart';
import 'package:xml/xml.dart' as xml;
import 'package:intl/intl.dart';
import 'package:col/contractor/modes_contractores.dart';
import 'package:col/work_information/work_information_model.dart';

import '../auth/model/LoginResponse.dart';

class ReportInformation extends StatefulWidget {
  final int inspectionID;
  final int? userID;
  final String? opration;
  final bool isFromOffline;
  final int? dbID;

  const ReportInformation({Key? key, required this.inspectionID, this.userID, this.opration, required this.isFromOffline, this.dbID}) : super(key: key);

  static Widget create() {
    return MultiBlocProvider(
      providers: [
        BlocProvider<InspectionDetailsBloc>(
          create: (BuildContext context) => InspectionDetailsBloc(),
        ),
      ],
      child: ReportInformation(
        inspectionID: 0,
        userID: 0,
        opration: "",
        isFromOffline: false,
      ),
    );
  }

  @override
  State<ReportInformation> createState() => _ReportInformationState();
}

class _ReportInformationState extends BaseState<ReportInformation> {
  ///////////////////////////////////////////////////////////////////////////////////
  ////////////////////created by ankit sewak//////////////////////////////
  List<ContractoreDetailsModel> _ListHolderContractoreDetailsModel = [];
  List<TextEditingController> _ListCompanyNameTextEditingController = [];
  List<TextEditingController> _ListOwnerNameTextEditingController = [];
  List<TextEditingController> _ListJobTypeTextEditingController = [];

  List<TextEditingController> _ListMaleWorkerTextEditingController = [];
  List<TextEditingController> _ListFeMaleWorkerTextEditingController = [];
  List<TextEditingController> _ListTransgenderWorkerTextEditingController = [];
  List<TextEditingController> _ListTotalWorkerTextEditingController = [];

  List<int> _ListContractorsHasLicence = [];

  List<bool> _ListContractorsHasLicencebool = [];

  List<TextEditingController> _ListCommencemenDateTextEditingController = [];

  List<TextEditingController> _ListCompletionDateTextEditingController = [];
  FocusNode _focusNodeEmail = FocusNode();
  int buttonClickCount = 0;
  int buttonClickCount1_8 = 0;

// common code
  void addContractore() {
    final _keyCon = GlobalKey();
    contractorGlobalKeys.add(_keyCon);

    var TextCompletionDate = new TextEditingController();
    TextCompletionDate.text = "";

    var TextCommencemenDate = new TextEditingController();
    TextCommencemenDate.text = "";

    var textControllerMaleWorker = new TextEditingController();
    textControllerMaleWorker.text = "0";

    var textControllerFeMaleWorker = new TextEditingController();
    textControllerFeMaleWorker.text = "0";

    var textControllerTransgenderWorker = new TextEditingController();
    textControllerTransgenderWorker.text = "0";

    var textControllerTotalWorker = new TextEditingController();
    textControllerTotalWorker.text = "0";

    var textControllerCompanyName = new TextEditingController();
    textControllerCompanyName.text = "";
    var textControllerOwnerName = new TextEditingController();
    textControllerOwnerName.text = "";
    var textControllerJobType = new TextEditingController();
    textControllerJobType.text = "";
    current_commencementDates.add(DateTime.now());
    _ListCommencemenDateTextEditingController.add(TextCommencemenDate);
    _ListCompletionDateTextEditingController.add(TextCompletionDate);

    _ListCompanyNameTextEditingController.add(textControllerCompanyName);
    _ListOwnerNameTextEditingController.add(textControllerOwnerName);
    _ListJobTypeTextEditingController.add(textControllerJobType);

    _ListMaleWorkerTextEditingController.add(textControllerMaleWorker);
    _ListFeMaleWorkerTextEditingController.add(textControllerFeMaleWorker);
    _ListTransgenderWorkerTextEditingController.add(textControllerTransgenderWorker);
    _ListTotalWorkerTextEditingController.add(textControllerTotalWorker);
    _ListContractorsHasLicence.add(0);
    _contractorIds.add(0);
    _ListContractorsHasLicencebool.add(true);
    _ListHolderContractoreDetailsModel.add(ContractoreDetailsModel(
        company_name: "",
        owner_name: "",
        job_type: "",
        male_worker: "0",
        female_worker: "0",
        transgender_worker: "0",
        total_worker: "0",
        image_name: "",
        image_path: "",
        has_license: 0,
        commencement_date: "",
        Completion_date: ""));
  }

// common code
  void deleteContractoreByPosition(int position) {
    if (_ListHolderContractoreDetailsModel.length > 1) {
      setState(() {
        // remove all TextEditingController
        contractorGlobalKeys.removeAt(position);
        _ListCompanyNameTextEditingController.removeAt(position);
        _ListOwnerNameTextEditingController.removeAt(position);
        _ListJobTypeTextEditingController.removeAt(position);

        _ListMaleWorkerTextEditingController.removeAt(position);
        _ListFeMaleWorkerTextEditingController.removeAt(position);
        _ListTransgenderWorkerTextEditingController.removeAt(position);
        _ListTotalWorkerTextEditingController.removeAt(position);

        _ListHolderContractoreDetailsModel.removeAt(position);

        _ListCommencemenDateTextEditingController.removeAt(position);
        _ListCompletionDateTextEditingController.removeAt(position);

        _ListContractorsHasLicencebool.removeAt(position);
        _ListContractorsHasLicence.removeAt(position);
      });
    }
  }

// common code

  void removeContractore() {
    contractorGlobalKeys.clear();
    _ListHolderContractoreDetailsModel.clear();
    _ListCompanyNameTextEditingController.clear();
    _ListOwnerNameTextEditingController.clear();
    _ListJobTypeTextEditingController.clear();

    _ListMaleWorkerTextEditingController.clear();
    _ListFeMaleWorkerTextEditingController.clear();
    _ListTransgenderWorkerTextEditingController.clear();
    _ListTotalWorkerTextEditingController.clear();

    _ListCommencemenDateTextEditingController.clear();
    _ListCompletionDateTextEditingController.clear();
  }

//single code
  ////////////for image /////////////
  void updateContractoreByImageUpload(String image_name, String image_path, int position) {
    setState(() {
      _ListHolderContractoreDetailsModel[position].image_name = image_name;
      _ListHolderContractoreDetailsModel[position].image_path = image_path;
    });
  }

  bool isContractoredownloadImage(int position) {
    String image = _ListHolderContractoreDetailsModel[position].image_path;
    if (image.length == 0) {
      return false;
    } else {
      return true;
    }
  }

  String findContractorsFileUploadName(position) {
    return _ListHolderContractoreDetailsModel[position].image_name;
  }

  String findContractorsFileUploadPath(position) {
    return _ListHolderContractoreDetailsModel[position].image_path;
  }

  ////////////for image /////////////

  void updateContractorsdropdownLicence(int value, int position) {
    setState(() {
      _ListContractorsHasLicence[position] = value;
      print("total_size" + _ListContractorsHasLicence.length.toString());
    });
  }

///////////for drop down licence
  ///

  void updateContractoreByCompanyName(String companyname, int position) {
    setState(() {
      //code for company name
      // _ListCompanyNameTextEditingController[position].clear();
      // _ListCompanyNameTextEditingController[position].text = companyname;
      _ListHolderContractoreDetailsModel[position].company_name = companyname;
    });
  }

  void updateContractoreByOwnerName(String owner_name, int position) {
    setState(() {
      //code for owner name
      // _ListOwnerNameTextEditingController[position].clear();
      // _ListOwnerNameTextEditingController[position].text = owner_name;
      _ListHolderContractoreDetailsModel[position].owner_name = owner_name;
    });
  }

  void updateContractoreByJobType(String job_type, int position) {
    setState(() {
      //code for owner name
      // _ListJobTypeTextEditingController[position].clear();
      // _ListJobTypeTextEditingController[position].text = job_type;
      _ListHolderContractoreDetailsModel[position].job_type = job_type;
    });
  }

  void updateContractoreByMaleWorker(String male_worker, int position) {
    setState(() {
      //code for owner name
      // _ListMaleWorkerTextEditingController[position].clear();
      // _ListMaleWorkerTextEditingController[position].text = male_worker;
      _ListHolderContractoreDetailsModel[position].male_worker = male_worker;
    });
    updateContractoreBytotalWorkerChange(position);
  }

  void updateContractoreByFeMaleWorker(String female_worker, int position) {
    setState(() {
      //code for owner name
      // _ListFeMaleWorkerTextEditingController[position].clear();
      // _ListFeMaleWorkerTextEditingController[position].text = female_worker;
      _ListHolderContractoreDetailsModel[position].female_worker = female_worker;
    });
    updateContractoreBytotalWorkerChange(position);
  }

  void updateContractoreBytransgenderWorker(String transgender_worker, int position) {
    setState(() {
      //code for owner name
      // _ListTransgenderWorkerTextEditingController[position].clear();
      // _ListTransgenderWorkerTextEditingController[position].text = transgender_worker;
      _ListHolderContractoreDetailsModel[position].female_worker = transgender_worker;

      /// update here total worker count

      updateContractoreBytotalWorkerChange(position);
    });
  }

  void updateContractoreBytotalWorkerChange(int position) {
    String txtTransgenderWorkerText = _ListTransgenderWorkerTextEditingController[position].text;
    String txtFeMaleWorkerText = _ListFeMaleWorkerTextEditingController[position].text;
    String txtMaleWorkerText = _ListMaleWorkerTextEditingController[position].text;
    int num1 = int.tryParse(txtTransgenderWorkerText) ?? 0;
    int num2 = int.tryParse(txtFeMaleWorkerText) ?? 0;
    int num3 = int.tryParse(txtMaleWorkerText) ?? 0;
    int total = num1 + num2 + num3;
    updateContractoreBytotalWorker(total.toString(), position);
  }

  void updateContractoreBytotalWorker(String total_worker, int position) {
    setState(() {
      //code for owner name
      _ListTotalWorkerTextEditingController[position].clear();
      _ListTotalWorkerTextEditingController[position].text = total_worker;
      _ListHolderContractoreDetailsModel[position].total_worker = total_worker;
    });
  }

  void updateContractoreByCommencementDate(String commencement_date, int position) {
    setState(() {
      //code for commencement_date
      _ListCommencemenDateTextEditingController[position].clear();
      _ListCommencemenDateTextEditingController[position].text = commencement_date;
      _ListHolderContractoreDetailsModel[position].commencement_date = commencement_date;
    });
  }

  void updateContractoreByCompletionDate(String Completion_date, int position) {
    setState(() {
      //code for Completion_date
      _ListCompletionDateTextEditingController[position].clear();
      _ListCompletionDateTextEditingController[position].text = Completion_date;
      _ListHolderContractoreDetailsModel[position].commencement_date = Completion_date;
    });
  }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
  ////////////////////created by ankit sewak//////////////////////////////

/////////// dynamic form for work infromation 1.8
  List<WorkInformationModel> _ListHolderWorkInformationModel = [];
  List<TextEditingController> _ListWorkersNameTextEditingController = [];
  List<TextEditingController> _ListSerialNoTextEditingController = [];
  List<TextEditingController> _ListDesginationEditingController = [];
  List<TextEditingController> _ListWorkersLenghtOfServiceEditingController = [];
  List<TextEditingController> _ListWorkersDailyWorkingHouseEditingController = [];
  List<TextEditingController> _ListWorkersWagesPayableEditingController = [];
  List<TextEditingController> _ListWorkersWagesPaidEditingController = [];
  List<TextEditingController> _ListWorkersDiffrenceWagesAmountEditingController = [];
  List<TextEditingController> _ListWorkersRemarksAmountEditingController = [];
  List<TextEditingController> _ListWorkersWagesEntitledFormDateEditingController = [];
  List<TextEditingController> _ListWorkerSwagesPaidPerDayEditingController = [];
  List<TextEditingController> _ListWorkerSwagesPaidPerMonthEditingController = [];
  List<int?> _ListWorkersDayMonth = [];
  List<bool> _ListIsWorkersDay = [];
  List<bool> _ListIsWorkersMonth = [];

  final _form = GlobalKey<FormState>(); //for storing form state.

  void _saveForm() {
    final isValid = _form.currentState!.validate();
    if (!isValid) {
      return;
    }
  }

// common code
  void addWorkInformation1_8() {
    setState(() {
      final _key1_8 = GlobalKey();
      act1_8GlobalKeys.add(_key1_8);

      var WorkerSwagesPaidPerDay = new TextEditingController();
      WorkerSwagesPaidPerDay.text = "";
      _ListWorkerSwagesPaidPerDayEditingController.add(WorkerSwagesPaidPerDay);

      var WorkerSwagesPaidPerMonth = new TextEditingController();
      WorkerSwagesPaidPerMonth.text = "";
      _ListWorkerSwagesPaidPerMonthEditingController.add(WorkerSwagesPaidPerMonth);

      var WorkersWagesEntitledFormDate = new TextEditingController();
      WorkersWagesEntitledFormDate.text = "";
      _ListWorkersWagesEntitledFormDateEditingController.add(WorkersWagesEntitledFormDate);

      var WorkersDiffrenceremarksAmount = new TextEditingController();
      WorkersDiffrenceremarksAmount.text = "";
      _ListWorkersRemarksAmountEditingController.add(WorkersDiffrenceremarksAmount);

      var WorkersDiffrenceWagesAmount = new TextEditingController();
      WorkersDiffrenceWagesAmount.text = "";
      _ListWorkersDiffrenceWagesAmountEditingController.add(WorkersDiffrenceWagesAmount);

      var WorkersWagesPaid = new TextEditingController();
      WorkersWagesPaid.text = "";
      _ListWorkersWagesPaidEditingController.add(WorkersWagesPaid);

      var WorkersWagesPayable = new TextEditingController();
      WorkersWagesPayable.text = "";
      _ListWorkersWagesPayableEditingController.add(WorkersWagesPayable);

      var WorkersDailyWorkingHouse = new TextEditingController();
      WorkersDailyWorkingHouse.text = "";
      _ListWorkersDailyWorkingHouseEditingController.add(WorkersDailyWorkingHouse);

//3
      var WorkersLenghtOfService = new TextEditingController();
      WorkersLenghtOfService.text = "";
      _ListWorkersLenghtOfServiceEditingController.add(WorkersLenghtOfService);

      ///2
      var TextWorkerName = new TextEditingController();
      TextWorkerName.text = "";
      _ListWorkersNameTextEditingController.add(TextWorkerName);

//3
      var TextDesgination = new TextEditingController();
      TextDesgination.text = "";
      _ListDesginationEditingController.add(TextDesgination);
      act1_8Rule8MinWorkerIds.add(0);
      act1_8RuleIds.add(0);
      act1_8Ids.add(0);
      current_wagesEntitleds.add(DateTime.now());
      _ListWorkersDayMonth.add(0);
      _ListIsWorkersDay.add(false);
      _ListIsWorkersMonth.add(false);
      _ListHolderWorkInformationModel.add(WorkInformationModel(
          serial_no: "0",
          name: "",
          desgination: "",
          lenght_of_service: "",
          daily_working_house: "",
          is_day_month: 0,
          wages_paid_per_day: "",
          wages_paid_per_month: "",
          wages_entitled_form_date: "",
          wages_payable: "",
          wages_paid: "",
          diffrence_wages_amount: "",
          remarks: "",
          file_name: "",
          file_path: "",
          act1_8Rule8MinWorkerIds: 0,
          act1_8RuleIds: 0,
          act1_8Ids: 0));

      ///1
      var TextSerialNo = new TextEditingController();
      TextSerialNo.text = "${(_ListHolderWorkInformationModel.length)}";
      _ListSerialNoTextEditingController.add(TextSerialNo);
    });
  }

// common code
  void deleteWorkInformation1_8(int position) {
    if (_ListHolderWorkInformationModel.length > 1) {
      setState(() {
        act1_8GlobalKeys.removeAt(position);
        act1_8Rule8MinWorkerIds.removeAt(position);
        act1_8RuleIds.removeAt(position);
        act1_8Ids.removeAt(position);
        current_wagesEntitleds.removeAt(position);

        _ListWorkersNameTextEditingController.removeAt(position);
        _ListSerialNoTextEditingController.removeAt(position);
        _ListDesginationEditingController.removeAt(position);
        _ListWorkersLenghtOfServiceEditingController.removeAt(position);
        _ListWorkersDailyWorkingHouseEditingController.removeAt(position);
        _ListWorkersWagesPayableEditingController.removeAt(position);
        _ListWorkersWagesPaidEditingController.removeAt(position);
        _ListWorkersDiffrenceWagesAmountEditingController.removeAt(position);
        _ListWorkersRemarksAmountEditingController.removeAt(position);

        _ListWorkersWagesEntitledFormDateEditingController.removeAt(position);
        _ListWorkerSwagesPaidPerDayEditingController.removeAt(position);
        _ListWorkerSwagesPaidPerMonthEditingController.removeAt(position);
        _ListWorkersDayMonth.removeAt(position);
        _ListIsWorkersDay.removeAt(position);
        _ListIsWorkersMonth.removeAt(position);

        _ListHolderWorkInformationModel.removeAt(position);
        //  _ListSerialNoTextEditingController[position].text = "${(_ListHolderWorkInformationModel.length)}";
      });
    } else if (_ListHolderWorkInformationModel.length == 1) {
      showAlertDialog(context, translate('workerDetailValidation'));
      return;
    }
  }

  void updateWorkerdropdownLicence(int value, int position) {
    setState(() {
      _ListWorkersDayMonth[position] = value;
    });
  }

  // common code
  void removeWorkInformation1_8() {
    setState(() {
      act1_8GlobalKeys.clear();
      act1_8Rule8MinWorkerIds.clear();
      act1_8RuleIds.clear();
      act1_8Ids.clear();
      current_wagesEntitleds.clear();
      _ListWorkersNameTextEditingController.clear();
      _ListSerialNoTextEditingController.clear();
      _ListDesginationEditingController.clear();
      _ListWorkersLenghtOfServiceEditingController.clear();
      _ListWorkersDailyWorkingHouseEditingController.clear();
      _ListWorkersWagesPayableEditingController.clear();
      _ListWorkersWagesPaidEditingController.clear();
      _ListWorkersDiffrenceWagesAmountEditingController.clear();
      _ListWorkersRemarksAmountEditingController.clear();
      _ListWorkersWagesEntitledFormDateEditingController.clear();
      _ListWorkerSwagesPaidPerDayEditingController.clear();
      _ListWorkerSwagesPaidPerMonthEditingController.clear();
    });
  }

  void WorkerSwagesPaidPerMonth(String wages_paid_per_month, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkerSwagesPaidPerMonthEditingController[position].clear();
      //_ListWorkerSwagesPaidPerMonthEditingController[position].text = wages_paid_per_month;
      _ListHolderWorkInformationModel[position].wages_paid_per_month = wages_paid_per_month;
    });
  }

  void WorkerSwagesPaidPerDay(String wages_paid_per_day, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkerSwagesPaidPerDayEditingController[position].clear();
      //_ListWorkerSwagesPaidPerDayEditingController[position].text = wages_paid_per_day;
      _ListHolderWorkInformationModel[position].wages_paid_per_day = wages_paid_per_day;
    });
  }

  void updateWorkersWagesEntitledFormDate(String wages_entitled_form_date, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkersWagesEntitledFormDateEditingController[position].clear();
      //_ListWorkersWagesEntitledFormDateEditingController[position].text = wages_entitled_form_date;
      _ListHolderWorkInformationModel[position].wages_entitled_form_date = wages_entitled_form_date;
    });
  }

  void updateWorkerInformation(String name, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkersNameTextEditingController[position].clear();
      //_ListWorkersNameTextEditingController[position].text = name;
      _ListHolderWorkInformationModel[position].name = name;
    });
  }

  void updateDesginationWorkerInformation(String desgination, int position) {
    setState(() {
      //code for commencement_date
      //_ListDesginationEditingController[position].clear();
      //_ListDesginationEditingController[position].text = desgination;
      _ListHolderWorkInformationModel[position].desgination = desgination;
    });
  }

  void updateWorkersLenghtOfService(String lenght_of_service, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkersLenghtOfServiceEditingController[position].clear();
      //_ListWorkersLenghtOfServiceEditingController[position].text = lenght_of_service;
      _ListHolderWorkInformationModel[position].lenght_of_service = lenght_of_service;
    });
  }

  void updateWorkersDailyWorkingHouse(String daily_working_house, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkersDailyWorkingHouseEditingController[position].clear();
      //_ListWorkersDailyWorkingHouseEditingController[position].text = daily_working_house;
      _ListHolderWorkInformationModel[position].daily_working_house = daily_working_house;
    });
  }

  void updateWorkersWagesPayable(String wages_payable, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkersWagesPayableEditingController[position].clear();
      //_ListWorkersWagesPayableEditingController[position].text = wages_payable;
      _ListHolderWorkInformationModel[position].wages_payable = wages_payable;
    });
    updateWorkerDeAmount(position);
  }

  void updateWorkersDiffrenceWagesAmount(String diffrence_wages_amount, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkersDiffrenceWagesAmountEditingController[position].clear();
      //_ListWorkersDiffrenceWagesAmountEditingController[position].text = diffrence_wages_amount;
      _ListHolderWorkInformationModel[position].wages_paid = diffrence_wages_amount;
    });
  }

  void updateWorkersWagesPaid(String wages_paid, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkersWagesPaidEditingController[position].clear();
      //_ListWorkersWagesPaidEditingController[position].text = wages_paid;
      _ListHolderWorkInformationModel[position].wages_paid = wages_paid;
    });
    updateWorkerDeAmount(position);
  }

  void updateWorkersRemarksAmount(String remarks, int position) {
    setState(() {
      //code for commencement_date
      //_ListWorkersRemarksAmountEditingController[position].clear();
      //_ListWorkersRemarksAmountEditingController[position].text = remarks;
      _ListHolderWorkInformationModel[position].remarks = remarks;
    });
  }

  void updateWorkerDeAmount(int position) {
    String payable = _ListWorkersWagesPayableEditingController[position].text;
    String paid = _ListWorkersWagesPaidEditingController[position].text;

    int num1 = int.tryParse(payable) ?? 0;
    int num2 = int.tryParse(paid) ?? 0;
    int amountCount = num1 - num2;

    updateWorkersDiffrenceWagesAmount(amountCount.toString(), position);
  }

  /// document file upload

  ////////////for image /////////////
  void updateWorkerInformationByImageUpload(String image_name, String image_path, int position) {
    setState(() {
      _ListHolderWorkInformationModel[position].file_name = image_name;
      _ListHolderWorkInformationModel[position].file_path = image_path;
    });
  }

  bool isWorkerInformationDownloadImage(int position) {
    String image = _ListHolderWorkInformationModel[position].file_path;
    if (image.length == 0) {
      return false;
    } else {
      return true;
    }
  }

  String findWorkerInformationFileUploadName(position) {
    return _ListHolderWorkInformationModel[position].file_name;
  }

  String findWorkerInformationFileUploadPath(position) {
    return _ListHolderWorkInformationModel[position].file_path;
  }

  ////////////for image /////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
  ////////////////////created by ankit sewak//////////////////////////////

  final ScrollController _scrollController = ScrollController();
  Locale _currentLocale = Locale('en'); // Default locale is English
  String? local;
  static const pattern = r'^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$';
  final regExp = RegExp(pattern);
  GlobalKey<SfSignaturePadState> _signaturePadKey = GlobalKey();
  GlobalKey<SfSignaturePadState> _signaturePadInspectionKey = GlobalKey();
  List<String> emails = [];

  List<InspectionOneSiteDocModel> inspectionOneSiteModel = [];
  List<InspectionOneSiteDocModel> inspectionOneSiteModel_EstImage = [];
  List<InspectionOneSiteDocModel> inspectionOneSiteModel_EstDoc = [];

  // List<InspectionOneSiteModel> ImagesList = [];
  // List<InspectionOneSiteModel> DocList = [];
  List<InspectionOneSiteModel> estDocList = [];
  List<InspectionOneSiteModel> FileUpList = [];
  List<InspectionOneSiteModel> WorkerUploadStatement = [];
  List<InspectionOneSiteModel> Worker1_8 = [];
  List<InspectionOneSiteModel> contractorImages = [];

  FocusNode focus = FocusNode();
  String lastValue = '';
  Uint8List? _signatureImageBytes;
  Uint8List? _mapImageBytes;
  Uint8List? _signatureInspectionBytes;
  String? authorizedSignBase64;
  String? inspectorSignBase64;
  String? mapImageCIDBase64;
  bool permissionGranted = false;
  final TextEditingController _otherRemarksController = TextEditingController();
  final TextEditingController _inspectorName = TextEditingController();
  final TextEditingController _inspectorEmail = TextEditingController();
  final TextEditingController _reportNoController = TextEditingController();
  final TextEditingController _inspectionDateController = TextEditingController();
  final TextEditingController _pinCodeController = TextEditingController();
  final TextEditingController _areaController = TextEditingController();
  final TextEditingController _IFSCNoBaseController = TextEditingController();
  final TextEditingController _nameOfComplain = TextEditingController();
  final TextEditingController _subjectOfComplain = TextEditingController();
  final TextEditingController _dateOfComplain = TextEditingController();
  final TextEditingController _establishmentNameController = TextEditingController();
  final TextEditingController _permanentAddressController = TextEditingController();
  final TextEditingController _est_area_Controller = TextEditingController();
  final TextEditingController _est_pincode_Controller = TextEditingController();
  final TextEditingController _regUnderNoneOfAboveController = TextEditingController();
  final TextEditingController _regNo_Controller = TextEditingController();
  final TextEditingController _EstOtherController = TextEditingController();
  final TextEditingController _registrationDateController = TextEditingController();
  final TextEditingController _maleWorkerController = TextEditingController(text: "0");
  final TextEditingController _femaleWorkerController = TextEditingController(text: "0");
  final TextEditingController _transgenderWorkerController = TextEditingController(text: "0");
  final TextEditingController _totalWorkerController = TextEditingController(text: "0");
  final TextEditingController _authorizedPersonController = TextEditingController();
  final TextEditingController _authorizedPersonEmailController = TextEditingController();
  final TextEditingController _authorizedPersonNoController = TextEditingController();
  final TextEditingController _authorizedPersonDesignController = TextEditingController();
  final TextEditingController _employerNameController = TextEditingController();
  final TextEditingController _empPermanentAddressController = TextEditingController();
  final TextEditingController _empAgeController = TextEditingController();
  final TextEditingController _otherNoteController = TextEditingController();
  dynamic dropdownValue;
  final TextEditingController _contractorNameController = TextEditingController();
  final TextEditingController _companyNameController = TextEditingController();
  final TextEditingController _jobTypeController = TextEditingController();
  final TextEditingController _commencementDateController = TextEditingController();
  final TextEditingController _completionDateController = TextEditingController();
  final TextEditingController _contractorMaleWorkerController = TextEditingController(text: "0");
  final TextEditingController _contractorFeMaleWorkerController = TextEditingController(text: "0");
  final TextEditingController _contractorTransgenderWorkerController = TextEditingController(text: "0");
  final TextEditingController _contractorTotalWorkerController = TextEditingController(text: "0");
  String Phone_patttern = r'(^\+?09[0-9]{9}$)';
  late RegExp Phone_regExp;

  // final TextEditingController _Act1NameController = TextEditingController();
  final TextEditingController _Act1SrNoController = TextEditingController();
  final TextEditingController _Act1_8SrNoController = TextEditingController();
  final TextEditingController _Act1_8NameController = TextEditingController();
  final TextEditingController _Act1_8DesgController = TextEditingController();
  final TextEditingController _Act1_8lengthServiceController = TextEditingController();
  final TextEditingController _Act1_8dailyWorkHrsController = TextEditingController();
  final TextEditingController _Act1_8dayMonthController = TextEditingController();
  final TextEditingController _Act1_8wageEntitledController = TextEditingController();
  final TextEditingController _Act1_8wagePayableController = TextEditingController();
  final TextEditingController _Act1_8wagePaidController = TextEditingController();
  final TextEditingController _Act1_8differenceWageAmountController = TextEditingController();
  final TextEditingController _Act1_8remarksController = TextEditingController();
  final TextEditingController _Act2_1SrNoController = TextEditingController();
  final TextEditingController _Act2_1FinancialYearController = TextEditingController();
  final TextEditingController _Act2_2SrnoController = TextEditingController();
  final TextEditingController _Act2_2WorkerNameController = TextEditingController();
  final TextEditingController _Act2_2FinancialYearController = TextEditingController();
  final TextEditingController _Act4_1_1SrNoController = TextEditingController();
  final TextEditingController _Act4_1_1NameContractorController = TextEditingController();
  final TextEditingController _Act4_1_1DetailsWorkController = TextEditingController();
  final TextEditingController _Act4_1_1TimeSinceController = TextEditingController();
  final TextEditingController _Act4_1_1NoWorkersController = TextEditingController();
  final TextEditingController _Act4_1_5NameContractorController = TextEditingController();
  final TextEditingController _Act4_1_5NameContractorLabourController = TextEditingController();
  final TextEditingController _Act4_1_5PaidWagesController = TextEditingController();
  final TextEditingController _Act4_1_5WagesTobePaidController = TextEditingController();
  final TextEditingController _Act4_1_5DifferAmountController = TextEditingController();
  final TextEditingController _Act4_1_5SrNoController = TextEditingController();
  final TextEditingController _Act4_2_5SrNoController = TextEditingController();
  final TextEditingController _Act4_2_5NameContractorController = TextEditingController();
  final TextEditingController _Act11_1SrNoController = TextEditingController();
  final TextEditingController _Act11_1NameController = TextEditingController();
  final TextEditingController _Act11_1DesgController = TextEditingController();
  final TextEditingController _Act11_1DateAppointmentController = TextEditingController();
  final TextEditingController _Act8_3SrNoController = TextEditingController();
  final TextEditingController _Act8_3NameController = TextEditingController();
  final TextEditingController _Act8_3DesgController = TextEditingController();
  final TextEditingController _Act8_3DateSuspensionController = TextEditingController();
  final TextEditingController _Act7_2_4SrNoController = TextEditingController();
  final TextEditingController _Act7_2_4NameAdolescentLabourController = TextEditingController();
  final TextEditingController _Act7_2_4AddressController = TextEditingController();
  final TextEditingController _Act7_2_4AgeController = TextEditingController();
  final TextEditingController _Act7_3SrNoController = TextEditingController();
  final TextEditingController _Act7_3NameAdolescentLabourController = TextEditingController();
  final TextEditingController _Act7_3AddressController = TextEditingController();
  final TextEditingController _Act7_3AgeController = TextEditingController();
  final TextEditingController _Act7_1_1SrNoController = TextEditingController();
  final TextEditingController _Act7_1_1NameChildLabourController = TextEditingController();
  final TextEditingController _Act7_1_1AddressController = TextEditingController();
  final TextEditingController _Act7_1_1AgeController = TextEditingController();
  final TextEditingController _Act7_1_3SrNoController = TextEditingController();
  final TextEditingController _Act7_1_3NameChildLabourController = TextEditingController();
  final TextEditingController _Act7_1_3AddressController = TextEditingController();
  final TextEditingController _Act7_1_3AgeController = TextEditingController();
  final TextEditingController _Act7_1_2SrNoController = TextEditingController();
  final TextEditingController _Act7_1_2NameAdolescentLabourController = TextEditingController();
  final TextEditingController _Act7_1_2AddressController = TextEditingController();
  final TextEditingController _Act7_1_2AgeController = TextEditingController();
  final TextEditingController _Act6SrNoController = TextEditingController();
  final TextEditingController _Act6NameContractorController = TextEditingController();
  final TextEditingController _Act6AddressController = TextEditingController();
  final TextEditingController _Act6DetailsWorkController = TextEditingController();
  final TextEditingController _Act6TimeSinceController = TextEditingController();
  final TextEditingController _Act6NoWorkersController = TextEditingController();
  final TextEditingController _Act6TotalNoWorkersController = TextEditingController();
  final TextEditingController _Act5_4SrNoController = TextEditingController();
  final TextEditingController _Act5_4MaleWorkersController = TextEditingController();
  final TextEditingController _Act5_4MDesgController = TextEditingController();
  final TextEditingController _Act5_4MSalaryPaidController = TextEditingController();
  final TextEditingController _Act5_4FemaleWorkersController = TextEditingController();
  final TextEditingController _Act5_4FDesgController = TextEditingController();
  final TextEditingController _Act5_4FSalaryPaidController = TextEditingController();
  final TextEditingController _ActSection26dController = TextEditingController();

  final TextEditingController _ActSection214Controller = TextEditingController();
  final TextEditingController _ActRule2bYearController = TextEditingController();
  final TextEditingController _ActRule2bYear1Controller = TextEditingController();
  final TextEditingController _ActR4aController = TextEditingController();
  final TextEditingController _ActR4bController = TextEditingController();
  final TextEditingController _ActR4cController = TextEditingController();
  final TextEditingController _ActS26R5Controller = TextEditingController();
  final TextEditingController _ActR32Controller = TextEditingController();
  final TextEditingController _ActISNoController = TextEditingController();
  final TextEditingController _ActS9aLaborersController = TextEditingController();
  final TextEditingController _ActS9aSnoController = TextEditingController();
  final TextEditingController _ActR72Controller = TextEditingController();
  final TextEditingController _ActS212SnoController = TextEditingController();
  final TextEditingController _ActR822YearController = TextEditingController();
  final TextEditingController _ActR822Year1Controller = TextEditingController();
  final TextEditingController _ActS292R811Controller = TextEditingController();
  final TextEditingController _ActS211R65Controller = TextEditingController();
  final TextEditingController _ActS122R25Controller = TextEditingController();
  final TextEditingController _ActR821YearController = TextEditingController();
  final TextEditingController _ActR821Year1Controller = TextEditingController();
  final TextEditingController _ActR6Controller = TextEditingController();
  final TextEditingController _ActS172R34Controller = TextEditingController();
  final TextEditingController _ActR13_14_25S7NotController = TextEditingController();
  final TextEditingController _ActR13_14_25S7Not1Controller = TextEditingController();
  final TextEditingController _ActR14_15_16S4Controller = TextEditingController();
  final TextEditingController _ActR143_144_145Controller = TextEditingController();
  final TextEditingController changeDetailsController = TextEditingController();
  final TextEditingController dateModificationController = TextEditingController();
  final TextEditingController _Act1RemarksController = TextEditingController();
  final TextEditingController _Act2RemarksController = TextEditingController();
  final TextEditingController _Act3RemarksController = TextEditingController();
  final TextEditingController _Act4_principalRemarksController = TextEditingController();
  final TextEditingController _Act4_contractorRemarksController = TextEditingController();
  final TextEditingController _Act5RemarksController = TextEditingController();
  final TextEditingController _Act6RemarksController = TextEditingController();
  final TextEditingController _Act6_conRemarksController = TextEditingController();
  final TextEditingController _Act7RemarksController = TextEditingController();
  final TextEditingController _Act8RemarksController = TextEditingController();
  final TextEditingController _Act9RemarksController = TextEditingController();
  final TextEditingController _Act10RemarksController = TextEditingController();
  final TextEditingController _Act11RemarksController = TextEditingController();

  List<TextEditingController> employerNameControllers = [];

  List<TextEditingController> otherNoteControllers = [];
  List<TextEditingController> empPermanentAddressControllers = [];
  List<int?> empDesignation = [];
  List<int?> DaliyMonthlys = [];
  List<int?> WagesToPaid = [];
  List<TextEditingController> empAgeControllers = [];

  // List<String> otherDesignationNote = [];
  List<int> _contractorIds = [];
  List<TextEditingController> _contractorNameControllers = [];
  List<TextEditingController> _companyNameControllers = [];
  List<TextEditingController> _jobTypeControllers = [];
  List<TextEditingController> _commencementDateControllers = [];
  List<TextEditingController> _completionDateControllers = [];
  List<TextEditingController> _contractorMaleWorkerControllers = [];
  List<TextEditingController> _contractorFeMaleWorkerControllers = [];
  List<TextEditingController> _contractorTransgenderWorkerControllers = [];
  List<TextEditingController> _contractorTotalWorkerControllers = [];
  List<TextEditingController> _Act1NameControllers = [];
  List<TextEditingController> _Act1SrNoControllers = [];
  List<TextEditingController> _Act1_8SrNoControllers = [];
  List<TextEditingController> _Act1_8NameControllers = [];
  List<TextEditingController> _Act1_8DesgControllers = [];
  List<TextEditingController> _Act1_8lengthServiceControllers = [];
  List<TextEditingController> _Act1_8dailyWorkHrsControllers = [];
  List<TextEditingController> _Act1_8MonthControllers = [];
  List<TextEditingController> _Act1_8dayControllers = [];
  List<TextEditingController> _Act1_8wageEntitledControllers = [];
  List<TextEditingController> _Act1_8wagePayableControllers = [];
  List<TextEditingController> _Act1_8wagePaidControllers = [];
  List<TextEditingController> _Act1_8differenceWageAmountControllers = [];
  List<TextEditingController> _Act1_8UploadFiles = [];
  List<TextEditingController> _Act1_8remarksControllers = [];
  List<TextEditingController> _Act2_1SrNoControllers = [];
  List<TextEditingController> _Act2_1FinancialYearControllers = [];
  List<TextEditingController> _Act2_2SrNoControllers = [];
  List<TextEditingController> _Act2_2WorkerNameControllers = [];
  List<TextEditingController> _Act4_1_1SrNoControllers = [];
  List<TextEditingController> _Act4_1_1NameContractorControllers = [];
  List<TextEditingController> _Act4_1_1DetailsWorkControllers = [];
  List<TextEditingController> _Act4_1_1TimeSinceControllers = [];
  List<TextEditingController> _Act4_1_1NoWorkersControllers = [];
  List<TextEditingController> _Act4_1_5SrNoControllers = [];
  List<TextEditingController> _Act4_1_5NameContractorControllers = [];
  List<TextEditingController> _Act4_1_5NameContractorLabourControllers = [];
  List<TextEditingController> _Act4_1_5PaidWagesControllers = [];
  List<TextEditingController> _Act4_1_5WagesTobePaidControllers = [];
  List<TextEditingController> _Act4_1_5DifferAmountControllers = [];
  List<TextEditingController> _Act4_2_5SrNoControllers = [];
  List<TextEditingController> _Act4_2_5NameContractorControllers = [];
  List<TextEditingController> _Act11_1SrNoControllers = [];
  List<TextEditingController> _Act11_1NameControllers = [];
  List<TextEditingController> _Act11_1DesgControllers = [];
  List<TextEditingController> _Act11_1DateAppointmentControllers = [];
  List<TextEditingController> _Act8_3SrNoControllers = [];
  List<TextEditingController> _Act8_3NameControllers = [];
  List<TextEditingController> _Act8_3DesgControllers = [];
  List<TextEditingController> _Act8_3DateSuspensionControllers = [];
  List<TextEditingController> _Act7_2_4SrNoControllers = [];
  List<TextEditingController> _Act7_2_4NameAdolescentLabourControllers = [];
  List<TextEditingController> _Act7_2_4AddressControllers = [];
  List<TextEditingController> _Act7_2_4AgeControllers = [];
  List<TextEditingController> _Act7_3SrNoControllers = [];
  List<TextEditingController> _Act7_3NameAdolescentLabourControllers = [];
  List<TextEditingController> _Act7_3AddressControllers = [];
  List<TextEditingController> _Act7_3AgeControllers = [];
  List<TextEditingController> _Act7_1_3SrNoControllers = [];
  List<TextEditingController> _Act7_1_3NameChildLabourControllers = [];
  List<TextEditingController> _Act7_1_3AddressControllers = [];
  List<TextEditingController> _Act7_1_3AgeControllers = [];
  List<TextEditingController> _Act7_1_2SrNoControllers = [];
  List<TextEditingController> _Act7_1_2NameAdolescentLabourControllers = [];
  List<TextEditingController> _Act7_1_2AddressControllers = [];
  List<TextEditingController> _Act7_1_2AgeControllers = [];
  List<TextEditingController> _Act7_1_1SrNoControllers = [];
  List<TextEditingController> _Act7_1_1NameChildLabourControllers = [];
  List<TextEditingController> _Act7_1_1AddressControllers = [];
  List<TextEditingController> _Act7_1_1AgeControllers = [];
  List<TextEditingController> _Act6SrNoControllers = [];
  List<TextEditingController> _Act6NameContractorControllers = [];
  List<TextEditingController> _Act6AddressControllers = [];
  List<TextEditingController> _Act6DetailsWorkControllers = [];
  List<TextEditingController> _Act6TimeSinceControllers = [];
  List<TextEditingController> _Act6NoWorkersControllers = [];
  List<TextEditingController> _Act6TotalNoWorkersControllers = [];
  List<TextEditingController> _Act5_4SrNoControllers = [];
  List<TextEditingController> _Act5_4MaleWorkersControllers = [];
  List<TextEditingController> _Act5_4MDesgControllers = [];
  List<TextEditingController> _Act5_4MSalaryPaidControllers = [];
  List<TextEditingController> _Act5_4FemaleWorkersControllers = [];
  List<TextEditingController> _Act5_4FDesgControllers = [];
  List<TextEditingController> _Act5_4FSalaryPaidControllers = [];
  List<String> _selectContractors = []; // Step 1: List to store selected values
  List<bool> isContractorsList = [];
  List<bool> isDesgn = [];
  List<bool> isMonth = [];
  List<bool> isDay = [];
  List<int> _selectedHasLicense = [];
  List<bool> _isHasLicenesList = [];
  List<bool> IsFromA = [];
  List<bool> IsFromB = [];
  List<bool> IsFromC = [];
  List<bool> IsFromD = [];
  String xmlString = "";
  String reportNo = "";
  final dbHelper = DatabaseHelper.instance;
  StepperType stepperType = StepperType.horizontal;
  dynamic selectedCategory = '';
  int? selectedEstablishment = 0;
  dynamic selectedDistrict;
  int? selectedReportDistrict = 0;
  int? selectedReportTaluka = 0;
  int? selectedDesignation;
  dynamic selectedTaluka;
  dynamic selectedIndustory;
  final List<String> dropdownItems = ['Item 1', 'Item 2', 'Item 3'];
  String selectedValue = 'Item 1';
  int? selectedHasLicense = 0;
  int? selectedAuthSign;
  int? selectedNonCompliance;
  int? selectedTimeLimit;
  dynamic selectedReportingAuth;
  int? selectedDailyMonthly;
  int? selectedWagesPaid;
  int? selectContractor = 0;

  dynamic selectContractor1 = '';
  static const LicenseList = ['Yes', 'No'];
  String? pronoun = '';
  bool isSwitchedActs1ConditionMet = false;
  bool isOnline = false;
  bool isAppOnline = true;
  bool isComplain = false;
  bool isUnScheduled = false;
  bool? checkedValue = false;
  bool IsFactoriesAct = false;
  bool IsEstablishmentAct = false;
  bool IsLabourAct = false;
  bool IsRegistrationUnderGST = false;
  bool IsSocietyAct = false;
  bool IsTrustAct = false;
  bool IsTMTWAct1961Grul1965 = false;
  bool isHasLicense = false;
  bool isContractor = false;
  bool isAuthSign = false;
  bool isNonCompliance = false;
  bool isFromA = false;
  bool isFromB = false;
  bool isFromC = false;
  bool isFromD = false;
  int? registerUnder = 0;
  bool isRegNo = false;
  List<GlobalKey> employerGlobalKeys = [];
  List<Widget> employerWidgets = [];
  List<GlobalKey> contractorGlobalKeys = [];
  List<Widget> contractorWidgets = [];
  List<Widget> Act1_6Widgets = [];
  List<int> act1_6RuleIds = [];
  List<int> act1_6WorkerIds = [];
  List<int> act1_6Ids = [];
  List<int> act1_8RuleIds = [];
  List<int> act1_8Rule8MinWorkerIds = [];
  List<int> act1_8Ids = [];
  List<int> act2_1FinancialLIstIds = [];
  List<int> act2_1RuleIds = [];
  List<int> act2_1Ids = [];
  List<int> act2_2RuleIds = [];
  List<int> act2_2NotPaidWorkerDetailDNoIds = [];
  List<int> act2_2Ids = [];
  List<int> act4_1_5RuleIds = [];
  List<int> act4_1_5Sharamk214DNo = [];
  List<int> act4_1_5Ids = [];
  List<int> act4_2_5RuleIds = [];
  List<int> act4_2_5ACTIsBreakRuleS211k65DNo = [];
  List<int> act4_2_5Ids = [];
  List<int> act5_4RuleIds = [];
  List<int> act5_4Ids = [];
  List<int> act6ContractorPersonDetailsDetailDNo = [];
  List<int> act6RuleIds = [];
  List<int> act6Ids = [];
  List<int> act7_3ACTIsBreakRule972DetailDNo = [];
  List<int> act7_3RuleIds = [];
  List<int> act7_3Ids = [];
  List<int> act7_4ACTIsBreakRule973DetailDNo = [];
  List<int> act7_4RuleIds = [];
  List<int> act7_4Ids = [];
  List<int> act7_5WorkemenSrNo = [];
  List<int> act7_5RuleIds = [];
  List<int> act7_5Ids = [];
  List<int> act8_3dessrno = [];
  List<int> act8_3RuleIds = [];
  List<int> act8_3Ids = [];
  List<int> act11_1EmployeesActNo = [];
  List<int> act11_1RuleIds = [];
  List<int> act11_1Ids = [];
  List<int> employeeIds = [];
  List<Widget> Act1_8Widgets = [];
  List<Widget> Act2_1Widgets = [];
  List<Widget> Act2_2Widgets = [];
  List<Widget> Act4_1_1Widgets = [];
  List<Widget> Act4_1_5Widgets = [];
  List<Widget> Act4_2_5Widgets = [];
  List<Widget> Act5_4Widgets = [];
  List<Widget> Act6Widgets = [];
  List<Widget> Act7_1_1Widgets = [];
  List<Widget> Act7_1_2Widgets = [];
  List<Widget> Act7_1_3Widgets = [];
  List<Widget> Act7_2_4Widgets = [];
  List<Widget> Act7_3Widgets = [];

  List<Widget> Act8_3Widgets = [];
  List<Widget> Act11_1Widgets = [];

  bool isreadOnly = true;
  bool isreadOnly1_5 = true;
  bool isreadOnlyRule2bYear = true;
  bool isreadOnlyR4a = true;
  bool isreadOnlyR4b = true;
  bool isreadOnlyR4c = true;
  bool isreadOnlyS26R5 = true;
  bool isreadOnlyR32 = true;
  bool isreadOnlyISNo = true;
  bool isreadOnlyS9a = true;
  bool isreadOnlyR72 = true;
  bool isreadOnlyS212Sno = true;
  bool isreadOnlyR822 = true;
  bool isreadOnlyS292R811 = true;
  bool isreadOnlyS122R25 = true;
  bool isreadOnlyS211R65 = true;
  bool isreadOnlyR812 = true;
  bool isreadOnlyR6 = true;
  bool isreadOnlyS172R34 = true;
  bool isreadOnlyR13_14_25S7 = true;
  bool isreadOnlyR14_15_16S4 = true;
  bool isreadONOnly143_144_145 = true;

  bool isSwitchedLanguage = false;
  bool isSwitchedActs1 = false;
  bool isSwitchedActs1_1 = false;
  bool isSwitchedActs1_2 = false;
  bool isSwitchedActs1_3 = false;
  bool isSwitchedActs1_4 = false;
  bool isSwitchedActs1_5 = false;
  bool isSwitchedActs1_6 = false;
  bool isSwitchedActs1_7 = false;
  bool isSwitchedActs1_8 = false;
  bool isSwitchedActs1_9 = false;
  bool isSwitchedActs1_10 = false;
  bool isSwitchedActs1_11 = false;
  bool isSwitchedActs1_12 = false;
  bool isSwitchedActs1_13 = false;
  bool isSwitchedActs1_14 = false;
  bool isSwitchedActs1_15 = false;
  bool isSwitchedActs1_16 = false;
  bool isSwitchedActs1_17 = false;
  bool isSwitchedActs1_18 = false;
  bool isSwitchedActs1_19 = false;
  bool isSwitchedActs1_20 = false;
  bool isSwitchedActs1_21 = false;
  bool isSwitchedActs2 = false;
  bool isSwitchedActs2_1 = false;
  bool isSwitchedActs2_2 = false;
  bool isSwitchedActs2_3 = false;
  bool isSwitchedActs2_4 = false;
  bool isSwitchedActs2_5 = false;
  bool isSwitchedActs2_6 = false;
  bool isSwitchedActs3 = false;
  bool isSwitchedActs3_1 = false;
  bool isSwitchedActs3_2 = false;
  bool isSwitchedActs3_3 = false;
  bool isSwitchedActs3_4 = false;
  bool isSwitchedActs4 = false;
  bool isSwitchedActs4_1_1 = false;
  bool isSwitchedActs4_1_2 = false;
  bool isSwitchedActs4_1_3 = false;
  bool isSwitchedActs4_1_4 = false;
  bool isSwitchedActs4_1_5 = false;
  bool isSwitchedActs4_1_6 = false;
  bool isSwitchedActs4_1_7 = false;
  bool isSwitchedActs4_1_8 = false;
  bool isSwitchedActs4_1_9 = false;
  bool isSwitchedActs4_1_10 = false;
  bool isSwitchedActs4_1_11 = false;
  bool isSwitchedActs4_1_12 = false;
  bool isSwitchedActs4_2_1 = false;
  bool isSwitchedActs4_2_2 = false;
  bool isSwitchedActs4_2_3 = false;
  bool isSwitchedActs4_2_4 = false;
  bool isSwitchedActs4_2_5 = false;
  bool isSwitchedActs4_2_6 = false;
  bool isSwitchedActs4_2_7 = false;
  bool isSwitchedActs4_2_8 = false;
  bool isSwitchedActs4_2_9 = false;
  bool isSwitchedActs4_2_10 = false;
  bool isSwitchedActs4_2_11 = false;
  bool isSwitchedActs4_2_12 = false;
  bool isSwitchedActs4_2_13 = false;
  bool isSwitchedActs4_2_14 = false;
  bool isSwitchedActs4_2_15 = false;
  bool isSwitchedActs4_2_16 = false;
  bool isSwitchedActs4_2_17 = false;
  bool isSwitchedActs4_2_18 = false;
  bool isSwitchedActs4_2_19 = false;
  bool isSwitchedActs4_2_20 = false;
  bool isSwitchedActs5 = false;
  bool isSwitchedActs5_1 = false;
  bool isSwitchedActs5_2 = false;
  bool isSwitchedActs5_3 = false;
  bool isSwitchedActs5_4 = false;
  bool isSwitchedActs6 = false;
  bool isSwitchedActs6_1_1 = false;
  bool isSwitchedActs6_1_2 = false;
  bool isSwitchedActs6_1_3 = false;
  bool isSwitchedActs6_1_4 = false;
  bool isSwitchedActs6_1_5 = false;
  bool isSwitchedActs6_1_6 = false;
  bool isSwitchedActs6_1_7 = false;
  bool isSwitchedActs6_2_1 = false;
  bool isSwitchedActs6_2_2 = false;
  bool isSwitchedActs6_2_3 = false;
  bool isSwitchedActs7 = false;
  bool isSwitchedActs7_1_1 = false;
  bool isSwitchedActs7_1_2 = false;
  bool isSwitchedActs7_1_3 = false;
  bool isSwitchedActs7_2_1 = false;
  bool isSwitchedActs7_2_2 = false;
  bool isSwitchedActs7_2_3 = false;
  bool isSwitchedActs7_2_4 = false;
  bool isSwitchedActs8 = false;
  bool isSwitchedActs8_1 = false;
  bool isSwitchedActs8_2 = false;
  bool isSwitchedActs8_3 = false;
  bool isSwitchedActs9 = false;
  bool isSwitchedActs9_1 = false;
  bool isSwitchedActs9_2 = false;
  bool isSwitchedActs9_3 = false;
  bool isSwitchedActs9_4 = false;
  bool isSwitchedActs9_5 = false;
  bool isSwitchedActs10 = false;
  bool isSwitchedActs10_1 = false;
  bool isSwitchedActs10_2 = false;
  bool isSwitchedActs10_3 = false;
  bool isSwitchedActs11 = false;
  bool isSwitchedActs11_1 = false;
  bool isSwitchedActs11_2 = false;
  bool isSwitchedActs11_3 = false;
  bool isSwitchedActs11_4 = false;
  bool empFormD = false;
  bool serviceFormE = false;
  bool leaveRegFormF = false;
  bool musterRollFormG = false;
  List<TextEditingController> employerNameArrayControllers = [];

  List<Map<String, dynamic>?> deletedAct1_6List = [];
  List<Map<String, dynamic>?> deletedAct1_8List = [];
  List<Map<String, dynamic>?> deletedAct2_1List = [];
  List<Map<String, dynamic>?> deletedAct2_2List = [];
  List<Map<String, dynamic>?> deletedAct4_1_5List = [];
  List<Map<String, dynamic>?> deletedAct4_2_5List = [];
  List<Map<String, dynamic>?> deletedAct5_4List = [];
  List<Map<String, dynamic>?> deletedAct6List = [];
  List<Map<String, dynamic>?> deletedAct7_3List = [];
  List<Map<String, dynamic>?> deletedAct7_4List = [];
  List<Map<String, dynamic>?> deletedAct7_5List = [];
  List<Map<String, dynamic>?> deletedAct8_3List = [];
  List<Map<String, dynamic>?> deletedAct11_1List = [];
  List<Map<String, dynamic>?> deletedEmployeeList = [];
  List<Map<String, dynamic>?> deletedContractorList = [];

  List<Map<String, dynamic>?> EmailList = [];
  Map<String, dynamic>? EmailXML;

  List<Map<String, dynamic>?> dataList = [];
  Map<String, dynamic>? newData;

  List<Map<String, dynamic>?> ContractorList = [];
  Map<String, dynamic>? ContractorData;

  List<Map<String, dynamic>?> MainDivACT1WorkerDetailsList = [];
  Map<String, dynamic>? MainDivACT1WorkerDetailsXML;

  List<Map<String, dynamic>?> MainDivACT18WorkersDetailsList = [];
  Map<String, dynamic>? MainDivACT18WorkersDetailsXML;

  List<Map<String, dynamic>?> ActFinancial12ListXMLList = [];
  Map<String, dynamic>? ActFinancial12ListXML;

  List<Map<String, dynamic>?> ACTRuleNotPaidWorkerXMLList = [];
  Map<String, dynamic>? ACTRuleNotPaidWorkerXML;

  List<Map<String, dynamic>?> ACTContractorDetailXMLList = [];
  Map<String, dynamic>? ACTContractorDetailXML;

  List<Map<String, dynamic>?> ACTSharamk214DetailsXMLList = [];
  Map<String, dynamic>? ACTSharamk214DetailsXML;

  List<Map<String, dynamic>?> ACTRuleS211k65DetailsXMLList = [];
  Map<String, dynamic>? ACTRuleS211k65DetailsXML;

  List<Map<String, dynamic>?> ACTWorkerDetailsXMLList = [];
  Map<String, dynamic>? ACTWorkerDetailsXML;

  List<Map<String, dynamic>?> ACTContractPersonDetailsXMLList = [];
  Map<String, dynamic>? ACTContractPersonDetailsXML;

  List<Map<String, dynamic>?> ACTRulek3DetailsXMLList = [];
  Map<String, dynamic>? ACTRulek3DetailsXML;

  List<Map<String, dynamic>?> ACTRule3aDetailsXMLList = [];
  Map<String, dynamic>? ACTRule3aDetailsXML;

  List<Map<String, dynamic>?> ACTRuleWorkmen17XMLList = [];
  Map<String, dynamic>? ACTRuleWorkmen17XML;

  List<Map<String, dynamic>?> ACTRule973DetailsXMLList = [];
  Map<String, dynamic>? ACTRule973DetailsXML;

  List<Map<String, dynamic>?> ACTRule972DetailsRecordXMLList = [];
  Map<String, dynamic>? ACTRule972DetailsRecordXML;

  List<Map<String, dynamic>?> ACTRuleDesignationXMLList = [];
  Map<String, dynamic>? ACTRuleDesignationXML;

  List<Map<String, dynamic>?> ACTRuleMainDivEmployeesXMLList = [];
  Map<String, dynamic>? ACTRuleMainDivEmployeesXML;

  List<Map<String, dynamic>?> InspectionOnsitePictureXMLList = [];
  Map<String, dynamic>? InspectionOnsitePictureXML;

  List<Map<String, dynamic>?> deletedInspectionOnsitePictureXMLList = [];

  // final snackBar = SnackBar(
  //   content: const Text('Save Successfully'),
  //   duration: Duration(seconds: 3),
  // );
  File? fileLicenseProof;
  File? fileRegProof;
  File? fileUploadContractor;
  File? fileEstImg;
  File? fileEstDoc;
  File? fileAuthorizedSign;
  File? fileInspectorSign;
  PlatformFile? fileUploadContractorList;
  String? filePath;
  List<String> filePaths = [];
  String? filePathLicense = "",
      ContractorFileName = "",
      ContractorFileCID = "",
      LicenseFileName = "",
      LicenseFileCID = "",
      RegFileName = "",
      RegFileCID = "",
      ESTImageName = "",
      ESTImageCID = "",
      ESTDocName = "",
      ESTDocCID = "";

  String? filePathReg = "", WorkerFileUploadName, WorkerFileUploadCID;
  String? filePathEstImage = "";
  List<String> filePathEstImageList = [];
  String? filePathEstDoc = "";
  List<String> filePathEstDocList = [];
  List<DropDownResponseModel> EstablishList = [];
  List<DropDownResponseModel> ReportDistrictList = [];
  List<DropDownResponseModel> ReportTalukatList = [];
  List<DropDownResponseModel> EstablishTypeList = [];
  List<DropDownResponseModel> EstablishDistrictList = [];
  List<DropDownResponseModel> EstablishTalukaList = [];
  List<DropDownResponseModel> EstablishTypeOfIndustryList = [];
  List<DropDownResponseModel> EmpDesignationList = [];
  List<DropDownResponseModel> AllYesNoList = [];
  List<DropDownResponseModel> OtherStiplatedTimeLimitList = [];
  List<DropDownResponseModel> ReportAuthorityList = [];
  List<DropDownResponseModel> DailyMonthlyList = [];
  List<DropDownResponseModel> WagestoPaidList = [];
  final _preferences = GetIt.I<PreferencesManager>();
  final _formKeyStep1 = GlobalKey<FormState>();
  late GlobalKey<FormState> _formKey;
  late GlobalKey<FormState> _form1_6Key;
  late GlobalKey<FormState> _form1_8Key;
  late GlobalKey<FormState> _form2_1Key;
  late GlobalKey<FormState> _form2_2Key;
  late GlobalKey<FormState> _form4_1_4Key;
  late GlobalKey<FormState> _form4_2_5Key;
  late GlobalKey<FormState> _form5_4Key;
  late GlobalKey<FormState> _form6Key;
  late GlobalKey<FormState> _form7_3Key;
  late GlobalKey<FormState> _form7_4Key;
  late GlobalKey<FormState> _form7_5Key;
  late GlobalKey<FormState> _form8_3Key;
  late GlobalKey<FormState> _form11_1Key;
  late GlobalKey<FormState> _formEmployeeKey;
  late GlobalKey<FormState> _formContractorKey;

  late FocusNode _focusNode;
  final _textFormFieldFocusNode1 = FocusNode();
  final _dropDownFocusNode1 = FocusNode();
  final _dropDownFocusNode2 = FocusNode();
  final _dropDownFocusNode3 = FocusNode();
  final _dropDownFocusNode4 = FocusNode();
  final _dropDownFocusNode5 = FocusNode();
  final _dropDownFocusNode6 = FocusNode();
  final _textFormFieldFocusNode2 = FocusNode();
  final _textFormFieldFocusNodeName = FocusNode();
  final _textFormFieldFocusNode3 = FocusNode();
  final _textFormFieldFocusNode4 = FocusNode();
  final _textFormFieldFocusNode5 = FocusNode();
  final _textFormFieldFocusNode6 = FocusNode();
  final _textFormFieldFocusNode7 = FocusNode();
  final _textFormFieldFocusNode8 = FocusNode();
  final _textFormFieldFocusNode9 = FocusNode();
  final _textFormFieldFocusNode10 = FocusNode();
  final _textFormFieldFocusNode11 = FocusNode();
  final _textFormFieldFocusNode12 = FocusNode();
  final _textFormFieldFocusNode13 = FocusNode();
  final _textFormFieldFocusNode14 = FocusNode();
  final _textFormFieldFocusNode15 = FocusNode();
  final _textFormFieldFocusNode16 = FocusNode();
  final _textFormFieldFocusNode17 = FocusNode();
  final _textFormFieldFocusNode18 = FocusNode();
  final _textFormFieldFocusNode19 = FocusNode();
  final _textFormFieldFocusNode20 = FocusNode();
  final _textFormFieldFocusNode21 = FocusNode();
  final _textFormFieldFocusNodeOther = FocusNode();

  final act1_1_key = GlobalKey();
  final act1_5_key = GlobalKey();
  final act1_6_key = GlobalKey();
  final act1_8_key = GlobalKey();
  List<GlobalKey> act1_8GlobalKeys = [];
  List<GlobalKey> act1_6GlobalKeys = [];
  List<GlobalKey> act1_6_ListGlobalKeys = [];
  List<GlobalKey> act2_1GlobalKeys = [];
  List<GlobalKey> act2_2GlobalKeys = [];
  List<GlobalKey> act4_1_5GlobalKeys = [];
  List<GlobalKey> act4_2_5GlobalKeys = [];
  List<GlobalKey> act5_4GlobalKeys = [];
  List<GlobalKey> act6GlobalKeys = [];
  List<GlobalKey> act7_3GlobalKeys = [];
  List<GlobalKey> act7_4GlobalKeys = [];
  List<GlobalKey> act7_5GlobalKeys = [];
  List<GlobalKey> act8_3GlobalKeys = [];
  List<GlobalKey> act11_1GlobalKeys = [];
  final act1_13_key = GlobalKey();

  final act2_1_key = GlobalKey();
  final act2_2_key = GlobalKey();
  final act2_3_key = GlobalKey();
  final act2_4_key = GlobalKey();
  final act2_5_key = GlobalKey();
  final act2_6_key = GlobalKey();

  final act3_3_key = GlobalKey();
  final act4_1_5key = GlobalKey();
  final act4_1_6key = GlobalKey();
  final act4_1_7key = GlobalKey();
  final act4_2_5key = GlobalKey();
  final act4_2_10key = GlobalKey();
  final act6_1_3key = GlobalKey();
  final act6_1_4key = GlobalKey();
  final act10_3key = GlobalKey();
  final act11_3key = GlobalKey();
  final act11_4key = GlobalKey();
  final establishmentImageGlobalKey = GlobalKey();

  final authPersonSignKey = GlobalKey();
  final inspectorSignKey = GlobalKey();

  final _dio = GetIt.I<Dio>();
  int? userID = 0;
  String inspection_date = "";
  String report_no = "";
  int? reportDistrictID = 0;
  int? reportTalukaID = 0;
  int? reportPinCodeID = 0;
  int? reportZoneID = 0;
  String? reportAreaName;
  String? IFPApplicationNo;
  String ComplainName = "";
  String ComplainSubject = "";
  String ComplainDate = "";
  int? InspectionType = 0;
  String EstablishmentName = "";
  String PAddress = "";
  int? EstDistrictID = 0;
  int? EstTalukaID = 0;
  int? EstPincode = 0;
  int? EstZoneID;
  String? EstArea = "";
  String RegisteredUnder = "";
  String RegistrationNumber = "";
  String RegistrationDate = "";
  int? IndustrytypeID = 0;
  String Mentionbelow = "", fileName = "", fileCID = "";
  int? MaleCount = 0;
  int? FemaleCount = 0;
  int? TransgenderCount = 0;
  int? TotalEmployees = 0, BreakRule26b2Year1 = 0, BreakRule26b2Year = 0;
  bool dbIsFactoriesAct = false,
      dbIsEstablishmentAct = false,
      dbIsLabourAct = false,
      dbIsRegistrationunderGST = false,
      dbIsSocietyAct = false,
      dbIsTrustAct = false,
      IsMinimumWagesAct1948 = false,
      IsThepaymentofBonusAct1965 = false,
      IsThepaymentofGratuityAct1972 = false,
      IsTheCLAct1970GRules1972 = false,
      IsTheEqualremunerationAct1976 = false,
      IsTheISMWRECSAct1979Grules1981 = false,
      IsTheChildLabourAct1986rules = false,
      IsTheIESOA1946GRul1959 = false,
      dbIsTMTWAct1961Grul1965 = false,
      IsTheWJNpaperEmployees = false,
      IsTheSPECofServiceAct1976 = false,
      MainContraventionsWagesAct = false,
      IsBreakRule26d = false,
      IsBreakRuleSK4 = false,
      IsBreakRuleS5 = false,
      IsBreakRuleS7 = false,
      IsBreakRuleS4 = false,
      MainInspectionSalesEmployeesAct = false,
      IsBreakRule131425 = false,
      IsBreakRulek17a94checkbox4 = false,
      IsBreakRulek17a94checkbox3 = false,
      IsBreakRulek17a94checkbox2 = false,
      IsBreakRulek17a94checkbox1 = false,
      IsBreakRulek17a94 = false,
      IsBreakRulek324 = false,
      MainContObsInterStateWorkmen1957Act = false,
      IsBreakRuleS13 = false,
      IsBreakRule341 = false,
      IsBreakRule931 = false,
      IsBreakRule126 = false,
      IsBreakRule324 = false,
      IsBreakRuleS10 = false,
      IsBreakRulek9 = false,
      IsBreakRuleo5 = false,
      MainContObsInterStateWorkmen1946Act = false,
      MainContraventionsObservedUnderInterStateMigrantWorkmen1979Act = false,
      IsBreakRuleUN1976k41 = false,
      IsBreakRule94 = false,
      IsBreakRule93b = false,
      IsBreakRule6 = false,
      MainContraventionsObservedUnderRemuneration1976Act = false,
      IsBreakRule58 = false,
      IsBreakRuleU812 = false,
      IsBreakRule8111 = false,
      IsBreakRule71 = false,
      IsBreakRule821 = false,
      IsBreakRuleS291k782b = false,
      IsBreakRuleS291k781d = false,
      IsBreakRuleS291k781b = false,
      IsBreakRuleS291k781a = false,
      IsBreakRuleS131k29 = false,
      IsBreakRuleS122k25 = false,
      IsBreakRule804 = false,
      IsBreakRuleS291k76 = false,
      IsBreakRuleS291k75 = false,
      IsBreakRuleS213k72 = false,
      IsBreakRuleS211k65 = false,
      IsBreakRule401 = false,
      IsBreakRuleS17k41 = false,
      IsBreakRule421 = false,
      IsBreakRuleS131k211 = false,
      IsBreakRuleS121k211 = false,
      MainContraventionsObservedUnderContractLabour1972Act = false,
      IsBreakRule183 = false,
      IsBreakRule812 = false,
      IsBreakRule811 = false,
      IsBreakRule822 = false,
      IsBreakRule73 = false,
      IsBreakRule72 = false,
      IsBreakRule9k = false,
      IsBreakRule214 = false,
      IsBreakRule201 = false,
      IsBreakRule74 = false,
      IsBreakRule171 = false,
      IsEngagesContractExtraWork = false,
      MainContraventionsContractLabour1972Act = false,
      IsBreakRule7b = false,
      IsBreakRule33 = false,
      IsBreakRule32 = false,
      IsBreakRule19 = false,
      IsBreakRule62 = false,
      IsBreakRule41 = false,
      IsBreakRule31 = false,
      MainContraventionsPayBounus1972Act = false,
      IsBreakRule5 = false,
      IsBreakRule4c = false,
      IsBreakRule4b = false,
      IsBreakRule4a = false,
      IsBreakRule219b = false,
      FormA = false,
      FormB = false,
      FormC = false,
      FormD = false,
      IsBreakRule274 = false,
      MainContraventionsPayBounus1965Act = false,
      IsBreakRule194 = false,
      IsBreakRule13ba = false,
      IsBreakRule231 = false,
      IsBreakRule23 = false,
      IsBreakRule252 = false,
      IsBreakRule26b3 = false,
      IsBreakRule26b2 = false,
      IsBreakRule26a = false,
      IsBreakRule265 = false,
      IsBreakRule264 = false,
      IsBreakRule263 = false,
      IsBreakRule261 = false,
      IsBreakRule121 = false,
      IsBreakRuleK12 = false,
      IsBreakRule251 = false,
      IsBreakRule214FormC = false,
      IsBreakRule211a = false,
      IsBreakRule22 = false,
      IsBreakRule262 = false,
      IsBreakRule26b = false,
      IsBreakRule4131 = false,
      IsBreakRule48 = false,
      IsBreakRuleK6 = false,
      IsBreakRule35 = false,
      IsBreakRule49 = false,
      IsBreakRule551 = false,
      IsBreakRule552 = false,
      MainContObsInterStateWorkmen1981Act = false,
      IsBreakRule7281 = false,
      IsBreakRule211 = false,
      IsBreakRule511 = false,
      MainContObsInterStateWorkmen1986Act = false,
      IsBreakRulek3 = false,
      IsBreakRule3a = false,
      IsBreakRule17 = false,
      IsBreakRule16 = false,
      IsBreakRule312 = false,
      IsBreakRule941 = false,
      IsBreakRule972 = false,
      IsBreakRule973 = false,
      MainContObsInterStateWorkmen1961Act = false,
      IsBreakRule26b1 = false,
      IsSubmit = false;

  bool isSubmitButtonClicked = false;

  double? latitude = 0;
  double? longitude = 0;

  bool IsOffline = false;

  int? IsRegisteredUnder = 0, EID = 0, BreakRule822Year1 = 0, BreakRule822Year2 = 0, BreakRule274Year2 = 0, BreakRule214FormCNote = 0, EstablishmenttypeID = 0;
  String AuthorizedPersonName = "",
      AuthorizedPersonEmail = "",
      AuthorizedPersonContactNo = "",
      AuthorizedPersonDesignation = "",
      LicensepProofDoc = "",
      LicensepProofCID = "",
      RegistrationDoc = "",
      RegistrationCID = "",
      EmployeeDetailsXMLString = "",
      ContractorDetailsXMLString = "",
      MainDivACT1WorkerDetailsXMLString = "",
      EmailXMLString = "",
      MainDivACT18WorkersDetailsXMLString = "",
      ActFinancial12ListXMLString = "",
      ACTRuleNotPaidWorkerXMLString = "",
      NoPaidBonusPersonyear = "",
      ACTContractorDetailXMLString = "",
      IsextraworkDoc = "",
      IsextraworkDocCID = "",
      ACTSharamk214DetailsXMLString = "",
      ACTRuleS211k65DetailsXMLString = "",
      ACTWorkerDetailsXMLString = "",
      ACTContractPersonDetailsXMLString = "",
      ACTRulek3DetailsXMLString = "",
      ACTRule3aDetailsXMLString = "",
      ACTRuleWorkmen17XMLString = "",
      ACTRule973DetailsXMLString = "",
      ACTRule972DetailsRecordXMLString = "",
      ACTRuleDesignationXMLString = "",
      ACTRuleMainDivEmployeesXMLString = "",
      MainContraventionsWagesActNote = "",
      BreakRule26d1Note = "",
      IsBreakRule121Doc = "",
      MainContraventionsPayBounus1965ActNote = "",
      BreakRule274Year1 = "",
      BreakRule4aYear = "",
      BreakRule4bYear = "",
      BreakRule4cYear = "",
      BreakRule5Year = "",
      MainContraventionsPayBounus1972ActNote = "",
      BreakRule32note = "",
      MainContraventionsContractLabour1972ActNote = "",
      EngagesContractExtraWorkUser = "",
      BreakRule9kUser = "",
      BreakRule9kTotalUser = "",
      BreakRule72User = "",
      BreakRule73User = "",
      BreakRule811User = "",
      ContractLabourChangeDetails = "",
      ContractLabourDateofModification = "",
      MainContraventionsObservedUnderContractLabour1972ActNote = "",
      IsBreakRuleS122k25LicNo = "",
      BreakRuleS211k65Year = "",
      MainContraventionsObservedUnderRemuneration1976ActNote = "",
      IsBreakRuleK6Not1 = "",
      IsBreakRule35Not1 = "",
      MainContObsInterStateWorkmen1981ActNote = "",
      MainContraventionsInterStateMigrantWorkmen1979ActNote = "",
      MainContObsInterStateWorkmen1986ActNote = "",
      MainContObsInterStateWorkmen1946ActNote = "",
      MainContObsInterStateWorkmen1961ActNote = "",
      IsBreakRuleS13Not = "",
      MainContObsInterStateWorkmen1957ActNote = "",
      IsBreakRule131425Not = "",
      IsBreakRule131425Not1 = "",
      MainInspectionSalesEmployeesActNote = "",
      IsBreakRuleS4Not = "",
      InspectorName = "",
      InspectorEmail = "",
      AuthorizedPersonSignatureNote = "",
      ComplianceDocumentReceivedby = "",
      AuthorizedSignPath = "",
      InspectorSignPath = "",
      AuthorizedSignCID = "",
      ComplianceSignCID = "",
      ComplianceSignPath = "",
      InspectionSignCID = "",
      MapImagefilename = "",
      MapImageCID = "",
      ComplianceDocumentReceivedDate = "",
      InspectionOnsitePictureXMLString = "";
  bool _permissionReady = false;
  bool isMapLoadedSuccessfully = false;
  int? ACTID = 0,
      ACTRuleID = 0,
      InspectionaclID = 0,
      StiplatedTimeLimit = 0,
      IsComplianceDocument = 0,
      IsAuthorizedPersonSignature = 0,
      ApplicationStatus = 0,
      IsNonComplianceObserved = 0,
      BreakRule821Year2 = 0,
      BreakRule821Year1 = 0;
  String? IsBreakRule121DocCID = null;
  DateTime currentDate = DateTime.now();
  DateTime currentRegDate = DateTime.now();
  DateTime currentTimeSinceDate = DateTime.now();

  //DateTime currentTimeSinceDates = DateTime.now();
  DateTime currentDateOfComplain = DateTime.now();
  DateTime current_commencementDate = DateTime.now();
  DateTime current_completionDate = DateTime.now();
  DateTime current_completionDates = DateTime.now();
  DateTime current_suspensionDate = DateTime.now();
  DateTime current_appointmentDate = DateTime.now();

  // DateTime current_appointmentDates = DateTime.now();
  List<DateTime> current_suspensionDates = [];
  List<DateTime> currentTimeSinceDates = [];
  List<DateTime> current_wagesEntitleds = [];
  List<DateTime> current_appointmentDates = [];
  List<DateTime> current_commencementDates = [];
  DateTime current_dateModificationController = DateTime.now();
  DateTime current_wagesEntitled = DateTime.now();

  // DateTime current_wagesEntitleds = DateTime.now();
  // DateTime current_commencementDates = DateTime.now();
  String? str_current_commencementDates;
  bool hasContractorLicense = false;
  String string = '';
  bool status = false;
  int? inspectionId;
  int? SendEmail_inspectionId;
  String? Type;
  bool isFromOffline = false;
  int? dbID;
  List<CameraDescription> cameras = [];
  String ImageName = "";
  String DocumentPrincipal = "";
  String FileUploadNames = "";
  File? selectedImage;
  File? selecteDocumentPrincipal;
  File? capturedImage;
  File? selectedDocument;
  File? selectedFileUploads;
  List<File> selectedImages = [];

  // Variable for showing multiple file
  List<File?> files = [];
  List<File> selectedDocImages = [];
  List<File> selectedFileUploadsList = [];
  List<String> selectedFileUploadNames = [];
  List<String> selectedImageNames = [];
  List<String> selectedDocNames = [];
  final picker = ImagePicker();

  final Connectivity _connectivityV2 = Connectivity();
  late StreamSubscription<ConnectivityResult> _connectivitySubscriptionV2;

  Future<void> _openCameraForOfflineMode(String variableName, int index) async {
    cameras = await availableCameras();
    final XFile? image = await ImagePicker().pickImage(source: ImageSource.camera, imageQuality: 25);
    if (image != null) {
      setState(() {
        if (variableName == 'FileUploads') {
          final fPath = image.path;
          // contractorImages[index].DocumentPath = fPath;
          _ListHolderContractoreDetailsModel[index].image_name = fPath;
        } else if (variableName == 'Worker1_8') {
          final fPath = image.path;
          _ListHolderWorkInformationModel[index].file_name = fPath;
        }
      });
    }
  }

  Future<void> printImageSize(XFile pickedImage) async {
    // Create a File object
    File imageFile = File(pickedImage.path);

    // Get the file size in bytes
    int fileSizeBytes = imageFile.lengthSync();

    // Convert bytes to kilobytes and megabytes
    double fileSizeKB = fileSizeBytes / 1024;
    double fileSizeMB = fileSizeKB / 1024;

    // Print the file size
    print('File Size: ${fileSizeKB.toStringAsFixed(2)} KB');
    print('File Size: ${fileSizeMB.toStringAsFixed(2)} MB');
  }

  Future<void> _openCamera(String variableName, [int? index]) async {
    cameras = await availableCameras();
    final XFile? image = await ImagePicker().pickImage(source: ImageSource.camera, imageQuality: 25);
    // Create a File object
    if (image != null) {
      // Print the size of the picked image
      await printImageSize(image);
    }

    if (image != null) {
      setState(() {
        if (variableName == 'LicenseProofDoc') {
          fileLicenseProof = File(image.path);
          filePathLicense = image.name;
          if (isAppOnline) {
            uploadDocument(fileLicenseProof!, variableName);
            print("filePathLicense --- $filePathLicense");
          }
        } else if (variableName == 'RegProofDoc') {
          fileRegProof = File(image.path);
          filePathReg = image.name;
          if (isAppOnline) {
            uploadDocument(fileRegProof!, variableName);
            print("filePathReg --- $filePathReg");
          }
        } else if (variableName == 'FileUpload') {
          fileUploadContractor = File(image.path);
          filePath = image.name;
          print("filePath --- $filePath");
          uploadDocument(fileUploadContractor!, variableName);
        } else if (variableName == 'EstImage') {
          if (!isAppOnline) {
            filePathEstImageList.add(image.path);
          } else {
            fileEstImg = File(image.path);
            filePathEstImage = getEstImageName(image.name, 0);
            selectedImageNames.add(filePathEstImage!);
            uploadDocument(fileEstImg!, variableName, newFileName: filePathEstImage);
          }
        } else if (variableName == 'EstDocument') {
          if (!isAppOnline) {
            filePathEstDocList.add(image.path);
          } else {
            fileEstDoc = File(image.path);
            filePathEstDoc = getEstDocName(image.name, 0);
            selectedDocNames.add(filePathEstDoc!);
            uploadDocument(fileEstDoc!, variableName, newFileName: filePathEstDoc);
          }
        } else if (variableName == 'Worker1_8') {
          print("00000000" + variableName);
          final selectedImage = File(image.path);
          ImageName = image.name;
          if (index != null) {
            uploadDocument(selectedImage, variableName, index: index);
          } else {
            uploadDocument(selectedImage, variableName);
          }
        } else if (variableName == 'Principal_4') {
          selecteDocumentPrincipal = File(image.path);
          DocumentPrincipal = image.name;
          if (!isAppOnline) {
            IsextraworkDoc = image.path;
          } else {
            uploadDocument(selecteDocumentPrincipal!, variableName);
          }
        } else if (variableName == 'FileUploads') {
          selectedFileUploads = File(image.path);
          FileUploadNames = image.name;
          selectedFileUploadNames.add(FileUploadNames);
          print("selectedFileUploadNames---- $selectedFileUploadNames");
          if (index != null) {
            uploadDocument(selectedFileUploads!, variableName, index: index);
          } else {
            uploadDocument(selectedFileUploads!, variableName);
          }
        }
      });
    }
  }

  String getEstImageName(String imgName, int index) {
    String fileExtension = imgName.split('.').last;
    String formattedDateTime = DateFormat('yyyyMMdd_HHmm').format(DateTime.now());
    String? filename = 'OnsitePicture_$formattedDateTime' + '_${index}_' + '${inspectionId}' + '.${fileExtension}';
    return filename;
  }

  String getEstDocName(String docName, int index) {
    String fileExtension = docName.split('.').last;
    String formattedDateTime = DateFormat('yyyyMMdd_HHmm').format(DateTime.now());
    String? fName = 'OnsiteDocument_$formattedDateTime' + '_${index}_' + '${inspectionId}' + '.${fileExtension}';
    return fName;
  }

  Future getImages(String variableName) async {
    final pickedFile = await picker.pickMultiImage(imageQuality: 25, maxHeight: 500, maxWidth: 500);
    List<XFile> xfilePick = pickedFile;

    setState(
      () {
        if (xfilePick.isNotEmpty) {
          for (var i = 0; i < xfilePick.length; i++) {
            if (variableName == "EstImage") {
              final file = File(xfilePick[i].path);
              if (!isAppOnline) {
                filePathEstImageList.add(file.path);
              } else {
                selectedImages.add(file);
                final fName = getEstImageName(xfilePick[i].name, i);
                selectedImageNames.add(fName);
                uploadDocument(file, variableName, newFileName: fName);
              }
            } else if (variableName == "EstDocument") {
              final fileDoc = File(xfilePick[i].path);
              if (!isAppOnline) {
                filePathEstDocList.add(fileDoc.path);
              } else {
                selectedDocImages.add(fileDoc);
                final fName = getEstDocName(xfilePick[i].name, i);
                selectedDocNames.add(fName);
                uploadDocument(fileDoc, variableName, newFileName: fName);
              }
            }
          }
        } else {
          AppUtils.showSnackBar(context, "Nothing is selected");
        }
      },
    );
  }

  Future<void> _openGalleryForOfflineMode(String variableName, int index) async {
    final XFile? image = await ImagePicker().pickImage(source: ImageSource.gallery, imageQuality: 25);
    if (image != null) {
      setState(() {
        if (variableName == 'FileUploads') {
          final fPath = image.path;
          // contractorImages[index].DocumentPath = fPath;
          _ListHolderContractoreDetailsModel[index].image_name = fPath;
        } else if (variableName == "Worker1_8") {
          final fPath = image.path;
          _ListHolderWorkInformationModel[index].file_name = fPath;
        }
      });
    }
  }

  Future<void> _openGallery(String variableName, [int? index]) async {
    final XFile? image = await ImagePicker().pickImage(source: ImageSource.gallery, imageQuality: 25);
    if (image != null) {
      setState(() {
        if (variableName == 'LicenseProofDoc') {
          fileLicenseProof = File(image.path);
          filePathLicense = image.name;
          if (isAppOnline) {
            uploadDocument(fileLicenseProof!, variableName);
            print("filePathLicense --- $filePathLicense");
          }
        } else if (variableName == 'RegProofDoc') {
          fileRegProof = File(image.path);
          filePathReg = image.name;
          if (isAppOnline) {
            uploadDocument(fileRegProof!, variableName);
            print("filePathReg --- $filePathReg");
          }
        } else if (variableName == 'FileUpload') {
          fileUploadContractor = File(image.path);
          filePath = image.name;
          print("filePath --- $filePath");
          uploadDocument(fileUploadContractor!, variableName);
        } else if (variableName == 'Worker1_8') {
          final selectedImage = File(image.path);
          ImageName = image.name;

          if (index != null) {
            uploadDocument(selectedImage, variableName, index: index);
          } else {
            uploadDocument(selectedImage!, variableName);
          }
        } else if (variableName == 'Principal_4') {
          selecteDocumentPrincipal = File(image.path);
          DocumentPrincipal = image.name;
          if (!isAppOnline) {
            IsextraworkDoc = image.path;
          } else {
            uploadDocument(selecteDocumentPrincipal!, variableName);
          }
        } else if (variableName == 'FileUploads') {
          // selectedFileUploads = File(image.path);
          final newFile = File(image.path);
          FileUploadNames = image.name;
          selectedFileUploadNames.add(FileUploadNames);
          if (index != null) {
            // uploadDocument(selectedFileUploads!, variableName, index: index);
            uploadDocument(newFile, variableName, index: index);
          } else {
            uploadDocument(newFile, variableName);
          }
        }
      });
    }
  }

  Future<void> setPermission() async {
    DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();
    if (Platform.isAndroid) {
      AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;
      print('Running on ${androidInfo.model}'); // e.g. "Moto G (4)"
      final status = await Permission.storage.status;
      if (androidInfo.version.sdkInt < 33) {
        if (status == PermissionStatus.granted) {
          print("granted");
          setState(() {
            permissionGranted = true;
          });
        } else if (status == PermissionStatus.permanentlyDenied) {
          await openAppSettings();
        } else {
          print("else");
        }
      } else {
        if (status == PermissionStatus.granted) {
          setState(() {
            permissionGranted = true;
          });
        } else if (status == PermissionStatus.permanentlyDenied) {
          await openAppSettings();
        } else if (status == PermissionStatus.denied) {
          setState(() {
            permissionGranted = false;
          });
        }
      }
    } else {
      IosDeviceInfo iosInfo = await deviceInfo.iosInfo;
      print('Running on ${iosInfo.utsname.machine}'); // e.g. "iPod7,1"
      final status = await Permission.storage.status;
      if (status == PermissionStatus.granted) {
        if (!mounted) return;
        setState(() {
          permissionGranted = true;
        });
      } else if (status == PermissionStatus.permanentlyDenied) {
        await openAppSettings();
      } else if (status == PermissionStatus.denied) {
        if (!mounted) return;
        setState(() {
          permissionGranted = false;
        });
      }
    }

    // if (android.version.sdkInt < 33) {
    //   if (await Permission.storage.request().isGranted) {
    //     print("granted");
    //     setState(() {
    //       permissionGranted = true;
    //     });
    //   } else if (await Permission.storage.request().isPermanentlyDenied) {
    //     await openAppSettings();
    //   } else {
    //     print("else");
    //   }
    // }
    // else {
    //   if (await Permission.photos.request().isGranted) {
    //     setState(() {
    //       permissionGranted = true;
    //     });
    //   } else if (await Permission.photos.request().isPermanentlyDenied) {
    //     await openAppSettings();
    //   } else if (await Permission.photos.request().isDenied) {
    //     setState(() {
    //       permissionGranted = false;
    //     });
    //   }
    // }
  }

  // Future<void> downloadFile(String fileName, String cID) async {
  //   // Map<Permission, PermissionStatus> statuses = await [
  //   //   Permission.storage,
  //   //   //add more permission to request here.
  //   // ].request();
  //
  //   if (permissionGranted) {
  //     final _downloadsDirectory = await getApplicationDocumentsDirectory();
  //     // var dir = await DownloadsPathProvider.downloadsDirectory;
  //     var dir = _downloadsDirectory;
  //     if (dir != null) {
  //       String savename = "file.pdf";
  //       String savePath = dir.path + "/$fileName";
  //       print(savePath);
  //       //output:  /storage/emulated/0/Download/banner.png
  //       String url = 'https://col.devitsandbox.com/Minspection/DownloadFile/?id=${cID}&filename=${fileName}';
  //
  //       CircularLoader().show(context);
  //
  //       try {
  //         await Dio().download(url, savePath, onReceiveProgress: (received, total) {
  //           if (total != -1) {
  //             print((received / total * 100).toStringAsFixed(0) + "%");
  //             //you can build progressbar feature too
  //           }
  //         });
  //         print("File is saved to download folder.");
  //         NotificationService.showNotification(fileName, false);
  //         setState(() {
  //           CircularLoader().hide(context);
  //         });
  //       } on DioError catch (e) {
  //         print(e.message);
  //         NotificationService.showNotification(fileName, true);
  //         setState(() {
  //           CircularLoader().hide(context);
  //         });
  //       }
  //     }
  //   } else {
  //     print("No permission to read and write.");
  //     setPermission();
  //   }
  // }

  Future<String> downloadFile(String fileName, String cID) async {
    String url = 'https://col.devitsandbox.com/Minspection/DownloadFile/?id=${cID}&filename=${fileName}';
    _permissionReady = await _checkPermission();
    var mPath = '/storage/emulated/0/Documents/COL';
    if (Platform.isIOS) {
      Directory? path = await getApplicationDocumentsDirectory();
      if (path.existsSync() ?? false) {
        mPath = path.path ?? '';
      }
    }
    // mPath.logValue();
    final Directory directory = Directory(mPath);
    if (!directory.existsSync()) {
      directory.create(recursive: true);
    }
    CircularLoader().show(context);
    final saveFilePath = '${url.split('filename=').last}';
    HttpClient httpClient = HttpClient();
    var request = await httpClient.getUrl(Uri.parse(url ?? ''));
    var response = await request.close();
    File? newFile;
    if (response.statusCode == 200) {
      var bytes = await consolidateHttpClientResponseBytes(response);

      newFile = File('$mPath/${url.split('filename=').last}');
      if (!newFile.existsSync()) {
        newFile.createSync();
      }
      newFile.writeAsBytes(bytes);
    }
    print("File is saved to download folder.");
    NotificationService.showNotification(saveFilePath, false);
    setState(() {
      CircularLoader().hide(context);
    });
    return saveFilePath;
  }

  Future<bool> _checkPermission() async {
    if (Platform.isAndroid) {
      final status = await Permission.storage.status;
      if (status != PermissionStatus.granted) {
        final result = await Permission.storage.request();
        if (result == PermissionStatus.granted) {
          return Future.value(true);
        }
      } else {
        return Future.value(true);
      }
    } else if (Platform.isIOS) {
      final status = await Permission.storage.status;
      if (status != PermissionStatus.granted) {
        final result = await Permission.storage.request();
        if (result == PermissionStatus.granted) {
          return Future.value(true);
        }
      } else {
        return Future.value(true);
      }
    } else {
      return Future.value(true);
    }
    return Future.value(false);
  }

  Future<void> _openDocumentForOfflineMode(String variableName, int index) async {
    final result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['pdf', 'doc', 'docx'],
    );

    if (result != null) {
      setState(() {
        if (variableName == 'FileUploads') {
          final fPath = result.files.single.path ?? '';
          // contractorImages[index].DocumentPath = fPath;
          _ListHolderContractoreDetailsModel[index].image_name = fPath;
        } else if (variableName == 'Worker1_8') {
          final fPath = result.files.single.path ?? '';
          _ListHolderWorkInformationModel[index].file_name = fPath;
        }
      });
    }
  }

  Future<void> _openDocumentPicker(String variableName, [int? index]) async {
    final result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['pdf', 'doc', 'docx'],
    );

    if (result != null) {
      setState(() {
        if (variableName == 'LicenseProofDoc') {
          fileLicenseProof = File(result.files.single.path ?? '');
          filePathLicense = result.files.single.name ?? '';
          if (isAppOnline) {
            uploadDocument(fileLicenseProof!, variableName);
            print("filePathLicense --- $filePathLicense");
          }
        } else if (variableName == 'RegProofDoc') {
          fileRegProof = File(result.files.single.path ?? '');
          if (isAppOnline) {
            uploadDocument(fileRegProof!, variableName);
          }
        } else if (variableName == 'FileUpload') {
          fileUploadContractor = File(result.files.single.path ?? '');
          filePath = result.files.single.name ?? '';
          uploadDocument(fileUploadContractor!, variableName);
        } else if (variableName == 'Worker1_8') {
          final selectedImage = File(result.files.single.path ?? '');
          ImageName = result.files.single.name ?? '';

          if (index != null) {
            uploadDocument(selectedImage, variableName, index: index);
          } else {
            uploadDocument(selectedImage!, variableName);
          }
        } else if (variableName == 'Principal_4') {
          selecteDocumentPrincipal = File(result.files.single.path ?? '');
          DocumentPrincipal = result.files.single.name ?? '';

          if (!isAppOnline) {
            IsextraworkDoc = result.files.single.path ?? '';
          } else {
            uploadDocument(selecteDocumentPrincipal!, variableName);
          }
        } else if (variableName == 'FileUploads') {
          // selectedFileUploadNames.add(FileUploadNames);
          final newFile = File(result.files.single.path ?? '');
          print("selectedFileUploadNames---- $selectedFileUploadNames");
          if (index != null) {
            // uploadDocument(selectedFileUploads!, variableName, index: index);
            uploadDocument(newFile, variableName, index: index);
          } else {
            uploadDocument(newFile, variableName);
          }
        }
      });
    }
  }

  Future<void> getMultipleFile(String variableName) async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      allowMultiple: true,
      type: FileType.custom,
      allowedExtensions: ['pdf', 'doc', 'docx'],
    );

    if (result != null) {
      // Iterate through selected files and extract their names
      for (var i = 0; i < result.files.length; i++) {
        final file = result.files[i];
        String fileName = getEstDocName(file.name, i);
        selectedDocNames.add(fileName);
        String filePath = file.path ?? '';
        if (!isAppOnline) {
          filePathEstDocList.add(file.path ?? '');
        } else {
          File fileObject = File(filePath);
          selectedDocImages.add(fileObject);
          await uploadDocument(fileObject, variableName, newFileName: fileName);
        }
      }
      // for (var file in result.files) {
      //   String fileName = getEstDocName(file.name, index);
      //   selectedDocNames.add(fileName);
      //   String filePath = file.path ?? '';

      //   // Create a File object from the file path and add it to the list
      //   File fileObject = File(filePath);
      //   selectedDocImages.add(fileObject);
      //   uploadDocument(fileObject, variableName);
      // }

      if (selectedDocNames.isNotEmpty) {
        docListStream.add(selectedDocNames); // Assuming docListStream is a stream controller.
        setState(() {});
      }
    } else {
      // User canceled the picker and didn't select at least 1 file from the device

      AppUtils.showSnackBar(context, "Please select at least 1 file");
    }
  }

  Future<void> _updateConnectionStatusV2(ConnectivityResult result) async {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (result == ConnectivityResult.none) {
        isAppOnline = false;
      } else {
        isAppOnline = true;
      }
      print("----isAppOnline: $isAppOnline");
    });
  }

  @override
  void initState() {
    //print("KK";)
    Phone_regExp = new RegExp(Phone_patttern);
    _formKey = GlobalKey<FormState>();
    _form1_6Key = GlobalKey<FormState>();
    _form1_8Key = GlobalKey<FormState>();
    _form2_1Key = GlobalKey<FormState>();
    _form2_2Key = GlobalKey<FormState>();
    _form4_1_4Key = GlobalKey<FormState>();
    _form4_2_5Key = GlobalKey<FormState>();
    _form5_4Key = GlobalKey<FormState>();
    _form6Key = GlobalKey<FormState>();
    _form7_3Key = GlobalKey<FormState>();
    _form7_4Key = GlobalKey<FormState>();
    _form7_5Key = GlobalKey<FormState>();
    _form8_3Key = GlobalKey<FormState>();
    _form11_1Key = GlobalKey<FormState>();
    _formEmployeeKey = GlobalKey<FormState>();
    _formContractorKey = GlobalKey<FormState>();

    _focusNode = FocusNode();
    inspectionId = widget.inspectionID;
    userID = widget.userID;
    Type = widget.opration;
    isFromOffline = widget.isFromOffline;
    dbID = widget.dbID ?? 0;
    setPermission();
    initAsync();

    _connectivitySubscriptionV2 = _connectivityV2.onConnectivityChanged.listen(_updateConnectionStatusV2);

    _textFormFieldFocusNode12.addListener(() {
      if (!_textFormFieldFocusNode12.hasFocus) {
        updateEmails();
      }
    });
    super.initState();
  }

  @override
  void dispose() {
    _focusNode.dispose();
    _textFormFieldFocusNode1.dispose();
    _dropDownFocusNode1.dispose();
    _dropDownFocusNode2.dispose();
    _dropDownFocusNode3.dispose();
    _dropDownFocusNode4.dispose();
    _dropDownFocusNode5.dispose();
    _dropDownFocusNode6.dispose();
    _textFormFieldFocusNode2.dispose();
    _textFormFieldFocusNodeName.dispose();
    _textFormFieldFocusNode3.dispose();
    _textFormFieldFocusNode4.dispose();
    _textFormFieldFocusNode5.dispose();
    _textFormFieldFocusNode6.dispose();
    _textFormFieldFocusNode7.dispose();
    _textFormFieldFocusNode8.dispose();
    _textFormFieldFocusNode9.dispose();
    _textFormFieldFocusNode10.dispose();
    _textFormFieldFocusNode11.dispose();
    _textFormFieldFocusNode12.dispose();
    _textFormFieldFocusNode13.dispose();
    _textFormFieldFocusNode14.dispose();
    _textFormFieldFocusNode15.dispose();
    _textFormFieldFocusNode16.dispose();
    _textFormFieldFocusNode17.dispose();
    _textFormFieldFocusNode18.dispose();
    _textFormFieldFocusNode19.dispose();
    _textFormFieldFocusNode20.dispose();
    _textFormFieldFocusNode21.dispose();
    _textFormFieldFocusNodeOther.dispose();
    _connectivitySubscriptionV2.cancel();
    super.dispose();
  }

  void updateTotal() {
    int num1 = int.tryParse(_maleWorkerController.text) ?? 0;
    int num2 = int.tryParse(_femaleWorkerController.text) ?? 0;
    int num3 = int.tryParse(_transgenderWorkerController.text) ?? 0;

    int total = num1 + num2 + num3;
    _totalWorkerController.text = total.toString();
  }

  void updateContracotrTotal() {
    int num1 = int.tryParse(_contractorMaleWorkerController.text) ?? 0;
    int num2 = int.tryParse(_contractorFeMaleWorkerController.text) ?? 0;
    int num3 = int.tryParse(_contractorTransgenderWorkerController.text) ?? 0;

    int total = num1 + num2 + num3;
    _contractorTotalWorkerController.text = total.toString();
  }

  void updateDiffrenceAmount() {
    int num1 = int.tryParse(_Act1_8wagePayableController.text) ?? 0;
    int num2 = int.tryParse(_Act1_8wagePaidController.text) ?? 0;

    int total = num1 - num2;
    _Act1_8differenceWageAmountController.text = total.toString();
  }

  void _calculateTotal() {
    for (int index = 0; index < contractorWidgets.length; index++) {
      TextEditingController maleController = _contractorMaleWorkerControllers[index];
      TextEditingController femaleController = _contractorFeMaleWorkerControllers[index];
      TextEditingController transgenderController = _contractorTransgenderWorkerControllers[index];
      TextEditingController totalController = _contractorTotalWorkerControllers[index];

      int maleWorkerCount = int.tryParse(maleController.text) ?? 0;
      int femaleWorkerCount = int.tryParse(femaleController.text) ?? 0;
      int transgenderWorkerCount = int.tryParse(transgenderController.text) ?? 0;

      int totalWorkerCount = maleWorkerCount + femaleWorkerCount + transgenderWorkerCount;
      totalController.text = totalWorkerCount.toString();
    }
  }

  void _calculateAct1_8Total() {
    for (int index = 0; index < _ListHolderWorkInformationModel.length; index++) {
      TextEditingController wagePayableController = _ListWorkersWagesPayableEditingController[index];
      TextEditingController wagePaidController = _ListWorkersWagesPaidEditingController[index];
      TextEditingController amountController = _ListWorkersDiffrenceWagesAmountEditingController[index];

      int wagePayableCount = int.tryParse(wagePayableController.text) ?? 0;
      int wagePaidCount = int.tryParse(wagePaidController.text) ?? 0;

      int amountCount = wagePayableCount - wagePaidCount;
      amountController.text = amountCount.toString();
    }
  }

  BehaviorSubject<bool> isLoadingStream = BehaviorSubject<bool>.seeded(false);
  BehaviorSubject<List<String>> imageListStream = BehaviorSubject<List<String>>();
  BehaviorSubject<List<String>> docListStream = BehaviorSubject<List<String>>();

  void initAsync() async {
    print("Initializing data...");
    isAppOnline = await checkConnectivity();
    if (isFromOffline) {
      // String formDate = DateFormat("dd-MM-yyyy").format(currentDate);
      // _inspectionDateController.text = formDate;
      // _reportNoController.text = generateReportNumber();
      // _reportNoController.text = "22092023/120018/2340";
      isLoadingStream.add(true);
      await getDropDown();
      //   await getDisctict();
      offlineSetUpData();
    } else if (Type == "add") {
      print("Initializing for adding...");
      String formDate = DateFormat("dd-MM-yyyy").format(currentDate);
      _inspectionDateController.text = formDate;
      _reportNoController.text = generateReportNumber();
      // _reportNoController.text = "22092023/120018/2340";
      await getDropDown();
      await getDisctict();
    } else if (Type == "view" || Type == "edit") {
      isLoadingStream.add(true);
      print("Initializing for $Type...$inspectionId");
      if (inspectionId != 0) {
        authKey();
        await InspectionRecordDetails(userID, inspectionId);
      }
      await getDropDown();
      await getDisctict();
      if (inspectionId != 0) {
        await setUpData();
      }
    }

    print("Data initialization complete.");

    // Once data is loaded, call setState to update the UI
    setState(() {});
  }

  String generateReportNumber() {
    DateTime now = DateTime.now();
    String formattedDate = "${now.day.toString().padLeft(2, '0')}"
        "${now.month.toString().padLeft(2, '0')}"
        "${now.year.toString()}/${now.hour.toString().padLeft(2, '0')}"
        "${now.minute.toString().padLeft(2, '0')}"
        "${now.second.toString().padLeft(2, '0')}";

    Random random = Random();
    int randomValue = random.nextInt(10000);

    String v_ReportNo = "$formattedDate/$randomValue";
    return v_ReportNo;
  }

  Future<void> _selectRegDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: currentRegDate,
      firstDate: DateTime(1900),
      // Set a very distant past date
      lastDate: DateTime.now(),
      // Set a very distant future date
      initialDatePickerMode: DatePickerMode.day,
    );
    if (pickedDate != null && pickedDate != currentRegDate) {
      setState(() {
        currentRegDate = pickedDate;
        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
        _registrationDateController.text = formDate;
      });
    }
  }

  Future<void> _select_dateOfComplain(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: currentDateOfComplain,
      firstDate: DateTime(1900),
      // Set a very distant past date
      lastDate: DateTime.now(),
      initialDatePickerMode: DatePickerMode.day,
    );
    if (pickedDate != null && pickedDate != currentDateOfComplain) {
      setState(() {
        currentDateOfComplain = pickedDate;
        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
        _dateOfComplain.text = formDate;
      });
    }
  }

  Future<void> _select_commencementDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: current_commencementDate,
      firstDate: DateTime(1900),
      // Set a very distant past date
      lastDate: DateTime(2100),
      // Set a very distant future date
      initialDatePickerMode: DatePickerMode.day,
    );
    if (pickedDate != null && pickedDate != current_commencementDate) {
      setState(() {
        current_commencementDate = pickedDate;
        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
        _commencementDateController.text = formDate;
        _completionDateController.text = _commencementDateController.text;
        str_current_commencementDates = formDate;
      });
    }
  }

  Future<void> _select_completionDate(BuildContext context) async {
    DateTime? commencementDate = current_commencementDate; // Use current date if commencement date is null
    DateTime initialCompletionDate = current_completionDate; // Use commencement date as initial completion date if it's available

    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: initialCompletionDate,
      firstDate: commencementDate,
      lastDate: DateTime(2100),
      // Set a very distant future date
      initialDatePickerMode: DatePickerMode.day,
    );

    if (pickedDate != null && pickedDate != current_completionDate) {
      setState(() {
        current_completionDate = pickedDate;
        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
        _completionDateController.text = formDate;
        str_current_commencementDates = formDate;
      });
    }
  }

  Future<void> _select_dateModificationController(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: current_dateModificationController,
      firstDate: DateTime(1900),
      // Set a very distant past date
      lastDate: DateTime(2100),
      // Set a very distant future date
      initialDatePickerMode: DatePickerMode.day,
    );
    if (pickedDate != null && pickedDate != current_dateModificationController) {
      setState(() {
        current_dateModificationController = pickedDate;
        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
        dateModificationController.text = formDate;
      });
    }
  }

  Future<void> _select_wagesEntitledDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: current_wagesEntitled,
      firstDate: DateTime(1900),
      // Set a very distant past date
      lastDate: DateTime.now(),
      // Set a very distant future date
      initialDatePickerMode: DatePickerMode.day,
    );
    if (pickedDate != null && pickedDate != current_wagesEntitled) {
      setState(() {
        current_wagesEntitled = pickedDate;
        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
        _Act1_8wageEntitledController.text = formDate;
      });
    }
  }

  Future<void> _select_DateSuspension(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: current_suspensionDate,
      firstDate: DateTime(1900),
      // Set a very distant past date
      lastDate: DateTime.now(),
      // Set a very distant future date
      initialDatePickerMode: DatePickerMode.day,
    );
    if (pickedDate != null && pickedDate != current_suspensionDate) {
      setState(() {
        current_suspensionDate = pickedDate;
        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
        _Act8_3DateSuspensionController.text = formDate;
      });
    }
  }

  Future<void> getDisctict() async {
    LoginResponse? LoginData = await _preferences.getUserProfile();
    selectedDistrict = LoginData?.districtID;
    authKey();
    GetEstablishTalukaList(selectedDistrict);
    print("selectedDistrict--- $selectedDistrict");
  }

  Future<void> getDropDown() async {
    String? DropDownData = await _preferences.getInspectionDetails();
    print(DropDownData);
    // Convert string to JSON
    Map<String, dynamic> json = jsonDecode(DropDownData!);
    List _inspectionList = json['_inspectionList'];
    _inspectorName.text = _inspectionList[0]["InspectorName"];
    _inspectorEmail.text = _inspectionList[0]["InspectorEmail"];
    //  _reportNoController.text = _inspectionList[0]["ReportNo"];

    List reportDist = _inspectionList[0]["Districtlist"];
    print("reportDist: - $reportDist");
    ReportDistrictList = reportDist.map((json) => DropDownResponseModel.fromJson(json)).toList();

    EstablishTalukaList = await _preferences.getTalukaList() ?? [];

    List<dynamic> EstList = json['EstablishmenttypeList'];
    EstablishList = EstList.map((json) => DropDownResponseModel.fromJson(json)).toList();

    List _inspectionEstablishmentsDetailsList = json['_inspectionEstablishmentsDetailsList'];
    List EstType = _inspectionEstablishmentsDetailsList[0]["EstablishmentDetailstypeList"];
    EstablishTypeList = EstType.map((json) => DropDownResponseModel.fromJson(json)).toList();

    List EstDistrict = _inspectionEstablishmentsDetailsList[0]["Districtlist"];
    EstablishDistrictList = EstDistrict.map((json) => DropDownResponseModel.fromJson(json)).toList();

    List TypeOfIndustry = _inspectionEstablishmentsDetailsList[0]["TypeOfBusinessTradeList"];
    EstablishTypeOfIndustryList = TypeOfIndustry.map((json) => DropDownResponseModel.fromJson(json)).toList();

    List _inspectionEstablishmentsEmployeeDetailsList = json['_inspectionEstablishmentEmployeeDetailsList'];
    List DesignationList = _inspectionEstablishmentsEmployeeDetailsList[0]["DesignationList"];
    EmpDesignationList = DesignationList.map((json) => DropDownResponseModel.fromJson(json)).toList();

    List _inspectionEstablishmentContractorDetailsList = json['_inspectionEstablishmentContractorDetailsList'];
    List YesNoList = _inspectionEstablishmentContractorDetailsList[0]["YesNoList"];
    AllYesNoList = YesNoList.map((json) => DropDownResponseModel.fromJson(json)).toList();
    if (AllYesNoList.isNotEmpty && selectedNonCompliance == null) {
      selectedNonCompliance = AllYesNoList.first.DataValue;
    }
    if (AllYesNoList.isNotEmpty && selectedAuthSign == null) {
      selectedAuthSign = AllYesNoList[1].DataValue;
    }

    List StiplatedTimeLimitList = json['StiplatedTimeLimitList'];
    print("StiplatedTimeLimitList:- $StiplatedTimeLimitList");
    OtherStiplatedTimeLimitList = StiplatedTimeLimitList.map((json) => DropDownResponseModel.fromJson(json)).toList();
    if (OtherStiplatedTimeLimitList.isNotEmpty) {
      selectedTimeLimit = OtherStiplatedTimeLimitList[1].DataValue;
    }

    List ReportingAuthLimitList = _inspectionList[0]['InspectionaclList'];
    print("ReportingAuthLimitList:- $ReportingAuthLimitList");
    ReportAuthorityList = ReportingAuthLimitList.map((json) => DropDownResponseModel.fromJson(json)).toList();

    List DailyMonthList = _inspectionList[0]['dailymonthly'];
    print("DailyMonthlyList:- $DailyMonthList");
    DailyMonthlyList = DailyMonthList.map((json) => DropDownResponseModel.fromJson(json)).toList();

    List WagesList = _inspectionList[0]['WagestoPaid'];
    print("DailyMonthlyList:- $WagesList");
    WagestoPaidList = WagesList.map((json) => DropDownResponseModel.fromJson(json)).toList();
  }

  void dismissKeyboard() {
    FocusManager.instance.primaryFocus?.unfocus();
  }

  @override
  Widget build(BuildContext context) {
    var appLanguage = Provider.of<AppLanguage>(context);
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: WillPopScope(
        onWillPop: () async {
          Navigator.of(context).pop(true);
          return true; // Allow navigation
        },
        child: GestureDetector(
          onTap: () {
            FocusManager.instance.primaryFocus?.unfocus();
          },
          child: Scaffold(
            resizeToAvoidBottomInset: false,
            appBar: AppBar(
              leading: BackButton(onPressed: () {
                Navigator.pop(context);
              }),
              title: Text(translate('inspection_application')),
              centerTitle: false,
              backgroundColor: AppStyles.primary500Color,
            ),
            body: SingleChildScrollView(
              controller: _scrollController,
              child: Padding(
                padding: EdgeInsets.all(AppConstants.DEFAULT_CONTAINER_PADDING),
                child: Form(
                  key: _formKey,
                  child: StreamBuilder<bool>(
                    stream: isLoadingStream,
                    builder: (context, snapshot) {
                      return snapshot.data == true
                          ? Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                SizedBox(
                                  height: 80,
                                ),
                                Center(child: CircularProgressIndicator()),
                              ],
                            )
                          : Column(
                              children: [
                                _buildReportInfo(),
                                _buildInspectionType(),
                                _buildEstablishment(),
                                _buildEmployerDetails(context),
                                _dynamicContracter(context),
                                _buildActs(context, appLanguage),
                                _buildOtherInfo(),
                                _buildMapView(),
                                const SizedBox(
                                  height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                ),
                              ],
                            );
                    },
                  ),
                ),
              ),
            ),
            bottomNavigationBar: Type == "view"
                ? null
                : Padding(
                    padding: const EdgeInsets.only(bottom: AppConstants.DEFAULT_CONTAINER_PADDING),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        AppCustomButton(
                          loaderColor: AppStyles.naturalWhiteColor,
                          width: 150,
                          height: 44,
                          background: AppStyles.primary500Color,
                          text: translate('save'),
                          textColor: AppStyles.white,
                          fontWeight: FontWeight.normal,
                          fontSize: 14,
                          onClicked: () async {
                            IsSubmit = false;
                            convertXMLINspectionOneSite();
                            // EmailXMLConvert();
                            // if (!_formEmployeeKey.currentState!.validate()) {
                            //   for (int i = 0; i < employerWidgets.length; i++) {
                            //     if ((!(AppUtils.checkRequired(employerNameControllers[i].text))) ||
                            //         (!(AppUtils.checkRequired(empPermanentAddressControllers[i].text))) ||
                            //         (empDesignation[i] == null) ||
                            //         (empDesignation[i] != null &&
                            //             !(AppUtils.checkRequired(otherNoteControllers[i].text)))) {
                            //       _scrollToKeyWidget(employerGlobalKeys[i]);
                            //       break;
                            //     }
                            //   }
                            // } else
                            if (isContractor == true && !_formContractorKey.currentState!.validate()) {
                              for (int i = 0; i < _ListHolderContractoreDetailsModel.length; i++) {
                                if ((!(AppUtils.checkRequired(_ListCompanyNameTextEditingController[i].text))) ||
                                    (!(AppUtils.checkRequired(_ListOwnerNameTextEditingController[i].text))) ||
                                    (!(AppUtils.checkRequired(_ListJobTypeTextEditingController[i].text)))) {
                                  _scrollToKeyWidget(contractorGlobalKeys[i]);
                                  break;
                                } else if (_ListContractorsHasLicence[i] == 1) {
                                  if (!(AppUtils.checkRequired(_ListCommencemenDateTextEditingController[i].text.toString())) ||
                                      !(AppUtils.checkRequired(_ListCompletionDateTextEditingController[i].text.toString()))) {
                                    _scrollToKeyWidget(contractorGlobalKeys[i]);
                                    break;
                                  }
                                }
                              }
                            } else if (isSwitchedActs1_6 && !_form1_6Key.currentState!.validate()) {
                              for (int i = 0; i < Act1_6Widgets.length; i++) {
                                if (!(AppUtils.checkRequired(_Act1NameControllers[i].text))) {
                                  _scrollToKeyWidget(act1_6GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs1_8 && !_form1_8Key.currentState!.validate()) {
                              for (int i = 0; i < _ListHolderWorkInformationModel.length; i++) {
                                if (_ListWorkersDayMonth[i] == 0 ||
                                    (!AppUtils.checkRequired(_ListWorkersNameTextEditingController[i].text)) ||
                                    (!AppUtils.checkRequired(_ListDesginationEditingController[i].text)) ||
                                    (!AppUtils.checkRequired(_ListWorkersLenghtOfServiceEditingController[i].text)) ||
                                    (!AppUtils.checkRequired(_ListWorkersDailyWorkingHouseEditingController[i].text)) ||
                                    (_ListIsWorkersDay[i] == true && (!AppUtils.checkRequired(_ListWorkerSwagesPaidPerDayEditingController[i].text))) ||
                                    (_ListIsWorkersMonth[i] == true && (!AppUtils.checkRequired(_ListWorkerSwagesPaidPerMonthEditingController[i].text))) ||
                                    (!AppUtils.checkRequired(_ListWorkersWagesEntitledFormDateEditingController[i].text)) ||
                                    (!AppUtils.checkRequired(_ListWorkersWagesPayableEditingController[i].text)) ||
                                    (!AppUtils.checkRequired(_ListWorkersWagesPaidEditingController[i].text)) ||
                                    (!AppUtils.checkRequired(_ListWorkersDiffrenceWagesAmountEditingController[i].text))) {
                                  _scrollToKeyWidget(act1_8GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs2_1 && !_form2_1Key.currentState!.validate()) {
                              for (int i = 0; i < Act2_1Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act2_1FinancialYearControllers[i].text)))) {
                                  _scrollToKeyWidget(act2_1GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs2_2 && !_form2_2Key.currentState!.validate()) {
                              if ((!AppUtils.checkRequired(_Act2_2FinancialYearController.text))) {
                                _scrollToKeyWidget(act2_2_key);
                              } else {
                                for (int i = 0; i < Act2_2Widgets.length; i++) {
                                  if ((!(AppUtils.checkRequired(_Act2_2WorkerNameControllers[i].text)))) {
                                    _scrollToKeyWidget(act2_2GlobalKeys[i]);
                                    break;
                                  }
                                }
                              }
                            } else if (isSwitchedActs4_1_4 && !_form4_1_4Key.currentState!.validate()) {
                              for (int i = 0; i < Act4_1_5Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act4_1_5NameContractorControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act4_1_5NameContractorLabourControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act4_1_5WagesTobePaidControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act4_1_5DifferAmountControllers[i].text))) ||
                                    WagesToPaid[i] == null) {
                                  _scrollToKeyWidget(act4_1_5GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs4_2_5 && !_form4_2_5Key.currentState!.validate()) {
                              if (!AppUtils.checkRequired(_ActS211R65Controller.text)) {
                                _scrollToKeyWidget(act4_2_5key);
                              } else {
                                for (int i = 0; i < Act4_2_5Widgets.length; i++) {
                                  if ((!(AppUtils.checkRequired(_Act4_2_5NameContractorControllers[i].text)))) {
                                    _scrollToKeyWidget(act4_2_5GlobalKeys[i]);
                                    break;
                                  }
                                }
                              }
                            } else if (isSwitchedActs5_4 && !_form5_4Key.currentState!.validate()) {
                              for (int i = 0; i < Act5_4Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act5_4MaleWorkersControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act5_4MDesgControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act5_4MSalaryPaidControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act5_4FemaleWorkersControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act5_4FDesgControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act5_4FSalaryPaidControllers[i].text)))) {
                                  _scrollToKeyWidget(act5_4GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs6 && !_form6Key.currentState!.validate()) {
                              for (int i = 0; i < Act6Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act6NameContractorControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act6AddressControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act6DetailsWorkControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act6TimeSinceControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act6NoWorkersControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act6TotalNoWorkersControllers[i].text)))) {
                                  _scrollToKeyWidget(act6GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs7_2_3 && !_form7_3Key.currentState!.validate()) {
                              for (int i = 0; i < Act7_3Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act7_3NameAdolescentLabourControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act7_3AddressControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act7_3AgeControllers[i].text)))) {
                                  _scrollToKeyWidget(act7_3GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs7_2_4 && !_form7_4Key.currentState!.validate()) {
                              for (int i = 0; i < Act7_2_4Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act7_2_4NameAdolescentLabourControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act7_2_4AddressControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act7_2_4AgeControllers[i].text)))) {
                                  _scrollToKeyWidget(act7_4GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs7_1_3 && !_form7_5Key.currentState!.validate()) {
                              for (int i = 0; i < Act7_1_3Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act7_1_3NameChildLabourControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act7_1_3AddressControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act7_1_3AgeControllers[i].text)))) {
                                  _scrollToKeyWidget(act7_5GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs8_3 && !_form8_3Key.currentState!.validate()) {
                              for (int i = 0; i < Act8_3Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act8_3NameControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act8_3DesgControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act8_3DateSuspensionControllers[i].text)))) {
                                  _scrollToKeyWidget(act8_3GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else if (isSwitchedActs11_1 && !_form11_1Key.currentState!.validate()) {
                              for (int i = 0; i < Act11_1Widgets.length; i++) {
                                if ((!(AppUtils.checkRequired(_Act11_1NameControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act11_1DesgControllers[i].text))) ||
                                    (!(AppUtils.checkRequired(_Act11_1DateAppointmentControllers[i].text)))) {
                                  _scrollToKeyWidget(act11_1GlobalKeys[i]);
                                  break;
                                }
                              }
                            } else {
                              await validateStep4();
                              await validateStep5();
                              await convertXML1_6();
                              await convertXML1_8();
                              await convertXML2_1();
                              await convertXML2_2();
                              await convertXML4_1_5();
                              await convertXML4_2_5();
                              await convertXML5_4();
                              await convertXML6();
                              await convertXML7_3();
                              await convertXML7_2_4();
                              await convertXML7_1_3();
                              await convertXML8_3();
                              await convertXML11_1();
                              final isConnected = await checkConnectivity();
                              if (isConnected) {
                                SingleSave();
                                MainDivACT1WorkerDetailsList.clear();
                                dataList.clear();
                                ContractorList.clear();
                              } else {
                                insertLocalDb();
                                MainDivACT1WorkerDetailsList.clear();
                                dataList.clear();
                                ContractorList.clear();
                              }
                            }
                          },
                        ),
                        Visibility(
                          visible: isAppOnline && !isFromOffline,
                          child: SizedBox(
                            width: 20,
                          ),
                        ),
                        Visibility(
                          visible: isAppOnline && !isFromOffline,
                          child: AppCustomButton(
                            loaderColor: AppStyles.naturalWhiteColor,
                            width: 150,
                            height: 44,
                            background: AppStyles.primary500Color,
                            text: translate('submit'),
                            textColor: AppStyles.white,
                            fontWeight: FontWeight.normal,
                            fontSize: 14,
                            onClicked: () async {
                              var status = await Permission.location.status;

                              setState(() {
                                isSubmitButtonClicked = true;
                              });

                              if (status.isGranted) {
                                // Location permission is granted, proceed with your submit logic
                                final _form = _formKey.currentState!;
                                if (_form.validate() && validateStep7() && validateAuthPersonSignature() && validateInspectorSignature() && validateMap()) {
                                  IsSubmit = true;
                                  // validateStep4();
                                  // validateStep5();
                                  convertXMLINspectionOneSite();
                                  await validateStep4();
                                  await validateStep5();
                                  await convertXML1_6();
                                  await convertXML1_8();
                                  await convertXML2_1();
                                  await convertXML2_2();
                                  await convertXML4_1_5();
                                  await convertXML4_2_5();
                                  await convertXML5_4();
                                  await convertXML6();
                                  await convertXML7_3();
                                  await convertXML7_2_4();
                                  await convertXML7_1_3();
                                  await convertXML8_3();
                                  await convertXML11_1();
                                  EmailXMLConvert();
                                  final isConnected = await checkConnectivity();

                                  if (isConnected) {
                                    SingleSave();
                                    MainDivACT1WorkerDetailsList.clear();
                                    dataList.clear();
                                    ContractorList.clear();
                                  } else {
                                    insertLocalDb();
                                    MainDivACT1WorkerDetailsList.clear();
                                    dataList.clear();
                                    ContractorList.clear();
                                  }
                                } else {
                                  if (dropdownValue == null) {
                                    _scrollToFocusedField(_dropDownFocusNode1);
                                  } else if (isOnline && !AppUtils.checkRequired(_IFSCNoBaseController.text)) {
                                    _scrollToFocusedField(_textFormFieldFocusNode1);
                                  } else if (isComplain && !AppUtils.checkRequired(_IFSCNoBaseController.text)) {
                                    _scrollToFocusedField(_textFormFieldFocusNode2);
                                  } else if (isComplain && !AppUtils.checkRequired(_nameOfComplain.text)) {
                                    _scrollToFocusedField(_textFormFieldFocusNodeName);
                                  } else if (isComplain && !AppUtils.checkRequired(_subjectOfComplain.text)) {
                                    _scrollToFocusedField(_textFormFieldFocusNode3);
                                  } else if (isComplain && !AppUtils.checkRequired(_dateOfComplain.text)) {
                                    _scrollToFocusedField(_textFormFieldFocusNode4);
                                  } else if (!AppUtils.checkRequired(_establishmentNameController.text)) {
                                    _scrollToFocusedField(_textFormFieldFocusNode5);
                                  } else if (!AppUtils.checkRequired(_permanentAddressController.text)) {
                                    _scrollToFocusedField(_textFormFieldFocusNode6);
                                  } else if (selectedDistrict == null) {
                                    _scrollToFocusedField(_dropDownFocusNode2);
                                  } else if (selectedTaluka == null) {
                                    _scrollToFocusedField(_dropDownFocusNode3);
                                  }
                                  // else if (!AppUtils.checkRequired(_est_area_Controller.text)) {
                                  //   _scrollToFocusedField(_textFormFieldFocusNode7);
                                  // }
                                  // else if (_est_pincode_Controller.text.length != 6) {
                                  //   _scrollToFocusedField(_textFormFieldFocusNode8);
                                  // }
                                  else if ((registerUnder == 0 && !AppUtils.checkRequired(_regNo_Controller.text)) ||
                                      ((registerUnder == 1 && !AppUtils.checkRequired(_regNo_Controller.text)) &&
                                          (IsFactoriesAct == true ||
                                              IsEstablishmentAct == true ||
                                              IsLabourAct == true ||
                                              IsRegistrationUnderGST == true ||
                                              IsSocietyAct == true ||
                                              IsTrustAct == true ||
                                              IsTMTWAct1961Grul1965 == true))) {
                                    _scrollToFocusedField(_textFormFieldFocusNode9);
                                  } else if (registerUnder == 1 && !AppUtils.checkRequired(_regUnderNoneOfAboveController.text)) {
                                    _scrollToFocusedField(_textFormFieldFocusNode10);
                                  } else if (selectedIndustory == null) {
                                    _scrollToFocusedField(_dropDownFocusNode4);
                                  } else if (selectedIndustory == 57 && !(AppUtils.checkRequired(_EstOtherController.text))) {
                                    _scrollToFocusedField(_textFormFieldFocusNodeOther);
                                  } else if (!(AppUtils.checkRequired(_authorizedPersonController.text))) {
                                    _scrollToFocusedField(_textFormFieldFocusNode11);
                                  } else if (!(AppUtils.checkRequired(_authorizedPersonEmailController.text)) && emails.isEmpty) {
                                    _scrollToFocusedField(_textFormFieldFocusNode12);
                                  } else if (!(AppUtils.checkRequired(_authorizedPersonNoController.text)) || _authorizedPersonNoController.text.length != 10) {
                                    _scrollToFocusedField(_textFormFieldFocusNode13);
                                  } else if (!(AppUtils.checkRequired(_authorizedPersonDesignController.text))) {
                                    _scrollToFocusedField(_textFormFieldFocusNode14);
                                  } else if (!isMoreEmployerValid() && !_formEmployeeKey.currentState!.validate()) {
                                    for (int i = 0; i < employerWidgets.length; i++) {
                                      if ((!(AppUtils.checkRequired(employerNameControllers[i].text))) ||
                                          (!(AppUtils.checkRequired(empPermanentAddressControllers[i].text))) ||
                                          (empDesignation[i] == null) ||
                                          (empDesignation[i] != null && !(AppUtils.checkRequired(otherNoteControllers[i].text)))) {
                                        _scrollToKeyWidget(employerGlobalKeys[i]);
                                        break;
                                      }
                                    }
                                  } else if (isContractor == true && !_formContractorKey.currentState!.validate()) {
                                    for (int i = 0; i < _ListHolderContractoreDetailsModel.length; i++) {
                                      if ((!(AppUtils.checkRequired(_ListCompanyNameTextEditingController[i].text))) ||
                                          (!(AppUtils.checkRequired(_ListOwnerNameTextEditingController[i].text))) ||
                                          (!(AppUtils.checkRequired(_ListJobTypeTextEditingController[i].text)))) {
                                        _scrollToKeyWidget(contractorGlobalKeys[i]);
                                        break;
                                      } else if (_ListContractorsHasLicence[i] == 1) {
                                        if (!(AppUtils.checkRequired(_ListCommencemenDateTextEditingController[i].text.toString())) ||
                                            !(AppUtils.checkRequired(_ListCompletionDateTextEditingController[i].text.toString()))) {
                                          _scrollToKeyWidget(contractorGlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    }
                                  } else if (isSwitchedActs1 && !isAct1Valid()) {
                                    if (isSwitchedActs1_1 && !AppUtils.checkRequired(_ActSection26dController.text)) {
                                      _scrollToKeyWidget(act1_1_key);
                                    } else if (isSwitchedActs1_5 && !AppUtils.checkRequired(_ActSection214Controller.text)) {
                                      _scrollToKeyWidget(act1_5_key);
                                    } else if (isSwitchedActs1_6 && !isAct1_6Valid() && !_form1_6Key.currentState!.validate()) {
                                      for (int i = 0; i < Act1_6Widgets.length; i++) {
                                        if (!(AppUtils.checkRequired(_Act1NameControllers[i].text))) {
                                          _scrollToKeyWidget(act1_6GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    } else if (isSwitchedActs1_8 && !_form1_8Key.currentState!.validate()) {
                                      for (int i = 0; i < _ListHolderWorkInformationModel.length; i++) {
                                        if (_ListWorkersDayMonth[i] == 0 ||
                                            (!AppUtils.checkRequired(_ListWorkersNameTextEditingController[i].text)) ||
                                            (!AppUtils.checkRequired(_ListDesginationEditingController[i].text)) ||
                                            (!AppUtils.checkRequired(_ListWorkersLenghtOfServiceEditingController[i].text)) ||
                                            (!AppUtils.checkRequired(_ListWorkersDailyWorkingHouseEditingController[i].text)) ||
                                            (_ListIsWorkersDay[i] == true && (!AppUtils.checkRequired(_ListWorkerSwagesPaidPerDayEditingController[i].text))) ||
                                            (_ListIsWorkersMonth[i] == true && (!AppUtils.checkRequired(_ListWorkerSwagesPaidPerMonthEditingController[i].text))) ||
                                            (!AppUtils.checkRequired(_ListWorkersWagesEntitledFormDateEditingController[i].text)) ||
                                            (!AppUtils.checkRequired(_ListWorkersWagesPayableEditingController[i].text)) ||
                                            (!AppUtils.checkRequired(_ListWorkersWagesPaidEditingController[i].text)) ||
                                            (!AppUtils.checkRequired(_ListWorkersDiffrenceWagesAmountEditingController[i].text))) {
                                          _scrollToKeyWidget(act1_8GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    } else if (isSwitchedActs1_13 && (!AppUtils.checkRequired(_ActRule2bYearController.text)) && (!AppUtils.checkRequired(_ActRule2bYear1Controller.text))) {
                                      _scrollToKeyWidget(act1_13_key);
                                    }
                                  } else if (isSwitchedActs2 && !isAct2Valid()) {
                                    if (isSwitchedActs2_1 && !isAct2_1Valid() && !_form2_1Key.currentState!.validate()) {
                                      for (int i = 0; i < Act2_1Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act2_1FinancialYearControllers[i].text)))) {
                                          _scrollToKeyWidget(act2_1GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    } else if (isSwitchedActs2_2 && !isAct2_2Valid() && !_form2_2Key.currentState!.validate()) {
                                      if ((!AppUtils.checkRequired(_Act2_2FinancialYearController.text))) {
                                        _scrollToKeyWidget(act2_2_key);
                                      } else {
                                        for (int i = 0; i < Act2_2Widgets.length; i++) {
                                          if ((!(AppUtils.checkRequired(_Act2_2WorkerNameControllers[i].text)))) {
                                            _scrollToKeyWidget(act2_2GlobalKeys[i]);
                                            break;
                                          }
                                        }
                                      }
                                    } else if (isSwitchedActs2_3 && !AppUtils.checkRequired(_ActR4aController.text)) {
                                      _scrollToKeyWidget(act2_3_key);
                                    } else if (isSwitchedActs2_4 && !AppUtils.checkRequired(_ActR4bController.text)) {
                                      _scrollToKeyWidget(act2_4_key);
                                    } else if (isSwitchedActs2_5 && !AppUtils.checkRequired(_ActR4cController.text)) {
                                      _scrollToKeyWidget(act2_5_key);
                                    } else if (isSwitchedActs2_6 && !AppUtils.checkRequired(_ActS26R5Controller.text)) {
                                      _scrollToKeyWidget(act2_6_key);
                                    }
                                  } else if (isSwitchedActs3 && !isAct3Valid()) {
                                    print("_ActR32Controller.text ${_ActR32Controller.text}");
                                    if (isSwitchedActs3_3 && !AppUtils.checkRequired(_ActR32Controller.text)) {
                                      _scrollToKeyWidget(act3_3_key);
                                    }
                                  } else if (isSwitchedActs4 && !isAct4Valid()) {
                                    if (isSwitchedActs4_1_4 && !isAct4_1_5Valid() && !_form4_1_4Key.currentState!.validate())
                                      for (int i = 0; i < Act4_1_5Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act4_1_5NameContractorControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act4_1_5NameContractorLabourControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act4_1_5WagesTobePaidControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act4_1_5DifferAmountControllers[i].text))) ||
                                            WagesToPaid[i] == null) {
                                          _scrollToKeyWidget(act4_1_5GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    else if (isSwitchedActs4_1_5 && !AppUtils.checkRequired(_ActS9aLaborersController.text) && !AppUtils.checkRequired(_ActS9aSnoController.text)) {
                                      _scrollToKeyWidget(act4_1_5key);
                                    } else if (isSwitchedActs4_1_6 && !AppUtils.checkRequired(_ActR72Controller.text)) {
                                      _scrollToKeyWidget(act4_1_6key);
                                    } else if (isSwitchedActs4_1_7 && !AppUtils.checkRequired(_ActS212SnoController.text)) {
                                      _scrollToKeyWidget(act4_1_7key);
                                    } else if (isSwitchedActs4_2_5 && !isAct4_2_5Valid() && !_form4_2_5Key.currentState!.validate()) {
                                      if (!AppUtils.checkRequired(_ActS211R65Controller.text)) {
                                        _scrollToKeyWidget(act4_2_5key);
                                      } else {
                                        for (int i = 0; i < Act4_2_5Widgets.length; i++) {
                                          if ((!(AppUtils.checkRequired(_Act4_2_5NameContractorControllers[i].text)))) {
                                            _scrollToKeyWidget(act4_2_5GlobalKeys[i]);
                                            break;
                                          }
                                        }
                                      }
                                    } else if (isSwitchedActs4_2_10 && !AppUtils.checkRequired(_ActS122R25Controller.text)) {
                                      _scrollToKeyWidget(act4_2_10key);
                                    }
                                  } else if (isSwitchedActs5 && !isAct5Valid()) {
                                    if (isSwitchedActs5_4 && !isAct5_4Valid() && !_form5_4Key.currentState!.validate()) {
                                      for (int i = 0; i < Act5_4Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act5_4MaleWorkersControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act5_4MDesgControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act5_4MSalaryPaidControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act5_4FemaleWorkersControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act5_4FDesgControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act5_4FSalaryPaidControllers[i].text)))) {
                                          _scrollToKeyWidget(act5_4GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    }
                                  } else if (isSwitchedActs6 && !isActValid()) {
                                    if (!isAct6Valid() && !_form6Key.currentState!.validate()) {
                                      for (int i = 0; i < Act6Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act6NameContractorControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act6AddressControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act6DetailsWorkControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act6TimeSinceControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act6NoWorkersControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act6TotalNoWorkersControllers[i].text)))) {
                                          _scrollToKeyWidget(act6GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    } else if (isSwitchedActs6_1_3 && !AppUtils.checkRequired(_ActR6Controller.text)) {
                                      _scrollToKeyWidget(act6_1_3key);
                                    } else if (isSwitchedActs6_1_4 && !AppUtils.checkRequired(_ActS172R34Controller.text)) {
                                      _scrollToKeyWidget(act6_1_4key);
                                    }
                                  } else if (isSwitchedActs7 && !isAct7Valid()) {
                                    if (isSwitchedActs7_2_3 && !isAct7_3Valid() && !_form7_3Key.currentState!.validate()) {
                                      for (int i = 0; i < Act7_3Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act7_3NameAdolescentLabourControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act7_3AddressControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act7_3AgeControllers[i].text)))) {
                                          _scrollToKeyWidget(act7_3GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    } else if (isSwitchedActs7_2_4 && !isAct7_4Valid() && !_form7_4Key.currentState!.validate()) {
                                      for (int i = 0; i < Act7_2_4Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act7_2_4NameAdolescentLabourControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act7_2_4AddressControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act7_2_4AgeControllers[i].text)))) {
                                          _scrollToKeyWidget(act7_4GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    } else if (isSwitchedActs7_1_3 && !isAct7_5Valid() && !_form7_5Key.currentState!.validate()) {
                                      for (int i = 0; i < Act7_1_3Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act7_1_3NameChildLabourControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act7_1_3AddressControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act7_1_3AgeControllers[i].text)))) {
                                          _scrollToKeyWidget(act7_5GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    }
                                  } else if (isSwitchedActs8 && !isAct8Valid()) {
                                    if (isSwitchedActs8_3 && !isAct8_3Valid() && !_form8_3Key.currentState!.validate()) {
                                      for (int i = 0; i < Act8_3Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act8_3NameControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act8_3DesgControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act8_3DateSuspensionControllers[i].text)))) {
                                          _scrollToKeyWidget(act8_3GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    }
                                  } else if (isSwitchedActs10 && !isAct10Valid()) {
                                    if (isSwitchedActs10_3 && !AppUtils.checkRequired(_ActR13_14_25S7NotController.text) && !AppUtils.checkRequired(_ActR13_14_25S7Not1Controller.text)) {
                                      _scrollToKeyWidget(act10_3key);
                                    }
                                  } else if (isSwitchedActs11 && !isAct11Valid()) {
                                    if (isSwitchedActs11_1 && !isAct11_1Valid() && !_form11_1Key.currentState!.validate()) {
                                      for (int i = 0; i < Act11_1Widgets.length; i++) {
                                        if ((!(AppUtils.checkRequired(_Act11_1NameControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act11_1DesgControllers[i].text))) ||
                                            (!(AppUtils.checkRequired(_Act11_1DateAppointmentControllers[i].text)))) {
                                          _scrollToKeyWidget(act11_1GlobalKeys[i]);
                                          break;
                                        }
                                      }
                                    } else if (isSwitchedActs11_3 && !AppUtils.checkRequired(_ActR14_15_16S4Controller.text)) {
                                      _scrollToKeyWidget(act11_3key);
                                    } else if (isSwitchedActs11_4 && !AppUtils.checkRequired(_ActR143_144_145Controller.text)) {
                                      _scrollToKeyWidget(act11_4key);
                                    }
                                  } else if (!validateStep7()) {
                                    _scrollToKeyWidget(establishmentImageGlobalKey);
                                  } else if (!isAuthSign && !(AppUtils.checkRequired(_otherRemarksController.text))) {
                                    _scrollToFocusedField(_textFormFieldFocusNode21);
                                  } else if (isAuthSign && !validateAuthPersonSignature()) {
                                    _scrollToKeyWidget(authPersonSignKey);
                                  } else if (!validateInspectorSignature()) {
                                    _scrollToKeyWidget(inspectorSignKey);
                                  } else if (!validateMap()) {
                                    final width = MediaQuery.of(context).size.width;
                                    final height = MediaQuery.of(context).size.height;
                                    showDialog(
                                      barrierDismissible: false,
                                      context: context,
                                      builder: (BuildContext context) {
                                        return Container(
                                          height: height,
                                          width: width,
                                          color: Color.fromRGBO(0, 0, 0, 0.16),
                                          child: Center(
                                            child: Column(
                                              mainAxisAlignment: MainAxisAlignment.center,
                                              children: [
                                                CircularProgressIndicator(color: Color(0xFFE5DBDD)),
                                                const SizedBox(
                                                  height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                                ),
                                                Text(
                                                  "Map is Loading..",
                                                  style: TextStyle(color: AppStyles.white, fontSize: 12, decoration: TextDecoration.none),
                                                ),
                                              ],
                                            ),
                                          ),
                                        );
                                      },
                                    );
                                    Future.delayed(Duration(seconds: 15)).then((_) {
                                      Navigator.of(context).pop();
                                    });
                                  }
                                }
                              } else {
                                // Location permission is not granted, request permission
                                await Permission.location.request();
                                (isMapLoadedSuccessfully && _mapImageBytes != null) ? _buildMapFromBytes() : _buildMapBody();
                                setState(() {});
                              }
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
          ),
        ),
      ),
    );
  }

  void _scrollToFocusedField(FocusNode? focusNode) {
    if (focusNode != null) {
      Scrollable.ensureVisible(
        focusNode.context!,
        duration: Duration(milliseconds: 500),
        curve: Curves.ease,
        alignment: 0.5,
      );
    }
  }

  bool isMoreEmployerValid() {
    bool isValid = true;
    for (int i = 0; i < employerWidgets.length; i++) {
      if ((!(AppUtils.checkRequired(employerNameControllers[i].text))) || (!(AppUtils.checkRequired(empPermanentAddressControllers[i].text))) || (empDesignation[i] == null)) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool validateAuthPersonSignature() {
    bool isValid = true;
    if (isAuthSign && (AuthorizedSignPath.isEmpty || AuthorizedSignCID.isEmpty)) {
      isValid = false;
    }
    return isValid;
  }

  bool validateInspectorSignature() {
    bool isValid = true;
    if (InspectorSignPath.isEmpty || InspectionSignCID.isEmpty) {
      isValid = false;
    }
    return isValid;
  }

  bool isAct1Valid() {
    bool isValid = true;
    if (isSwitchedActs1_1 && !AppUtils.checkRequired(_ActSection26dController.text)) {
      isValid = false;
    } else if (isSwitchedActs1_5 && !AppUtils.checkRequired(_ActSection214Controller.text)) {
      isValid = false;
    } else if (isSwitchedActs1_6 && !isAct1_6Valid() && !_form1_6Key.currentState!.validate()) {
      for (int i = 0; i < Act1_6Widgets.length; i++) {
        if (!(AppUtils.checkRequired(_Act1NameControllers[i].text))) {
          isValid = false;
          break;
        }
      }
    } else if (isSwitchedActs1_8 && !_form1_8Key.currentState!.validate()) {
      for (int i = 0; i < _ListHolderWorkInformationModel.length; i++) {
        if (_ListWorkersDayMonth[i] == 0 ||
            (!AppUtils.checkRequired(_ListWorkersNameTextEditingController[i].text)) ||
            (!AppUtils.checkRequired(_ListDesginationEditingController[i].text)) ||
            (!AppUtils.checkRequired(_ListWorkersLenghtOfServiceEditingController[i].text)) ||
            (!AppUtils.checkRequired(_ListWorkersDailyWorkingHouseEditingController[i].text)) ||
            (_ListIsWorkersDay[i] == true && (!AppUtils.checkRequired(_ListWorkerSwagesPaidPerDayEditingController[i].text))) ||
            (_ListIsWorkersMonth[i] == true && (!AppUtils.checkRequired(_ListWorkerSwagesPaidPerMonthEditingController[i].text))) ||
            (!AppUtils.checkRequired(_ListWorkersWagesEntitledFormDateEditingController[i].text)) ||
            (!AppUtils.checkRequired(_ListWorkersWagesPayableEditingController[i].text)) ||
            (!AppUtils.checkRequired(_ListWorkersWagesPaidEditingController[i].text)) ||
            (!AppUtils.checkRequired(_ListWorkersDiffrenceWagesAmountEditingController[i].text))) {
          isValid = false;
          break;
        }
      }
    } else if (isSwitchedActs1_13 && (!AppUtils.checkRequired(_ActRule2bYearController.text)) && (!AppUtils.checkRequired(_ActRule2bYear1Controller.text))) {
      isValid = false;
    } else {
      print("hcghj");
    }
    return isValid;
  }

  bool isAct2Valid() {
    bool isValid = true;
    if (isSwitchedActs2_1 && !isAct2_1Valid() && !_form2_1Key.currentState!.validate()) {
      for (int i = 0; i < Act2_1Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act2_1FinancialYearControllers[i].text))) || (IsFromA[i] == false || IsFromB[i] == false || IsFromC[i] == false || IsFromD[i] == false)) {
          isValid = false;
          break;
        }
      }
    } else if (isSwitchedActs2_2 && !isAct2_2Valid() && !_form2_2Key.currentState!.validate()) {
      if ((!AppUtils.checkRequired(_Act2_2FinancialYearController.text))) {
        isValid = false;
      } else {
        for (int i = 0; i < Act2_2Widgets.length; i++) {
          if ((!(AppUtils.checkRequired(_Act2_2WorkerNameControllers[i].text)))) {
            isValid = false;
            break;
          }
        }
      }
    } else if (isSwitchedActs2_3 && !AppUtils.checkRequired(_ActR4aController.text)) {
      isValid = false;
    } else if (isSwitchedActs2_4 && !AppUtils.checkRequired(_ActR4bController.text)) {
      isValid = false;
    } else if (isSwitchedActs2_5 && !AppUtils.checkRequired(_ActR4cController.text)) {
      isValid = false;
    } else if (isSwitchedActs2_6 && !AppUtils.checkRequired(_ActS26R5Controller.text)) {
      isValid = false;
    }
    return isValid;
  }

  bool isAct3Valid() {
    bool isValid = true;
    if (isSwitchedActs3_3 && !AppUtils.checkRequired(_ActR32Controller.text)) {
      isValid = false;
    }
    return isValid;
  }

  bool isAct4Valid() {
    bool isValid = true;
    if (isSwitchedActs4_1_4 && !isAct4_1_5Valid() && !_form4_1_4Key.currentState!.validate())
      for (int i = 0; i < Act4_1_5Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act4_1_5NameContractorControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act4_1_5NameContractorLabourControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act4_1_5WagesTobePaidControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act4_1_5DifferAmountControllers[i].text))) ||
            WagesToPaid[i] == null) {
          isValid = false;
          break;
        }
      }
    else if (isSwitchedActs4_1_5 && !AppUtils.checkRequired(_ActS9aLaborersController.text) && !AppUtils.checkRequired(_ActS9aSnoController.text)) {
      isValid = false;
    } else if (isSwitchedActs4_1_6 && !AppUtils.checkRequired(_ActR72Controller.text)) {
      isValid = false;
    } else if (isSwitchedActs4_1_7 && !AppUtils.checkRequired(_ActS212SnoController.text)) {
      isValid = false;
    } else if (isSwitchedActs4_2_5 && !isAct4_2_5Valid()) {
      if (!AppUtils.checkRequired(_ActS211R65Controller.text)) {
        isValid = false;
      } else {
        for (int i = 0; i < Act4_2_5Widgets.length; i++) {
          if ((!(AppUtils.checkRequired(_Act4_2_5NameContractorControllers[i].text)))) {
            isValid = false;
            break;
          }
        }
      }
    } else if (isSwitchedActs4_2_10 && !AppUtils.checkRequired(_ActS122R25Controller.text)) {
      isValid = false;
    }
    return isValid;
  }

  bool isAct5Valid() {
    bool isValid = true;
    if (isSwitchedActs5_4 && !isAct5_4Valid() && !_form5_4Key.currentState!.validate()) {
      for (int i = 0; i < Act5_4Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act5_4MaleWorkersControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act5_4MDesgControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act5_4MSalaryPaidControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act5_4FemaleWorkersControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act5_4FDesgControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act5_4FSalaryPaidControllers[i].text)))) {
          isValid = false;
          break;
        }
      }
    }
    return isValid;
  }

  bool isActValid() {
    bool isValid = true;
    if (!isAct6Valid() && !_form6Key.currentState!.validate()) {
      for (int i = 0; i < Act6Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act6NameContractorControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act6AddressControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act6DetailsWorkControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act6TimeSinceControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act6NoWorkersControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act6TotalNoWorkersControllers[i].text)))) {
          isValid = false;
          break;
        }
      }
    } else if (isSwitchedActs6_1_3 && !AppUtils.checkRequired(_ActR6Controller.text)) {
      isValid = false;
    } else if (isSwitchedActs6_1_4 && !AppUtils.checkRequired(_ActS172R34Controller.text)) {
      isValid = false;
    }
    return isValid;
  }

  bool isAct7Valid() {
    bool isValid = true;
    if (isSwitchedActs7_2_3 && !isAct7_3Valid() && !_form7_3Key.currentState!.validate()) {
      for (int i = 0; i < Act7_3Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act7_3NameAdolescentLabourControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act7_3AddressControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act7_3AgeControllers[i].text)))) {
          isValid = false;
          break;
        }
      }
    } else if (isSwitchedActs7_2_4 && !isAct7_4Valid() && !_form7_4Key.currentState!.validate()) {
      for (int i = 0; i < Act7_2_4Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act7_2_4NameAdolescentLabourControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act7_2_4AddressControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act7_2_4AgeControllers[i].text)))) {
          isValid = false;
          break;
        }
      }
    } else if (isSwitchedActs7_1_3 && !isAct7_5Valid() && !_form7_5Key.currentState!.validate()) {
      for (int i = 0; i < Act7_1_3Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act7_1_3NameChildLabourControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act7_1_3AddressControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act7_1_3AgeControllers[i].text)))) {
          isValid = false;
          break;
        }
      }
    }
    return isValid;
  }

  bool isAct8Valid() {
    bool isValid = true;
    if (isSwitchedActs8_3 && !isAct8_3Valid() && !_form8_3Key.currentState!.validate()) {
      for (int i = 0; i < Act8_3Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act8_3NameControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act8_3DesgControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act8_3DateSuspensionControllers[i].text)))) {
          isValid = false;
          break;
        }
      }
    }
    return isValid;
  }

  bool isAct10Valid() {
    bool isValid = true;
    if (isSwitchedActs10_3 && !AppUtils.checkRequired(_ActR13_14_25S7NotController.text) && !AppUtils.checkRequired(_ActR13_14_25S7Not1Controller.text)) {
      isValid = false;
    }
    return isValid;
  }

  bool isAct11Valid() {
    bool isValid = true;
    if (isSwitchedActs11_1 && !isAct11_1Valid() && !_form11_1Key.currentState!.validate()) {
      for (int i = 0; i < Act11_1Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act11_1NameControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act11_1DesgControllers[i].text))) ||
            (!(AppUtils.checkRequired(_Act11_1DateAppointmentControllers[i].text)))) {
          isValid = false;
          break;
        }
      }
    } else if (isSwitchedActs11_3 && !AppUtils.checkRequired(_ActR14_15_16S4Controller.text)) {
      isValid = false;
    } else if (isSwitchedActs11_4 && !AppUtils.checkRequired(_ActR143_144_145Controller.text)) {
      isValid = false;
    }
    return isValid;
  }

  bool isAct1_6Valid() {
    bool isValid = true;

    for (int i = 0; i < Act1_6Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act1NameControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct1_8Valid() {
    bool isValid = true;

    for (int i = 0; i < Act1_8Widgets.length; i++) {
      if (DaliyMonthlys[i] == null ||
          (!AppUtils.checkRequired(_Act1_8NameControllers[i].text)) ||
          (!AppUtils.checkRequired(_Act1_8DesgControllers[i].text)) ||
          (!AppUtils.checkRequired(_Act1_8lengthServiceControllers[i].text)) ||
          (!AppUtils.checkRequired(_Act1_8dailyWorkHrsControllers[i].text)) ||
          (isDay[i] == true ? (!AppUtils.checkRequired(_Act1_8dayControllers[i].text)) : false) ||
          (isMonth[i] == true ? (!AppUtils.checkRequired(_Act1_8MonthControllers[i].text)) : false) ||
          (!AppUtils.checkRequired(_Act1_8wageEntitledControllers[i].text)) ||
          (!AppUtils.checkRequired(_Act1_8wagePayableControllers[i].text)) ||
          (!AppUtils.checkRequired(_Act1_8wagePaidControllers[i].text)) ||
          (!AppUtils.checkRequired(_Act1_8differenceWageAmountControllers[i].text))) {
        isValid = false;
        break;
      }
    }

    return isValid;
  }

  bool isAct2_1Valid() {
    bool isValid = true;

    for (int i = 0; i < Act2_1Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act2_1FinancialYearControllers[i].text))) || (IsFromA[i] == false || IsFromB[i] == false || IsFromC[i] == false || IsFromD[i] == false)) {
        isValid = false;
        break;
      }
    }

    return isValid;
  }

  bool isAct2_2Valid() {
    bool isValid = true;
    if (!AppUtils.checkRequired(_Act2_2FinancialYearController.text)) {
      isValid = false;
    } else {
      for (int i = 0; i < Act2_2Widgets.length; i++) {
        if ((!(AppUtils.checkRequired(_Act2_2WorkerNameControllers[i].text)))) {
          isValid = false;
          break;
        }
      }
    }
    return isValid;
  }

  bool isAct4_1_5Valid() {
    bool isValid = true;

    for (int i = 0; i < Act4_1_5Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act4_1_5NameContractorControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act4_1_5NameContractorLabourControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act4_1_5WagesTobePaidControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act4_1_5DifferAmountControllers[i].text))) ||
          WagesToPaid[i] == null) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct4_2_5Valid() {
    bool isValid = true;

    for (int i = 0; i < Act4_2_5Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act4_2_5NameContractorControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct5_4Valid() {
    bool isValid = true;
    for (int i = 0; i < Act5_4Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act5_4MaleWorkersControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act5_4MDesgControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act5_4MSalaryPaidControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act5_4FemaleWorkersControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act5_4FDesgControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act5_4FSalaryPaidControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct6Valid() {
    bool isValid = true;
    for (int i = 0; i < Act6Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act6NameContractorControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act6AddressControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act6DetailsWorkControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act6TimeSinceControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act6NoWorkersControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act6TotalNoWorkersControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct7_3Valid() {
    bool isValid = true;
    for (int i = 0; i < Act7_3Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act7_3NameAdolescentLabourControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act7_3AddressControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act7_3AgeControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct7_4Valid() {
    bool isValid = true;
    for (int i = 0; i < Act7_2_4Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act7_2_4NameAdolescentLabourControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act7_2_4AddressControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act7_2_4AgeControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct7_5Valid() {
    bool isValid = true;
    for (int i = 0; i < Act7_1_3Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act7_1_3NameChildLabourControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act7_1_3AddressControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act7_1_3AgeControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct8_3Valid() {
    bool isValid = true;
    for (int i = 0; i < Act8_3Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act8_3NameControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act8_3DesgControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act8_3DateSuspensionControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isAct11_1Valid() {
    bool isValid = true;
    for (int i = 0; i < Act11_1Widgets.length; i++) {
      if ((!(AppUtils.checkRequired(_Act11_1NameControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act11_1DesgControllers[i].text))) ||
          (!(AppUtils.checkRequired(_Act11_1DateAppointmentControllers[i].text)))) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }

  bool isContractorValid() {
    bool isValid = true;
    if (!isMoreContractorValid()) {
      for (int i = 0; i < contractorWidgets.length; i++) {
        if ((!(AppUtils.checkRequired(_companyNameControllers[i].text))) ||
            (!(AppUtils.checkRequired(_contractorNameControllers[i].text))) ||
            (!(AppUtils.checkRequired(_jobTypeControllers[i].text)))) {
          isValid = false;
          break;
        } else if (_isHasLicenesList[i] == true) {
          if (!(AppUtils.checkRequired(_completionDateControllers[i].text.toString())) || !(AppUtils.checkRequired(_commencementDateControllers[i].text.toString()))) {
            isValid = false;
            break;
          }
        }
      }
    }
    return isValid;
  }

  bool isMoreContractorValid() {
    bool isValid = true;

    for (int i = 0; i < _ListHolderContractoreDetailsModel.length; i++) {
      if ((!(AppUtils.checkRequired(_ListCompanyNameTextEditingController[i].text))) ||
          (!(AppUtils.checkRequired(_ListOwnerNameTextEditingController[i].text))) ||
          (!(AppUtils.checkRequired(_ListJobTypeTextEditingController[i].text)))) {
        isValid = false;
        break;
      } else if (_ListContractorsHasLicence[i] == true) {
        if (!(AppUtils.checkRequired(_ListCommencemenDateTextEditingController[i].text.toString())) || !(AppUtils.checkRequired(_ListCompletionDateTextEditingController[i].text.toString()))) {
          isValid = false;
          break;
        }
      }
    }
    return isValid;
  }

  void _scrollToKeyWidget(GlobalKey? globalKey) {
    if (globalKey != null) {
      Scrollable.ensureVisible(
        globalKey.currentContext!,
        duration: Duration(milliseconds: 500),
        curve: Curves.ease,
        alignment: 0.5,
      );
    }
  }

  void deleteEmployee(int i) {
    newData = {
      'InspectionID': widget.inspectionID,
      'EmployeeID': employeeIds[i],
      'EmployeeName': employerNameControllers[i].text,
      'DesignationID': empDesignation[i] == null ? 0 : empDesignation[i],
      'OtherDesignationNote': otherNoteControllers[i].text,
      'Age': empAgeControllers[i].text.isEmpty ? 0 : empAgeControllers[i].text,
      'PAddress': empPermanentAddressControllers[i].text,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedEmployeeList.add(newData);
  }

  void deleteAct1_6(int i) {
    MainDivACT1WorkerDetailsXML = {
      'InspectionID': inspectionId,
      'ACTID': act1_6Ids[i],
      'ACTRuleID': act1_6RuleIds[i],
      'ACT1MinWorkerID': act1_6WorkerIds[i],
      'WorkerAct1FirstName': _Act1NameControllers[i].text,
      'IsBreakRule211a': isSwitchedActs1_6 ? 1 : 0,
      'MainContraventionsWagesAct': isSwitchedActs1 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct1_6List.add(MainDivACT1WorkerDetailsXML);
  }

  void deleteAct1_8(int i) {
    MainDivACT18WorkersDetailsXML = {
      'InspectionID': widget.inspectionID,
      'WorkerAct1Rule8UploadStatement': _ListHolderWorkInformationModel[i].file_name,
      'WorkerAct1Rule8UploadStatementCID': _ListHolderWorkInformationModel[i].file_path,
      'ACTID': act1_8Ids[i],
      'ACTRuleID': act1_8RuleIds[i],
      'ACT1Rule8MinWorkerID': act1_8Rule8MinWorkerIds[i],
      'SrNo': _ListSerialNoTextEditingController[i].text,
      'WorkerAct1Rule8FirstName': _ListWorkersNameTextEditingController[i].text,
      'WorkerAct1Rule8Designation': _ListDesginationEditingController[i].text,
      'WorkerAct1Rule8LengthofService': _ListWorkersLenghtOfServiceEditingController[i].text,
      'WorkerAct1Rule8DailyWorkingHours': _ListWorkersDailyWorkingHouseEditingController[i].text.isEmpty ? 0 : int.tryParse(_ListWorkersDailyWorkingHouseEditingController[i].text),
      'WorkerAct1Rule8WagesPaidPerDay': _ListWorkerSwagesPaidPerDayEditingController[i].text.isEmpty ? 0 : _ListWorkerSwagesPaidPerDayEditingController[i].text,
      'WorkerAct1Rule8WagesPaidPerMonth': _ListWorkerSwagesPaidPerMonthEditingController[i].text.isEmpty ? 0 : _ListWorkerSwagesPaidPerMonthEditingController[i].text,
      'WorkerAct1Rule8WagesEntitledfromDate': _ListWorkersWagesEntitledFormDateEditingController[i].text,
      'WorkerAct1Rule8WagesAmount': _ListWorkersWagesPayableEditingController[i].text,
      'WorkerAct1Rule8WagesPaid': _ListWorkersWagesPaidEditingController[i].text.isEmpty ? 0 : _ListWorkersWagesPaidEditingController[i].text,
      'WorkerAct1Rule8DifferenceWagesAmount': _ListWorkersDiffrenceWagesAmountEditingController[i].text.isEmpty ? 0 : _ListWorkersDiffrenceWagesAmountEditingController[i].text,
      'WorkerAct1Rule8Remarks': _ListWorkersRemarksAmountEditingController[i].text,
      'Isdaymonth': _ListWorkersDayMonth[i],
      'IsBreakRuleK12': isSwitchedActs1_8 ? 1 : 0,
      'MainContraventionsWagesAct': isSwitchedActs1 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct1_8List.add(MainDivACT18WorkersDetailsXML);
  }

  void deleteAct2_1(int i) {
    ActFinancial12ListXML = {
      'InspectionID': inspectionId,
      'ACTRuleID': act2_1RuleIds[i],
      'ACTID': act2_1Ids[i],
      'ActFinancial12ListDNo': act2_1FinancialLIstIds[i],
      'ActFinancial12ListYear': _Act2_1FinancialYearControllers[i].text,
      'IsBreakRule274': isSwitchedActs2_1 ? 1 : 0,
      'MainContraventionsPayBounus1965Act': isSwitchedActs2 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
      'ISActFinancial12ListFormA': IsFromA[i] ? 1 : 0,
      'IsActFinancial12ListFormB': IsFromB[i] ? 1 : 0,
      'IsActFinancial12ListFormC': IsFromC[i] ? 1 : 0,
      'IsActFinancial12ListFormD': IsFromD[i] ? 1 : 0,
    };
    deletedAct2_1List.add(ActFinancial12ListXML);
  }

  void deleteAct2_2(int i) {
    ACTRuleNotPaidWorkerXML = {
      'InspectionID': inspectionId,
      'ACTRuleID': act2_2RuleIds[i],
      'ACTID': act2_2Ids[i],
      'ACTRuleNotPaidWorkerDetailDNo': act2_2NotPaidWorkerDetailDNoIds[i],
      'NoPaidBonusPersonName': _Act2_2WorkerNameControllers[i].text,
      'IsBreakRule219b': isSwitchedActs2_2 ? 1 : 0,
      'MainContraventionsPayBounus1965Act': isSwitchedActs2 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct2_2List.add(ACTRuleNotPaidWorkerXML);
  }

  void deleteAct4_1_5(int i) {
    ACTSharamk214DetailsXML = {
      'InspectionID': inspectionId,
      'ACTID': act4_1_5Ids[i],
      'ACTRuleID': act4_1_5RuleIds[i],
      'Sharamk214DNo': act4_1_5Sharamk214DNo[i],
      'Sharamk214NameofContractor': _Act4_1_5NameContractorControllers[i].text,
      'Sharamk214NameofContractLabour': _Act4_1_5NameContractorLabourControllers[i].text,
      'IsSharamk214PaidWages': WagesToPaid[i] == 0 ? 0 : WagesToPaid[i],
      'Sharamk214Wagestobepaid': _Act4_1_5WagesTobePaidControllers[i].text == '' ? 0 : _Act4_1_5WagesTobePaidControllers[i].text,
      'Sharamk214DifferentialAmounttobepaid': _Act4_1_5DifferAmountControllers[i].text == '' ? 0 : _Act4_1_5DifferAmountControllers[i].text,
      'IsBreakRule214': isSwitchedActs4_1_4 ? 1 : 0,
      'MainContraventionsContractLabour1972Act': isSwitchedActs4 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct4_1_5List.add(ACTSharamk214DetailsXML);
  }

  void deleteAct4_2_5(int i) {
    ACTRuleS211k65DetailsXML = {
      'InspectionID': inspectionId,
      'ACTID': act4_2_5Ids[i],
      'ACTRuleID': act4_2_5RuleIds[i],
      'ACTIsBreakRuleS211k65DNo': act4_2_5ACTIsBreakRuleS211k65DNo[i],
      'ACTIsBreakRuleS211k65Contractorname': _Act4_2_5NameContractorControllers[i].text,
      'IsBreakRuleS211k65': isSwitchedActs4_2_5 ? 1 : 0,
      'MainContraventionsObservedUnderContractLabour1972Act': isSwitchedActs4 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct4_2_5List.add(ACTRuleS211k65DetailsXML);
  }

  void deleteAct5_4(int i) {
    ACTWorkerDetailsXML = {
      'InspectionID': inspectionId,
      'ACTRuleID': act5_4RuleIds[i],
      'ACTID': act5_4Ids[i],
      'WorkerSrNo': _Act5_4SrNoControllers[i].text,
      'MaleWorkerName': _Act5_4MaleWorkersControllers[i].text,
      'MDesignation': _Act5_4MDesgControllers[i].text,
      'MSalarypaid': _Act5_4MSalaryPaidControllers[i].text == '' ? 0 : _Act5_4MSalaryPaidControllers[i].text,
      'FemaleWorkerName': _Act5_4FemaleWorkersControllers[i].text,
      'FDesignation': _Act5_4FDesgControllers[i].text,
      'FSalarypaid': _Act5_4FSalaryPaidControllers[i].text == '' ? 0 : _Act5_4FSalaryPaidControllers[i].text,
      'MainContraventionsObservedUnderRemuneration1976Act': isSwitchedActs5 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct5_4List.add(ACTWorkerDetailsXML);
  }

  void deleteAct_6(int i) {
    ACTContractPersonDetailsXML = {
      'InspectionID': inspectionId,
      'ACTRuleID': act6RuleIds[i],
      'ACTID': act6Ids[i],
      'ContractorPersonDetailsDetailDNo': act6ContractorPersonDetailsDetailDNo[i],
      'ContractPersonName': _Act6NameContractorControllers[i].text,
      'ContractPersonDetailsPAddress': _Act6AddressControllers[i].text,
      'Detailswork': _Act6DetailsWorkControllers[i].text,
      'initiationwork': _Act6TimeSinceControllers[i].text,
      'Noofworkersemployed': _Act6NoWorkersControllers[i].text == '' ? 0 : _Act6NoWorkersControllers[i].text,
      'Totalnumberofworkers': _Act6TotalNoWorkersControllers[i].text == '' ? 0 : _Act6TotalNoWorkersControllers[i].text,
      'MainContraventionsObservedUnderInterStateMigrantWorkmen1979Act': isSwitchedActs6 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct6List.add(ACTContractPersonDetailsXML);
  }

  void deleteAct7_3(int i) {
    ACTRule972DetailsRecordXML = {
      'InspectionID': inspectionId,
      'ACTID': act7_3Ids[i],
      'ACTRuleID': act7_3RuleIds[i],
      'ACTIsBreakRule972DetailDNo': act7_3ACTIsBreakRule972DetailDNo[i],
      'ACTIsBreakRule972NameofAdolescentLabour': _Act7_3NameAdolescentLabourControllers[i].text,
      'ACTIsBreakRule972DetailAddress': _Act7_3AddressControllers[i].text,
      'ACTIsBreakRule972DetailAge': _Act7_3AgeControllers[i].text == '' ? 0 : _Act7_3AgeControllers[i].text,
      'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
      'IsBreakRule972': isSwitchedActs7_2_3 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct7_3List.add(ACTRule972DetailsRecordXML);
  }

  void deleteAct7_4(int i) {
    ACTRule973DetailsXML = {
      'InspectionID': inspectionId,
      'ACTID': act7_4Ids[i],
      'ACTRuleID': act7_4RuleIds[i],
      'ACTIsBreakRule973DetailDNo': act7_4ACTIsBreakRule973DetailDNo[i],
      'ACTIsBreakRule973NameofAdolescentLabour': _Act7_2_4NameAdolescentLabourControllers[i].text,
      'ACTIsBreakRule973DetailAddress': _Act7_2_4AddressControllers[i].text,
      'ACTIsBreakRule973DetailAge': _Act7_2_4AgeControllers[i].text == '' ? 0 : _Act7_2_4AgeControllers[i].text,
      'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct7_4List.add(ACTRule973DetailsXML);
  }

  void deleteAct7_5(int i) {
    ACTRuleWorkmen17XML = {
      'InspectionID': inspectionId,
      'ACTRuleID': act7_5RuleIds[i],
      'ACTID': act7_5Ids[i],
      'WorkemenSrNo': act7_5WorkemenSrNo[i],
      'NameofChildLabour': _Act7_1_3NameChildLabourControllers[i].text,
      'ChildPAddress': _Act7_1_3AddressControllers[i].text,
      'DistrictID': 0,
      'TalukaID': 0,
      'ZoneID': 0,
      'AreaID': 0,
      'childAge': _Act7_1_3AgeControllers[i].text == '' ? 0 : _Act7_1_3AgeControllers[i].text,
      'IsBreakRule17': isSwitchedActs7_1_3 ? 1 : 0,
      'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct7_5List.add(ACTRuleWorkmen17XML);
  }

  void deleteAct8_3(int i) {
    ACTRuleDesignationXML = {
      'InspectionID': inspectionId,
      'ACTRuleID': act8_3RuleIds[i],
      'ACTID': act8_3Ids[i],
      'dessrno': act8_3dessrno[i],
      'DegprofileName': _Act8_3NameControllers[i].text,
      'DesignationName': _Act8_3DesgControllers[i].text,
      'Dateofsuspension': _Act8_3DateSuspensionControllers[i].text,
      'MainContObsInterStateWorkmen1946Act': isSwitchedActs8 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct8_3List.add(ACTRuleDesignationXML);
  }

  void deleteAct11_1(int i) {
    ACTRuleMainDivEmployeesXML = {
      'InspectionID': inspectionId,
      'ACTID': act11_1Ids[i],
      'ACTRuleID': act11_1RuleIds[i],
      'EmployeesActNo': act11_1EmployeesActNo[i],
      'EmployeesActName': _Act11_1NameControllers[i].text,
      'EmployeesActDesignation': _Act11_1DesgControllers[i].text,
      'EmployeesActDateofappointment': _Act11_1DateAppointmentControllers[i].text,
      'MainInspectionSalesEmployeesAct': isSwitchedActs11 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedAct11_1List.add(ACTRuleMainDivEmployeesXML);
  }

  Future<void> validateStep4() async {
    EmployeeDetailsXMLString = '';
    dataList.clear();
    for (int i = 0; i < employerWidgets.length; i++) {
      print("DesignationID ${empDesignation[i]}");
      newData = {
        'InspectionID': widget.inspectionID,
        'EmployeeID': employeeIds[i],
        'EmployeeName': employerNameControllers[i].text,
        'DesignationID': empDesignation[i] == null ? 0 : empDesignation[i],
        'OtherDesignationNote': otherNoteControllers[i].text,
        'Age': empAgeControllers[i].text.isEmpty ? 0 : empAgeControllers[i].text,
        'PAddress': empPermanentAddressControllers[i].text,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };

      dataList.add(newData);
    }
    dataList.addAll(deletedEmployeeList);
    // Convert data to XML
    EmployeeDetailsXMLString = buildXml(dataList);
    print(EmployeeDetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  void deleteContractor(int i) {
    /// uploadFile(File(filePaths[i]));
    ContractorData = {
      'InspectionID': widget.inspectionID,
      'ContractFileupload': _ListHolderContractoreDetailsModel[i].image_name,
      'ContractFileuploadCID': _ListHolderContractoreDetailsModel[i].image_path,
      'ContractorID': _contractorIds[i],
      'ContractorName': _ListOwnerNameTextEditingController[i].text,
      'CompanyName': _ListCompanyNameTextEditingController[i].text,
      'JobType': _ListJobTypeTextEditingController[i].text,
      'IsLicense': _ListContractorsHasLicence[i] == 0 ? 0 : _ListContractorsHasLicence[i],
      'CompletionDate': _ListCompletionDateTextEditingController[i].text.toString(),
      'CommencementDate': _ListCommencemenDateTextEditingController[i].text.toString(),
      'MaleCount': _ListMaleWorkerTextEditingController[i].text.isNotEmpty ? int.tryParse(_ListMaleWorkerTextEditingController[i].text) : 0,
      'FemaleCount': _ListFeMaleWorkerTextEditingController[i].text.isNotEmpty ? int.tryParse(_ListFeMaleWorkerTextEditingController[i].text) : 0,
      'TransgenderCount': _ListTransgenderWorkerTextEditingController[i].text.isNotEmpty ? int.tryParse(_ListTransgenderWorkerTextEditingController[i].text) : 0,
      'TotalWorkerCount': _ListTotalWorkerTextEditingController[i].text.isNotEmpty ? int.tryParse(_ListTotalWorkerTextEditingController[i].text) : 0,
      'IsContractors': isContractor == true ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': 0,
    };
    deletedContractorList.add(ContractorData);
  }

  Future<void> validateStep5() async {
    ContractorDetailsXMLString = '';
    ContractorList.clear();
    // if (isContractor) {
    for (int i = 0; i < _ListHolderContractoreDetailsModel.length; i++) {
      /// uploadFile(File(filePaths[i]));
      ContractorData = {
        'InspectionID': widget.inspectionID,
        'ContractFileupload': _ListHolderContractoreDetailsModel[i].image_name == '' ? '' : _ListHolderContractoreDetailsModel[i].image_name,
        'ContractFileuploadCID': _ListHolderContractoreDetailsModel[i].image_path == '' ? '' : _ListHolderContractoreDetailsModel[i].image_path,
        'ContractorID': _contractorIds[i],
        'ContractorName': _ListOwnerNameTextEditingController[i].text,
        'CompanyName': _ListCompanyNameTextEditingController[i].text,
        'JobType': _ListJobTypeTextEditingController[i].text,
        'IsLicense': _ListContractorsHasLicence[i] == 0 ? 0 : _ListContractorsHasLicence[i],
        'CompletionDate': _ListCompletionDateTextEditingController[i].text.toString(),
        'CommencementDate': _ListCommencemenDateTextEditingController[i].text.toString(),
        'MaleCount': _ListMaleWorkerTextEditingController[i].text.isNotEmpty ? int.tryParse(_ListMaleWorkerTextEditingController[i].text) : 0,
        'FemaleCount': _ListFeMaleWorkerTextEditingController[i].text.isNotEmpty ? int.tryParse(_ListFeMaleWorkerTextEditingController[i].text) : 0,
        'TransgenderCount': _ListTransgenderWorkerTextEditingController[i].text.isNotEmpty ? int.tryParse(_ListTransgenderWorkerTextEditingController[i].text) : 0,
        'TotalWorkerCount': _ListTotalWorkerTextEditingController[i].text.isNotEmpty ? int.tryParse(_ListTotalWorkerTextEditingController[i].text) : 0,
        'IsContractors': isContractor == true ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': isContractor ? '1' : '0',
      };

      ContractorList.add(ContractorData);
    }
    ContractorList.addAll(deletedContractorList);
    // Convert data to XML
    ContractorDetailsXMLString = buildXml(ContractorList);

    print(ContractorDetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  bool validateStep7() {
    bool isValid = false;
    if (inspectionOneSiteModel_EstImage.isNotEmpty) {
      isValid = true;
    }
    return isValid;
  }

  bool validateMap() {
    bool isValid = false;
    if (MapImageCID.isNotEmpty && MapImagefilename.isNotEmpty) {
      isValid = true;
    }
    return isValid;
  }

  Future<void> addEmployerDetails(int index, TextEditingController employerNameController, TextEditingController empPermanentAddressController, TextEditingController otherNoteController, int? empDesg,
      TextEditingController empAgeController) async {
    final _keyEmp = GlobalKey();
    employerGlobalKeys.add(_keyEmp);
    final newWidget = Column(
      key: _keyEmp,
      children: [
        Container(
            decoration: ShapeDecoration(
              shape: RoundedRectangleBorder(
                side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                borderRadius: BorderRadius.all(Radius.circular(12.0)),
              ),
            ),
            child: Padding(
              padding: EdgeInsets.all(AppConstants.PADDING_8),
              child: Column(
                children: [
                  AppTextField(
                    readOnly: Type == "view" ? true : false,
                    textInputAction: TextInputAction.next,
                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                    title: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('employerName'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          TextSpan(
                            text: ' *', // Suffix text
                            style: TextStyle(
                              color: Colors.red, // Customize the suffix text color
                            ),
                          ),
                        ],
                      ),
                    ),
                    textInputType: TextInputType.text,
                    controller: employerNameController,
                    validator: (text) {
                      if (!(AppUtils.checkRequired(text))) {
                        return translate('employerValidation');
                      }
                      return null;
                    },
                  ),
                  const SizedBox(
                    height: AppConstants.TEXT_FORM_FIELD_PADDING,
                  ),
                  AppTextField(
                    readOnly: Type == "view" ? true : false,
                    textInputAction: TextInputAction.next,
                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                    title: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('permanentAddress'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          TextSpan(
                            text: ' *', // Suffix text
                            style: TextStyle(
                              color: Colors.red, // Customize the suffix text color
                            ),
                          ),
                        ],
                      ),
                    ),
                    textInputType: TextInputType.text,
                    controller: empPermanentAddressController,
                    validator: (text) {
                      if (!(AppUtils.checkRequired(text))) {
                        return translate('addressValidation');
                      }
                      return null;
                    },
                  ),
                  const SizedBox(
                    height: AppConstants.TEXT_FORM_FIELD_PADDING,
                  ),
                  Align(
                    alignment: Alignment.centerLeft,
                    child: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('designation'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          TextSpan(
                            text: ' *', // Suffix text
                            style: TextStyle(
                              color: Colors.red, // Customize the suffix text color
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(
                    height: AppConstants.PADDING_8,
                  ),
                  StatefulBuilder(builder: (context, setState) {
                    return Column(
                      children: [
                        DropdownButtonFormField(
                          value: empDesg == 0 ? null : empDesg,
                          hint: new Text(translate('select')),
                          onChanged: Type == "view"
                              ? null
                              : (dynamic newValue) {
                                  setState(() {
                                    empDesg = newValue;
                                    empDesignation[index] = newValue;
                                    print('Selected empDesg: $empDesg');
                                  });
                                },
                          validator: (value) {
                            if (value == null) {
                              return 'Please Select Designation';
                            } else {
                              return null;
                            }
                          },
                          isExpanded: true,
                          decoration: InputDecoration(
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                              borderSide: BorderSide(color: Colors.grey), // Customize the border color
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                              borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
                            ),
                          ),
                          items: EmpDesignationList.map(
                            (map) {
                              return DropdownMenuItem<int?>(
                                value: map.DataValue,
                                child: Text(map.DisplayValue ?? ""),
                              );
                            },
                          ).toList(),
                        ),
                        Visibility(
                          visible: empDesg == 4 ? true : false,
                          child: Column(children: [
                            const SizedBox(
                              height: AppConstants.TEXT_FORM_FIELD_PADDING,
                            ),
                            AppTextField(
                              readOnly: Type == "view" ? true : false,
                              textInputAction: TextInputAction.next,
                              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                              validator: (text) {
                                if (!(AppUtils.checkRequired(text))) {
                                  return 'Please Enter Other Designation';
                                }
                                return null;
                              },
                              title: RichText(
                                text: TextSpan(
                                  children: [
                                    TextSpan(
                                      text: translate('otherDesgNote'),
                                      style: TextStyle(
                                        color: Colors.black,
                                        // Customize the title text color
                                        fontSize: 16, // Customize the title text size
                                      ),
                                    ),
                                    TextSpan(
                                      text: ' *', // Suffix text
                                      style: TextStyle(
                                        color: Colors.red, // Customize the suffix text color
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              textInputType: TextInputType.text,
                              controller: otherNoteController,
                            ),
                          ]),
                        ),
                      ],
                    );
                  }),
                  const SizedBox(
                    height: AppConstants.TEXT_FORM_FIELD_PADDING,
                  ),
                  AppTextField(
                    readOnly: Type == "view" ? true : false,
                    textInputAction: TextInputAction.next,
                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                    title: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('age'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          // TextSpan(
                          //   text: ' *', // Suffix text
                          //   style: TextStyle(
                          //     color: Colors.red, // Customize the suffix text color
                          //   ),
                          // ),
                        ],
                      ),
                    ),
                    textInputType: TextInputType.number,
                    inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                    maxLength: 3,
                    controller: empAgeController,
                  ),
                  const SizedBox(
                    height: AppConstants.PADDING_8,
                  ),
                  Visibility(
                    visible: Type == "view" ? false : true,
                    child: Align(
                      alignment: Alignment.centerRight,
                      child: AppCustomButton(
                        loaderColor: AppStyles.naturalWhiteColor,
                        width: 100,
                        height: 44,
                        endIcon: Icon(Icons.delete),
                        background: AppStyles.primary500Color,
                        text: translate('delete'),
                        textColor: AppStyles.white,
                        fontWeight: FontWeight.normal,
                        fontSize: 14,
                        onClicked: () {
                          Type == "view"
                              ? null
                              : setState(() {
                                  FocusScope.of(context).unfocus();
                                  final actualIndex = employerNameControllers.indexOf(employerNameController);

                                  if (employerWidgets.length == 1) {
                                    showAlertDialog(context, translate('employerDetailValidation'));
                                    return;
                                  }
                                  deleteEmployee(actualIndex);
                                  employeeIds.removeAt(actualIndex);
                                  employerNameControllers.removeAt(actualIndex);
                                  empPermanentAddressControllers.removeAt(actualIndex);
                                  otherNoteControllers.removeAt(actualIndex);
                                  empDesignation.removeAt(actualIndex);
                                  empAgeControllers.removeAt(actualIndex);
                                  employerWidgets.removeAt(actualIndex);
                                  employerGlobalKeys.removeAt(actualIndex);
                                });
                        },
                      ),
                    ),
                  ),
                ],
              ),
            )),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
      ],
    );
    setState(() {
      employerWidgets.insert(index, newWidget);
    });
  }

  // Future<void> addContractors(
  //   int index,
  //   int contractorID,
  //   TextEditingController contractorNameControllers,
  //   TextEditingController companyNameControllers,
  //   TextEditingController jobTypeControllers,
  //   TextEditingController commencementDateControllers,
  //   TextEditingController completionDateControllers,
  //   TextEditingController contractorMaleWorkerControllers,
  //   TextEditingController contractorFeMaleWorkerControllers,
  //   TextEditingController contractorTransgenderWorkerControllers,
  //   TextEditingController contractorTotalWorkerControllers,
  //   int selectedHasLicenseControllers,
  //   bool isHasLicenesList,
  //   String filePaths,
  //   InspectionOneSiteModel fileData,
  // ) async {
  //   // print("selectedHasLicenseControllers--$selectedHasLicenseControllers");
  //   int actualIndex = _contractorNameControllers.indexOf(contractorNameControllers);
  //
  //   final _keyCon = GlobalKey();
  //   contractorGlobalKeys.add(_keyCon);
  //   final newWidget = Column(
  //     key: _keyCon,
  //     children: [
  //       Container(
  //         decoration: ShapeDecoration(
  //           shape: RoundedRectangleBorder(
  //             side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
  //             borderRadius: BorderRadius.all(Radius.circular(12.0)),
  //           ),
  //         ),
  //         child: Padding(
  //           padding: EdgeInsets.only(left: AppConstants.PADDING_8, right: AppConstants.PADDING_8),
  //           child: StatefulBuilder(builder: (context, state) {
  //             return Column(
  //               children: [
  //                 const SizedBox(
  //                   height: AppConstants.PADDING_8,
  //                 ),
  //                 Column(
  //                   children: [
  //                     AppTextField(
  //                       readOnly: Type == "view" ? true : false,
  //                       textInputAction: TextInputAction.next,
  //                       titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                       title: RichText(
  //                         text: TextSpan(
  //                           children: [
  //                             TextSpan(
  //                               text: translate('companyName'),
  //                               style: TextStyle(
  //                                 color: Colors.black,
  //                                 // Customize the title text color
  //                                 fontSize: 16, // Customize the title text size
  //                               ),
  //                             ),
  //                             TextSpan(
  //                               text: ' *', // Suffix text
  //                               style: TextStyle(
  //                                 color: Colors.red, // Customize the suffix text color
  //                               ),
  //                             ),
  //                           ],
  //                         ),
  //                       ),
  //                       textInputType: TextInputType.text,
  //                       controller: companyNameControllers,
  //                       validator: (text) {
  //                         if (!(AppUtils.checkRequired(text))) {
  //                           return translate('companyNameValidation');
  //                         }
  //                         return null;
  //                       },
  //                     ),
  //                     const SizedBox(
  //                       height: AppConstants.TEXT_FORM_FIELD_PADDING,
  //                     ),
  //                     AppTextField(
  //                       readOnly: Type == "view" ? true : false,
  //                       textInputAction: TextInputAction.next,
  //                       titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                       title: RichText(
  //                         text: TextSpan(
  //                           children: [
  //                             TextSpan(
  //                               text: translate('ownerName'),
  //                               style: TextStyle(
  //                                 color: Colors.black,
  //                                 // Customize the title text color
  //                                 fontSize: 16, // Customize the title text size
  //                               ),
  //                             ),
  //                             TextSpan(
  //                               text: ' *', // Suffix text
  //                               style: TextStyle(
  //                                 color: Colors.red, // Customize the suffix text color
  //                               ),
  //                             ),
  //                           ],
  //                         ),
  //                       ),
  //                       textInputType: TextInputType.text,
  //                       controller: contractorNameControllers,
  //                       validator: (text) {
  //                         if (!(AppUtils.checkRequired(text))) {
  //                           return translate('ownerNameValidation');
  //                         }
  //                         return null;
  //                       },
  //                     ),
  //                     const SizedBox(
  //                       height: AppConstants.TEXT_FORM_FIELD_PADDING,
  //                     ),
  //                     AppTextField(
  //                       readOnly: Type == "view" ? true : false,
  //                       textInputAction: TextInputAction.next,
  //                       titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                       title: RichText(
  //                         text: TextSpan(
  //                           children: [
  //                             TextSpan(
  //                               text: translate('jobType'),
  //                               style: TextStyle(
  //                                 color: Colors.black,
  //                                 // Customize the title text color
  //                                 fontSize: 16, // Customize the title text size
  //                               ),
  //                             ),
  //                             TextSpan(
  //                               text: ' *', // Suffix text
  //                               style: TextStyle(
  //                                 color: Colors.red, // Customize the suffix text color
  //                               ),
  //                             ),
  //                           ],
  //                         ),
  //                       ),
  //                       textInputType: TextInputType.text,
  //                       controller: jobTypeControllers,
  //                       validator: (text) {
  //                         if (!(AppUtils.checkRequired(text))) {
  //                           return translate('jobTypeValidation');
  //                         }
  //                         return null;
  //                       },
  //                     ),
  //                     const SizedBox(
  //                       height: AppConstants.TEXT_FORM_FIELD_PADDING,
  //                     ),
  //                     Align(
  //                       alignment: Alignment.centerLeft,
  //                       child: RichText(
  //                         text: TextSpan(
  //                           children: [
  //                             TextSpan(
  //                               text: translate('hasLicense'),
  //                               style: TextStyle(
  //                                 color: Colors.black,
  //                                 // Customize the title text color
  //                                 fontSize: 16, // Customize the title text size
  //                               ),
  //                             ),
  //                             TextSpan(
  //                               text: ' *', // Suffix text
  //                               style: TextStyle(
  //                                 color: Colors.red, // Customize the suffix text color
  //                               ),
  //                             ),
  //                           ],
  //                         ),
  //                       ),
  //                     ),
  //                     const SizedBox(
  //                       height: AppConstants.PADDING_8,
  //                     ),
  //                     StatefulBuilder(builder: (context, setState) {
  //                       return Column(
  //                         children: [
  //                           DropdownButtonFormField(
  //                             hint: new Text(translate('select')),
  //                             value: selectedHasLicenseControllers,
  //                             onChanged: Type == "view"
  //                                 ? null
  //                                 : (dynamic newValue) {
  //                                     setState(() {
  //                                       selectedHasLicenseControllers = newValue!;
  //                                       if (selectedHasLicenseControllers == 0) {
  //                                         _selectedHasLicense[actualIndex] = 0;
  //                                         isHasLicenesList = false;
  //                                       } else if (selectedHasLicenseControllers == 1) {
  //                                         isHasLicenesList = true;
  //                                         _selectedHasLicense[actualIndex] = 1;
  //                                       }
  //                                     });
  //                                   },
  //                             validator: (value) {
  //                               if (value == null) {
  //                                 return 'Please Select Has Licenese';
  //                               } else {
  //                                 return null;
  //                               }
  //                             },
  //                             isExpanded: true,
  //                             decoration: InputDecoration(
  //                               border: OutlineInputBorder(
  //                                 borderRadius: BorderRadius.circular(10),
  //                               ),
  //                               enabledBorder: OutlineInputBorder(
  //                                 borderRadius: BorderRadius.circular(10),
  //                                 borderSide: BorderSide(color: Colors.grey), // Customize the border color
  //                               ),
  //                               focusedBorder: OutlineInputBorder(
  //                                 borderRadius: BorderRadius.circular(10),
  //                                 borderSide: BorderSide(
  //                                     color: AppStyles.primary500Color), // Customize the focused border color
  //                               ),
  //                             ),
  //                             items: AllYesNoList.map(
  //                               (map) {
  //                                 return DropdownMenuItem<int?>(
  //                                   value: map.DataValue,
  //                                   child: Text(
  //                                     map.DisplayValue ?? "",
  //                                   ),
  //                                 );
  //                               },
  //                             ).toList(),
  //                           ),
  //                           const SizedBox(
  //                             height: AppConstants.PADDING_8,
  //                           ),
  //                           Visibility(
  //                               visible: isHasLicenesList,
  //                               child: Column(
  //                                 children: [
  //                                   AppTextField(
  //                                     textInputAction: TextInputAction.next,
  //                                     titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                                     title: RichText(
  //                                       text: TextSpan(
  //                                         children: [
  //                                           TextSpan(
  //                                             text: translate('commencementDate'),
  //                                             style: TextStyle(
  //                                               color: Colors.black,
  //                                               // Customize the title text color
  //                                               fontSize: 16, // Customize the title text size
  //                                             ),
  //                                           ),
  //                                           TextSpan(
  //                                             text: ' *',
  //                                             // Suffix text
  //                                             style: TextStyle(
  //                                               color: Colors.red, // Customize the suffix text color
  //                                             ),
  //                                           ),
  //                                         ],
  //                                       ),
  //                                     ),
  //                                     textInputType: TextInputType.text,
  //                                     readOnly: true,
  //                                     suffixIcon: IconButton(
  //                                       onPressed: () async {
  //                                         final DateTime? pickedDate = await showDatePicker(
  //                                           context: context,
  //                                           initialDate: current_commencementDates,
  //                                           firstDate: DateTime(1900),
  //                                           // Set a very distant past date
  //                                           lastDate: DateTime(2100),
  //                                           // Set a very distant future date
  //                                           initialDatePickerMode: DatePickerMode.day,
  //                                         );
  //                                         if (pickedDate != null && pickedDate != current_commencementDates) {
  //                                           setState(() {
  //                                             current_commencementDates = pickedDate;
  //                                             String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
  //                                             commencementDateControllers.text = formDate;
  //                                             completionDateControllers.text = commencementDateControllers.text;
  //                                           });
  //                                         }
  //                                       },
  //                                       icon: Icon(
  //                                         Icons.calendar_today,
  //                                       ),
  //                                     ),
  //                                     onTap: () async {
  //                                       final DateTime? pickedDate = await showDatePicker(
  //                                         context: context,
  //                                         initialDate: current_commencementDates,
  //                                         firstDate: DateTime(1900),
  //                                         // Set a very distant past date
  //                                         lastDate: DateTime(2100),
  //                                         // Set a very distant future date
  //                                         initialDatePickerMode: DatePickerMode.day,
  //                                       );
  //                                       if (pickedDate != null && pickedDate != current_commencementDates) {
  //                                         setState(() {
  //                                           current_commencementDates = pickedDate;
  //                                           String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
  //                                           commencementDateControllers.text = formDate;
  //                                           completionDateControllers.text = commencementDateControllers.text;
  //                                         });
  //                                       }
  //                                     },
  //                                     controller: commencementDateControllers,
  //                                     validator: (text) {
  //                                       if (!(AppUtils.checkRequired(text))) {
  //                                         return translate('commencementDateValidation');
  //                                       }
  //                                       return null;
  //                                     },
  //                                   ),
  //                                   const SizedBox(
  //                                     height: AppConstants.TEXT_FORM_FIELD_PADDING,
  //                                   ),
  //                                   AppTextField(
  //                                     textInputAction: TextInputAction.next,
  //                                     titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                                     title: RichText(
  //                                       text: TextSpan(
  //                                         children: [
  //                                           TextSpan(
  //                                             text: translate('completionDate'),
  //                                             style: TextStyle(
  //                                               color: Colors.black,
  //                                               // Customize the title text color
  //                                               fontSize: 16, // Customize the title text size
  //                                             ),
  //                                           ),
  //                                           TextSpan(
  //                                             text: ' *',
  //                                             // Suffix text
  //                                             style: TextStyle(
  //                                               color: Colors.red, // Customize the suffix text color
  //                                             ),
  //                                           ),
  //                                         ],
  //                                       ),
  //                                     ),
  //                                     textInputType: TextInputType.text,
  //                                     readOnly: true,
  //                                     suffixIcon: IconButton(
  //                                       onPressed: () async {
  //                                         DateTime? commencementDate =
  //                                             current_commencementDates; // Use current date if commencement date is null
  //                                         DateTime initialCompletionDate =
  //                                             current_completionDates; // Use commencement date as initial completion date if it's available
  //
  //                                         final DateTime? pickedDate = await showDatePicker(
  //                                           context: context,
  //                                           initialDate: initialCompletionDate,
  //                                           firstDate: commencementDate,
  //                                           lastDate: DateTime(2100),
  //                                           // Set a very distant future date
  //                                           initialDatePickerMode: DatePickerMode.day,
  //                                         );
  //
  //                                         if (pickedDate != null && pickedDate != current_completionDates) {
  //                                           setState(() {
  //                                             current_completionDates = pickedDate;
  //                                             String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
  //                                             completionDateControllers.text = formDate;
  //                                           });
  //                                         }
  //                                       },
  //                                       icon: Icon(
  //                                         Icons.calendar_today,
  //                                       ),
  //                                     ),
  //                                     onTap: () async {
  //                                       DateTime? commencementDate =
  //                                           current_commencementDates; // Use current date if commencement date is null
  //                                       DateTime initialCompletionDate =
  //                                           current_completionDates; // Use commencement date as initial completion date if it's available
  //
  //                                       final DateTime? pickedDate = await showDatePicker(
  //                                         context: context,
  //                                         initialDate: initialCompletionDate,
  //                                         firstDate: commencementDate,
  //                                         lastDate: DateTime(2100),
  //                                         // Set a very distant future date
  //                                         initialDatePickerMode: DatePickerMode.day,
  //                                       );
  //
  //                                       if (pickedDate != null && pickedDate != current_completionDates) {
  //                                         setState(() {
  //                                           current_completionDates = pickedDate;
  //                                           String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
  //                                           completionDateControllers.text = formDate;
  //                                         });
  //                                       }
  //                                     },
  //                                     controller: completionDateControllers,
  //                                     validator: (text) {
  //                                       if (!(AppUtils.checkRequired(text))) {
  //                                         return translate('completionDateValidation');
  //                                       }
  //                                       return null;
  //                                     },
  //                                   ),
  //                                 ],
  //                               )),
  //                         ],
  //                       );
  //                     }),
  //                     const SizedBox(
  //                       height: AppConstants.PADDING_8,
  //                     ),
  //                     Align(
  //                       alignment: Alignment.centerLeft,
  //                       child: Text(
  //                         translate('contractorsDetails-workers'),
  //                       ),
  //                     ),
  //                     const SizedBox(
  //                       height: AppConstants.PADDING_8,
  //                     ),
  //                     Column(
  //                       children: [
  //                         Container(
  //                             decoration: ShapeDecoration(
  //                               shape: RoundedRectangleBorder(
  //                                 side:
  //                                     BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
  //                                 borderRadius: BorderRadius.all(Radius.circular(12.0)),
  //                               ),
  //                             ),
  //                             child: Padding(
  //                               padding: EdgeInsets.all(AppConstants.PADDING_8),
  //                               child: Column(
  //                                 children: [
  //                                   AppTextField(
  //                                     readOnly: Type == "view" ? true : false,
  //                                     textInputAction: TextInputAction.next,
  //                                     titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                                     title: RichText(
  //                                       text: TextSpan(
  //                                         children: [
  //                                           TextSpan(
  //                                             text: translate('maleWorker'),
  //                                             style: TextStyle(
  //                                               color: Colors.black,
  //                                               // Customize the title text color
  //                                               fontSize: 16, // Customize the title text size
  //                                             ),
  //                                           ),
  //                                           TextSpan(
  //                                             text: ' *',
  //                                             // Suffix text
  //                                             style: TextStyle(
  //                                               color: Colors.red, // Customize the suffix text color
  //                                             ),
  //                                           ),
  //                                         ],
  //                                       ),
  //                                     ),
  //                                     textInputType: TextInputType.number,
  //                                     controller: contractorMaleWorkerControllers,
  //                                     onChanged: (_) => _calculateTotal(),
  //                                   ),
  //                                   const SizedBox(
  //                                     height: AppConstants.TEXT_FORM_FIELD_PADDING,
  //                                   ),
  //                                   AppTextField(
  //                                     readOnly: Type == "view" ? true : false,
  //                                     textInputAction: TextInputAction.next,
  //                                     titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                                     title: RichText(
  //                                       text: TextSpan(
  //                                         children: [
  //                                           TextSpan(
  //                                             text: translate('femaleWorker'),
  //                                             style: TextStyle(
  //                                               color: Colors.black,
  //                                               // Customize the title text color
  //                                               fontSize: 16, // Customize the title text size
  //                                             ),
  //                                           ),
  //                                           TextSpan(
  //                                             text: ' *',
  //                                             // Suffix text
  //                                             style: TextStyle(
  //                                               color: Colors.red, // Customize the suffix text color
  //                                             ),
  //                                           ),
  //                                         ],
  //                                       ),
  //                                     ),
  //                                     textInputType: TextInputType.number,
  //                                     controller: contractorFeMaleWorkerControllers,
  //                                     onChanged: (_) => _calculateTotal(),
  //                                   ),
  //                                   const SizedBox(
  //                                     height: AppConstants.TEXT_FORM_FIELD_PADDING,
  //                                   ),
  //                                   AppTextField(
  //                                     readOnly: Type == "view" ? true : false,
  //                                     textInputAction: TextInputAction.next,
  //                                     titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                                     title: RichText(
  //                                       text: TextSpan(
  //                                         children: [
  //                                           TextSpan(
  //                                             text: translate('transgenderWorker'),
  //                                             style: TextStyle(
  //                                               color: Colors.black,
  //                                               // Customize the title text color
  //                                               fontSize: 16, // Customize the title text size
  //                                             ),
  //                                           ),
  //                                           TextSpan(
  //                                             text: ' *',
  //                                             // Suffix text
  //                                             style: TextStyle(
  //                                               color: Colors.red, // Customize the suffix text color
  //                                             ),
  //                                           ),
  //                                         ],
  //                                       ),
  //                                     ),
  //                                     textInputType: TextInputType.number,
  //                                     controller: contractorTransgenderWorkerControllers,
  //                                     onChanged: (_) => _calculateTotal(),
  //                                   ),
  //                                   const SizedBox(
  //                                     height: AppConstants.TEXT_FORM_FIELD_PADDING,
  //                                   ),
  //                                   AppTextField(
  //                                     textInputAction: TextInputAction.next,
  //                                     titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
  //                                     title: RichText(
  //                                       text: TextSpan(
  //                                         children: [
  //                                           TextSpan(
  //                                             text: translate('totalWorker'),
  //                                             style: TextStyle(
  //                                               color: Colors.black,
  //                                               // Customize the title text color
  //                                               fontSize: 16, // Customize the title text size
  //                                             ),
  //                                           ),
  //                                           TextSpan(
  //                                             text: ' *',
  //                                             // Suffix text
  //                                             style: TextStyle(
  //                                               color: Colors.red, // Customize the suffix text color
  //                                             ),
  //                                           ),
  //                                         ],
  //                                       ),
  //                                     ),
  //                                     textInputType: TextInputType.number,
  //                                     controller: contractorTotalWorkerControllers,
  //                                     readOnly: true,
  //                                   ),
  //                                   const SizedBox(
  //                                     height: AppConstants.TEXT_FORM_FIELD_PADDING,
  //                                   ),
  //                                   Align(
  //                                     alignment: Alignment.centerLeft,
  //                                     child: Text(
  //                                       translate('fileUpload'),
  //                                       style: AppStyles.textInputStyle,
  //                                     ),
  //                                   ),
  //                                   const SizedBox(
  //                                     height: AppConstants.PADDING_8,
  //                                   ),
  //                                   Container(
  //                                     decoration: ShapeDecoration(
  //                                       shape: RoundedRectangleBorder(
  //                                         side: BorderSide(
  //                                             color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
  //                                         borderRadius: BorderRadius.all(Radius.circular(12.0)),
  //                                       ),
  //                                     ),
  //                                     child: Padding(
  //                                       padding: EdgeInsets.all(AppConstants.PADDING_8),
  //                                       child: Row(
  //                                         children: [
  //                                           Expanded(
  //                                             flex: 1,
  //                                             child: Align(
  //                                               alignment: Alignment.centerLeft,
  //                                               child: AppCustomButton(
  //                                                 loaderColor: AppStyles.naturalWhiteColor,
  //                                                 width: 110,
  //                                                 background: AppStyles.greyButtonColor,
  //                                                 text: translate('chooseFile'),
  //                                                 textColor: AppStyles.black,
  //                                                 fontWeight: FontWeight.normal,
  //                                                 fontSize: 12,
  //                                                 onClicked: () async {
  //                                                   Type == "view"
  //                                                       ? null
  //                                                       : showModalBottomSheet<void>(
  //                                                           context: context,
  //                                                           builder: (BuildContext context) {
  //                                                             return Container(
  //                                                               child: Wrap(
  //                                                                 children: <Widget>[
  //                                                                   ListTile(
  //                                                                     leading: Icon(Icons.camera),
  //                                                                     title: Text('Open Camera'),
  //                                                                     onTap: () async {
  //                                                                       bool isOnline = await checkConnectivity();
  //                                                                       if (isOnline) {
  //                                                                         _openCamera(
  //                                                                           "FileUploads",
  //                                                                           actualIndex,
  //                                                                         );
  //                                                                       } else {
  //                                                                         _openCameraForOfflineMode(
  //                                                                           "FileUploads",
  //                                                                           actualIndex,
  //                                                                         );
  //                                                                       }
  //
  //                                                                       Navigator.of(context).pop();
  //                                                                       // setState(() {
  //                                                                       //   print("filePaths----$filePaths");
  //                                                                       // });
  //                                                                     },
  //                                                                   ),
  //                                                                   ListTile(
  //                                                                     leading: Icon(Icons.photo),
  //                                                                     title: Text('Open Gallery'),
  //                                                                     onTap: () async {
  //                                                                       bool isOnline = await checkConnectivity();
  //                                                                       if (isOnline) {
  //                                                                         _openGallery("FileUploads", actualIndex);
  //                                                                       } else {
  //                                                                         _openGalleryForOfflineMode(
  //                                                                           "FileUploads",
  //                                                                           actualIndex,
  //                                                                         );
  //                                                                       }
  //                                                                       Navigator.of(context).pop();
  //                                                                     },
  //                                                                   ),
  //                                                                   ListTile(
  //                                                                     leading: Icon(Icons.folder),
  //                                                                     title: Text('Open Document Picker'),
  //                                                                     onTap: () async {
  //                                                                       bool isOnline = await checkConnectivity();
  //                                                                       if (isOnline) {
  //                                                                         _openDocumentPicker(
  //                                                                             "FileUploads", actualIndex);
  //                                                                       } else {
  //                                                                         _openDocumentForOfflineMode(
  //                                                                             "FileUploads", actualIndex);
  //                                                                       }
  //
  //                                                                       Navigator.of(context).pop();
  //                                                                     },
  //                                                                   ),
  //                                                                 ],
  //                                                               ),
  //                                                             );
  //                                                           },
  //                                                         );
  //                                                 },
  //                                               ),
  //                                             ),
  //                                           ),
  //                                           Expanded(
  //                                             flex: 1,
  //                                             child: Text(
  //                                               // selectedFileUploadNames[actualIndex],
  //                                               contractorImages[actualIndex].DocumentPath ?? '',
  //                                               // fileData.DocumentPath ?? '',
  //                                               maxLines: 2,
  //                                               style: AppStyles.textInputStyle,
  //                                             ),
  //                                           ),
  //                                         ],
  //                                       ),
  //                                     ),
  //                                   ),
  //                                   if (((contractorImages[actualIndex].DocumentPath ?? "") != "") &&
  //                                       ((contractorImages[actualIndex].DocumentPathCID ?? "") != ""))
  //                                     SizedBox(
  //                                       width: double.infinity,
  //                                       child: ElevatedButton(
  //                                         onPressed: () {
  //                                           downloadFile(fileData.DocumentPath!, fileData.DocumentPathCID!);
  //                                         },
  //                                         child: Text('Download'),
  //                                       ),
  //                                     ),
  //                                   const SizedBox(
  //                                     height: AppConstants.PADDING_8,
  //                                   ),
  //                                 ],
  //                               ),
  //                             )),
  //                         const SizedBox(
  //                           height: AppConstants.PADDING_8,
  //                         ),
  //                       ],
  //                     ),
  //                   ],
  //                 ),
  //                 Align(
  //                   alignment: Alignment.centerRight,
  //                   child: AppCustomButton(
  //                     loaderColor: AppStyles.naturalWhiteColor,
  //                     width: 100,
  //                     height: 44,
  //                     endIcon: Icon(Icons.delete),
  //                     background: AppStyles.primary500Color,
  //                     text: translate('delete'),
  //                     textColor: AppStyles.white,
  //                     fontWeight: FontWeight.normal,
  //                     fontSize: 14,
  //                     onClicked: () {
  //                       Type == "view"
  //                           ? null
  //                           : setState(() {
  //                               // int actualIndex = index + 1;
  //
  //                               if (contractorWidgets.length == 1) {
  //                                 showAlertDialog(context, translate('contractorDetailValidation'));
  //                                 return;
  //                               }
  //                               deleteContractor(actualIndex);
  //                               _contractorNameControllers.removeAt(actualIndex);
  //                               _contractorIds.removeAt(actualIndex);
  //                               _companyNameControllers.removeAt(actualIndex);
  //                               _jobTypeControllers.removeAt(actualIndex);
  //                               _commencementDateControllers.removeAt(actualIndex);
  //                               _completionDateControllers.removeAt(actualIndex);
  //                               _contractorMaleWorkerControllers.removeAt(actualIndex);
  //                               _contractorFeMaleWorkerControllers.removeAt(actualIndex);
  //                               _contractorTransgenderWorkerControllers.removeAt(actualIndex);
  //                               _contractorTotalWorkerControllers.removeAt(actualIndex);
  //                               _selectedHasLicense.removeAt(actualIndex);
  //                               _isHasLicenesList.removeAt(actualIndex);
  //                               selectedFileUploadNames.removeAt(actualIndex);
  //                               contractorWidgets.removeAt(actualIndex);
  //                               contractorImages.removeAt(actualIndex);
  //                               contractorGlobalKeys.removeAt(actualIndex);
  //                             });
  //                     },
  //                   ),
  //                 ),
  //                 const SizedBox(
  //                   height: AppConstants.PADDING_8,
  //                 ),
  //               ],
  //             );
  //           }),
  //         ),
  //       ),
  //     ],
  //   );
  //   setState(() {
  //     contractorWidgets.insert(actualIndex, newWidget);
  //   });
  // }

  Future<void> Acts1_6(int index, TextEditingController act1SrNoControllers, TextEditingController act1NameControllers) async {
    setState(() {
      act1SrNoControllers.text = "${(index + 1)}";
      final _key1_6 = GlobalKey();
      act1_6GlobalKeys.add(_key1_6);
      final newWidget = Column(
        key: _key1_6,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
              textInputAction: TextInputAction.next,
              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
              title: RichText(
                text: TextSpan(
                  children: [
                    TextSpan(
                      text: translate('srNo'),
                      style: TextStyle(
                        color: Colors.black, // Customize the title text color
                        fontSize: 16, // Customize the title text size
                      ),
                    ),
                    TextSpan(
                      text: ' *', // Suffix text
                      style: TextStyle(
                        color: Colors.red, // Customize the suffix text color
                      ),
                    ),
                  ],
                ),
              ),
              textInputType: TextInputType.text,
              controller: act1SrNoControllers,
              readOnly: true),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('name'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.text,
            controller: act1NameControllers,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('nameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          final actualIndex = _Act1SrNoControllers.indexOf(act1SrNoControllers);
                          print("actualIndex $actualIndex");
                          if (Act1_6Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act1_6RuleIds[actualIndex] != 0) {
                            deleteAct1_6(actualIndex);
                          }
                          act1_6Ids.removeAt(actualIndex);
                          act1_6WorkerIds.removeAt(actualIndex);
                          act1_6RuleIds.removeAt(actualIndex);
                          _Act1SrNoControllers.removeAt(actualIndex);
                          _Act1NameControllers.removeAt(actualIndex);
                          Act1_6Widgets.removeAt(actualIndex);
                          act1_6GlobalKeys.removeAt(actualIndex);
                          for (var i = 0; i < _Act1SrNoControllers.length; i++) {
                            _Act1SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );

      Act1_6Widgets.insert(index, newWidget);
    });
  }

  Future<void> Acts1_8(
    int index,
    TextEditingController act1_8SrNoControllers,
    TextEditingController act1_8NameControllers,
    TextEditingController act1_8DesgControllers,
    TextEditingController act1_8lengthServiceControllers,
    TextEditingController act1_8dailyWorkinghrsControllers,
    TextEditingController act1_8daysControllers,
    TextEditingController act1_8MonthControllers,
    DateTime current_wagesEntitled,
    int? DaliyMonthly,
    bool isMonths,
    bool isDays,
    TextEditingController act1_8wageEntitledControllers,
    TextEditingController act1_8wagePayableControllers,
    TextEditingController act1_8wagePaidControllers,
    TextEditingController act1_8diffrenceWageAmountControllers,
    TextEditingController act1_8remarksControllers,
  ) async {
    setState(() {
      print("DaliyMonthlys--- $DaliyMonthly");
      final _key1_8 = GlobalKey();
      act1_8SrNoControllers.text = "${(index + 1)}";
      act1_8GlobalKeys.add(_key1_8);
      final newWidget = Column(
        key: _key1_8,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act1_8SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('name'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act1_8NameControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('nameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            controller: act1_8DesgControllers,
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('desg'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('designValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('lengthofService'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act1_8lengthServiceControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('lengthServiceValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('dailyWorkingHours'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act1_8dailyWorkinghrsControllers,
            textInputType: TextInputType.number,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('dailyWorkingValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Align(
            alignment: Alignment.centerLeft,
            child: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('dayMonth'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          StatefulBuilder(
            builder: (context, stateDaily) {
              return Column(children: [
                DropdownButtonFormField(
                  value: DaliyMonthly == 0 ? null : DaliyMonthly,
                  hint: new Text(translate('select')),
                  onChanged: Type == "view"
                      ? null
                      : (dynamic newValue) {
                          stateDaily(() {
                            DaliyMonthly = newValue;
                            DaliyMonthlys[index] = newValue;
                            print('Selected: $DaliyMonthly');
                            if (DaliyMonthlys[index] == 1) {
                              isDay[index] = true;
                              isMonth[index] = false;
                            } else if (DaliyMonthlys[index] == 2) {
                              isDay[index] = false;
                              isMonth[index] = true;
                            }
                          });
                        },
                  validator: (value) {
                    if (value == null) {
                      return translate('dayMonthValidation');
                    } else {
                      return null;
                    }
                  },
                  isExpanded: true,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide: BorderSide(color: Colors.grey), // Customize the border color
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
                    ),
                  ),
                  items: DailyMonthlyList.map(
                    (map) {
                      return DropdownMenuItem<int?>(
                        value: map.DataValue,
                        child: Text(map.DisplayValue ?? ""),
                      );
                    },
                  ).toList(),
                ),
                Visibility(
                  visible: isDay[index],
                  child: Column(children: [
                    const SizedBox(
                      height: AppConstants.TEXT_FORM_FIELD_PADDING,
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: RichText(
                        text: TextSpan(
                          children: [
                            TextSpan(
                              text: translate('wagesPaidPerDay'),
                              style: TextStyle(
                                color: Colors.black,
                                // Customize the title text color
                                fontSize: 16, // Customize the title text size
                              ),
                            ),
                            TextSpan(
                              text: ' *', // Suffix text
                              style: TextStyle(
                                color: Colors.red, // Customize the suffix text color
                              ),
                            ),
                          ],
                        ),
                      ),
                      controller: act1_8daysControllers,
                      textInputType: TextInputType.number,
                      validator: (text) {
                        if (!(AppUtils.checkRequired(text))) {
                          return translate('dataValidation');
                        }
                        return null;
                      },
                    ),
                  ]),
                ),
                Visibility(
                  visible: isMonth[index],
                  child: Column(children: [
                    const SizedBox(
                      height: AppConstants.TEXT_FORM_FIELD_PADDING,
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: RichText(
                        text: TextSpan(
                          children: [
                            TextSpan(
                              text: translate('wagesPaidPerMonth'),
                              style: TextStyle(
                                color: Colors.black,
                                // Customize the title text color
                                fontSize: 16, // Customize the title text size
                              ),
                            ),
                            TextSpan(
                              text: ' *', // Suffix text
                              style: TextStyle(
                                color: Colors.red, // Customize the suffix text color
                              ),
                            ),
                          ],
                        ),
                      ),
                      controller: act1_8MonthControllers,
                      textInputType: TextInputType.number,
                      validator: (text) {
                        if (!(AppUtils.checkRequired(text))) {
                          return translate('dataValidation');
                        }
                        return null;
                      },
                    ),
                  ]),
                ),
              ]);
            },
          ),
          const SizedBox(
            height: AppConstants.CORNER_RADIUS,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('wagesEntitledfromDate'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            suffixIcon: IconButton(
              onPressed: () async {
                final DateTime? pickedDate = await showDatePicker(
                  context: context,
                  initialDate: current_wagesEntitleds[index],
                  firstDate: DateTime(1900),
                  // Set a very distant past date
                  lastDate: DateTime.now(),
                  // Set a very distant future date
                  initialDatePickerMode: DatePickerMode.day,
                );
                if (pickedDate != null && pickedDate != current_wagesEntitleds[index]) {
                  setState(() {
                    current_wagesEntitleds[index] = pickedDate;
                    String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                    act1_8wageEntitledControllers.text = formDate;
                    _Act1_8wageEntitledControllers[index].text = formDate;
                  });
                }
              },
              icon: Icon(
                Icons.calendar_today,
              ),
            ),
            readOnly: true,
            onTap: () async {
              final DateTime? pickedDate = await showDatePicker(
                context: context,
                initialDate: current_wagesEntitleds[index],
                firstDate: DateTime(1900),
                // Set a very distant past date
                lastDate: DateTime.now(),
                // Set a very distant future date
                initialDatePickerMode: DatePickerMode.day,
              );
              if (pickedDate != null && pickedDate != current_wagesEntitleds) {
                setState(() {
                  current_wagesEntitleds[index] = pickedDate;
                  String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                  act1_8wageEntitledControllers.text = formDate;
                  _Act1_8wageEntitledControllers[index].text = formDate;
                });
              }
            },
            textInputType: TextInputType.text,
            controller: _Act1_8wageEntitledControllers[index],
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('wagesDateValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('wagesPayable'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act1_8wagePayableControllers,
            textInputType: TextInputType.number,
            onChanged: (_) => _calculateAct1_8Total(),
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('wagesPayableValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('wagesPaid'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act1_8wagePaidControllers,
            textInputType: TextInputType.number,
            onChanged: (_) => _calculateAct1_8Total(),
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('wagesPaidValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('differenceWagesAmount'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act1_8diffrenceWageAmountControllers,
            textInputType: TextInputType.number,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('wagesAmountValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Align(
            alignment: Alignment.centerLeft,
            child: Text(
              translate('uploadStatement'),
              style: AppStyles.textInputStyle,
            ),
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Container(
            decoration: ShapeDecoration(
              shape: RoundedRectangleBorder(
                side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                borderRadius: BorderRadius.all(Radius.circular(12.0)),
              ),
            ),
            child: Padding(
              padding: EdgeInsets.all(AppConstants.PADDING_8),
              child: Row(
                children: [
                  Expanded(
                    flex: 1,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: AppCustomButton(
                        loaderColor: AppStyles.naturalWhiteColor,
                        width: 110,
                        background: AppStyles.greyButtonColor,
                        text: translate('chooseFile'),
                        textColor: AppStyles.black,
                        fontWeight: FontWeight.normal,
                        fontSize: 12,
                        onClicked: () {
                          Type == "view"
                              ? null
                              : showModalBottomSheet<void>(
                                  context: context,
                                  builder: (BuildContext context) {
                                    return Container(
                                      child: Wrap(
                                        children: <Widget>[
                                          ListTile(
                                            leading: Icon(Icons.camera),
                                            title: Text('Open Camera'),
                                            onTap: () {
                                              _openCamera("Worker1_8");
                                              Navigator.of(context).pop();
                                            },
                                          ),
                                          ListTile(
                                            leading: Icon(Icons.photo),
                                            title: Text('Open Gallery'),
                                            onTap: () {
                                              _openGallery("Worker1_8");
                                              Navigator.of(context).pop();
                                            },
                                          ),
                                          ListTile(
                                            leading: Icon(Icons.folder),
                                            title: Text('Open Document Picker'),
                                            onTap: () {
                                              _openDocumentPicker("Worker1_8");
                                              Navigator.of(context).pop();
                                            },
                                          ),
                                        ],
                                      ),
                                    );
                                  },
                                );
                        },
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 1,
                    child: Text(
                      ImageName,
                      maxLines: 2,
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('remark')),
            controller: act1_8remarksControllers,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Align(
            alignment: Alignment.centerRight,
            child: AppCustomButton(
              loaderColor: AppStyles.naturalWhiteColor,
              width: 100,
              height: 44,
              endIcon: Icon(Icons.delete),
              background: AppStyles.primary500Color,
              text: translate('delete'),
              textColor: AppStyles.white,
              fontWeight: FontWeight.normal,
              fontSize: 14,
              onClicked: () {
                setState(() {
                  int actualIndex = _Act1_8SrNoControllers.indexOf(act1_8SrNoControllers);

                  if (Act1_8Widgets.length == 1) {
                    showAlertDialog(context, translate('workerDetailValidation'));
                    return;
                  }

                  if (act1_8RuleIds[actualIndex] != 0) {
                    deleteAct1_8(actualIndex);
                  }
                  act1_8Ids.removeAt(actualIndex);
                  act1_8RuleIds.removeAt(actualIndex);
                  act1_8Rule8MinWorkerIds.removeAt(actualIndex);
                  _Act1_8SrNoControllers.removeAt(actualIndex);
                  _Act1_8NameControllers.removeAt(actualIndex);
                  _Act1_8DesgControllers.removeAt(actualIndex);
                  _Act1_8lengthServiceControllers.removeAt(actualIndex);
                  _Act1_8dailyWorkHrsControllers.removeAt(actualIndex);
                  _Act1_8dayControllers.removeAt(actualIndex);
                  _Act1_8MonthControllers.removeAt(actualIndex);
                  _Act1_8wageEntitledControllers.removeAt(actualIndex);
                  _Act1_8wagePayableControllers.removeAt(actualIndex);
                  _Act1_8wagePaidControllers.removeAt(actualIndex);
                  _Act1_8differenceWageAmountControllers.removeAt(actualIndex);
                  _Act1_8remarksControllers.removeAt(actualIndex);
                  Act1_8Widgets.removeAt(actualIndex);
                  act1_8GlobalKeys.removeAt(actualIndex);

                  for (var i = 0; i < _Act1_8SrNoControllers.length; i++) {
                    _Act1_8SrNoControllers[i].text = (i + 1).toString();
                  }
                });
              },
            ),
          ),
        ],
      );
      Act1_8Widgets.insert(index, newWidget);
    });
  }

  Future<void> Acts2_1(int index, TextEditingController act2_1SrNoControllers, TextEditingController act2_1FinancialYearControllers, bool IsForma, bool IsFormb, bool IsFormc, bool IsFormd) async {
    setState(() {
      final _key2_1 = GlobalKey();
      act2_1SrNoControllers.text = "${(index + 1)}";

      act2_1GlobalKeys.add(_key2_1);
      final newWidget = Column(
        key: _key2_1,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act2_1SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('financialYear'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act2_1FinancialYearControllers,
            textInputType: TextInputType.number,
            maxLength: 7,
            inputFormatters: [
              FilteringTextInputFormatter.allow(RegExp(r'[0-9\-]')),
            ],
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('financialYearValidation');
              }
              return null;
            },
          ),
          Column(
            children: [
              StatefulBuilder(builder: (context, setFormAstate) {
                return CheckboxListTile(
                  title: Text(translate('formA')),
                  value: IsForma,
                  onChanged: (newValue) {
                    setFormAstate(() {
                      IsForma = newValue!;
                      IsFromA[index] = newValue;
                    });
                  },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                );
              }),
              StatefulBuilder(builder: (context, setFormBstate) {
                return CheckboxListTile(
                  title: Text(translate('formB')),
                  value: IsFormb,
                  onChanged: (newValue) {
                    setFormBstate(() {
                      IsFormb = newValue!;
                      IsFromB[index] = newValue;
                    });
                  },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                );
              }),
              StatefulBuilder(builder: (context, setFormCstate) {
                return CheckboxListTile(
                  title: Text(translate('formC')),
                  value: IsFormc,
                  onChanged: (newValue) {
                    setFormCstate(() {
                      IsFormc = newValue!;
                      IsFromC[index] = newValue;
                    });
                  },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                );
              }),
              StatefulBuilder(builder: (context, setFormDstate) {
                return CheckboxListTile(
                  title: Text(translate('formD')),
                  value: IsFormd,
                  onChanged: (newValue) {
                    setFormDstate(() {
                      IsFormd = newValue!;
                      IsFromD[index] = newValue;
                    });
                  },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                );
              }),
            ],
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  setState(() {
                    int actualIndex = _Act2_1SrNoControllers.indexOf(act2_1SrNoControllers);

                    if (Act2_1Widgets.length == 1) {
                      showAlertDialog(context, translate('workerDetailValidation'));
                      return;
                    }
                    if (act2_1RuleIds[actualIndex] != 0) {
                      deleteAct2_1(actualIndex);
                    }

                    act2_1Ids.removeAt(actualIndex);
                    act2_1RuleIds.removeAt(actualIndex);
                    act2_1FinancialLIstIds.removeAt(actualIndex);
                    _Act2_1SrNoControllers.removeAt(actualIndex);
                    _Act2_1FinancialYearControllers.removeAt(actualIndex);
                    IsFromA.removeAt(actualIndex);
                    IsFromB.removeAt(actualIndex);
                    IsFromC.removeAt(actualIndex);
                    IsFromD.removeAt(actualIndex);
                    Act2_1Widgets.removeAt(actualIndex);
                    act2_1GlobalKeys.removeAt(actualIndex);

                    for (var i = 0; i < _Act2_1SrNoControllers.length; i++) {
                      _Act2_1SrNoControllers[i].text = (i + 1).toString();
                    }
                  });
                },
              ),
            ),
          ),

          // Add the widgets for employer details here
          // (e.g., TextFields, Buttons, etc.)
        ],
      );
      Act2_1Widgets.insert(index, newWidget);
    });
  }

  Future<void> Acts2_2(
    int index,
    TextEditingController act2_2SrNoControllers,
    TextEditingController act2_1WorkerNameControllers,
  ) async {
    final _key2_2 = GlobalKey();

    act2_2GlobalKeys.add(_key2_2);
    act2_2SrNoControllers.text = "${(index + 1)}";
    setState(() {
      final newWidget = Column(
        key: _key2_2,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act2_2SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('name'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act2_1WorkerNameControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('nameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  setState(() {
                    int actualIndex = _Act2_2SrNoControllers.indexOf(act2_2SrNoControllers);

                    if (Act2_2Widgets.length == 1) {
                      showAlertDialog(context, translate('workerDetailValidation'));
                      return;
                    }
                    if (act2_2RuleIds[actualIndex] != 0) {
                      deleteAct2_2(actualIndex);
                    }

                    act2_2Ids.removeAt(actualIndex);
                    act2_2NotPaidWorkerDetailDNoIds.removeAt(actualIndex);
                    act2_2RuleIds.removeAt(actualIndex);
                    _Act2_2SrNoControllers.removeAt(actualIndex);
                    _Act2_2WorkerNameControllers.removeAt(actualIndex);
                    Act2_2Widgets.removeAt(actualIndex);
                    act2_2GlobalKeys.removeAt(actualIndex);

                    for (var i = 0; i < _Act2_2SrNoControllers.length; i++) {
                      _Act2_2SrNoControllers[i].text = (i + 1).toString();
                    }
                  });
                },
              ),
            ),
          ),
        ],
      );
      Act2_2Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act4_1_1(
    int index,
    TextEditingController act4_1_1SrNoControllers,
    TextEditingController act4_1_1NameContractorControllers,
    TextEditingController act4_1_1DetailsWorkControllers,
    TextEditingController act4_1_1TimeSinceControllers,
    TextEditingController act4_1_1NoWorkersControllers,
  ) async {
    setState(() {
      act4_1_1SrNoControllers.text = "${(index + 2)}";
      Act4_1_1Widgets.add(
        Column(
          children: [
            const SizedBox(
              height: AppConstants.PADDING_8,
            ),
            AppTextField(
              textInputAction: TextInputAction.next,
              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
              title: Text(translate('srNo')),
              controller: act4_1_1SrNoControllers,
              readOnly: true,
              textInputType: TextInputType.text,
            ),
            const SizedBox(
              height: AppConstants.TEXT_FORM_FIELD_PADDING,
            ),
            AppTextField(
              readOnly: Type == "view" ? true : false,
              textInputAction: TextInputAction.next,
              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
              title: Text(translate('nameOfContractor')),
              validator: (text) {
                if (!(AppUtils.checkRequired(text))) {
                  return translate('dataValidation');
                }
                return null;
              },
              controller: act4_1_1NameContractorControllers,
              textInputType: TextInputType.text,
            ),
            const SizedBox(
              height: AppConstants.TEXT_FORM_FIELD_PADDING,
            ),
            AppTextField(
              readOnly: Type == "view" ? true : false,
              textInputAction: TextInputAction.next,
              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
              title: Text(translate('detailsOfWork')),
              validator: (text) {
                if (!(AppUtils.checkRequired(text))) {
                  return translate('dataValidation');
                }
                return null;
              },
              controller: act4_1_1DetailsWorkControllers,
              textInputType: TextInputType.text,
            ),
            const SizedBox(
              height: AppConstants.TEXT_FORM_FIELD_PADDING,
            ),
            AppTextField(
              readOnly: Type == "view" ? true : false,
              textInputAction: TextInputAction.next,
              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
              title: Text(translate('TimeSinceWork')),
              validator: (text) {
                if (!(AppUtils.checkRequired(text))) {
                  return translate('dataValidation');
                }
                return null;
              },
              controller: act4_1_1TimeSinceControllers,
              textInputType: TextInputType.text,
            ),
            const SizedBox(
              height: AppConstants.TEXT_FORM_FIELD_PADDING,
            ),
            AppTextField(
              readOnly: Type == "view" ? true : false,
              textInputAction: TextInputAction.next,
              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
              title: Text(translate('numberOfWorkers')),
              validator: (text) {
                if (!(AppUtils.checkRequired(text))) {
                  return translate('dataValidation');
                }
                return null;
              },
              controller: act4_1_1NoWorkersControllers,
              textInputType: TextInputType.text,
            ),
            const SizedBox(
              height: AppConstants.PADDING_8,
            ),
            Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  setState(() {
                    Act4_1_1Widgets.removeAt(Act4_1_1Widgets.length - 1);
                  });
                },
              ),
            ),
          ],
        ),
      );
    });
  }

  Future<void> Act4_1_5(
      int index,
      TextEditingController act4_1_5SrNoControllers,
      TextEditingController act4_1_5NameContractorControllers,
      TextEditingController act4_1_5NameContractorLabourControllers,
      WagesToPaids,
      TextEditingController act4_1_5WagesTobePaidControllers,
      TextEditingController act4_1_5DifferAmountControllers) async {
    setState(() {
      final _key4_1_5 = GlobalKey();

      act4_1_5GlobalKeys.add(_key4_1_5);
      act4_1_5SrNoControllers.text = "${index + 1}";
      print("WagesToPaid4--${WagesToPaid[index]}");
      final newWidget = Column(
        key: _key4_1_5,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act4_1_5SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('nameOfContractor'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act4_1_5NameContractorControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('contractorNameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('nameOfContractorLabour'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act4_1_5NameContractorLabourControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('contractorLabourValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Align(
            alignment: Alignment.centerLeft,
            child: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('paidWages'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          StatefulBuilder(
            builder: (context, state) {
              return Column(children: [
                DropdownButtonFormField(
                  value: WagesToPaids == 0 ? null : WagesToPaids,
                  hint: new Text(translate('select')),
                  onChanged: Type == "view"
                      ? null
                      : (dynamic newValue) {
                          setState(() {
                            WagesToPaids = newValue;
                            WagesToPaid[index] = newValue;
                          });
                        },
                  validator: (value) {
                    if (value == null) {
                      return 'Please Select Paid Wages';
                    } else {
                      return null;
                    }
                  },
                  isExpanded: true,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide: BorderSide(color: Colors.grey), // Customize the border color
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
                    ),
                  ),
                  items: WagestoPaidList.map(
                    (map) {
                      return DropdownMenuItem<int?>(
                        value: map.DataValue,
                        child: Text(map.DisplayValue ?? ""),
                      );
                    },
                  ).toList(),
                ),
              ]);
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('wagesTobePaid'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act4_1_5WagesTobePaidControllers,
            textInputType: TextInputType.number,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('wagesPaidValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('differentialAmountTobePaid'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act4_1_5DifferAmountControllers,
            textInputType: TextInputType.number,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('differentialAmountValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  setState(() {
                    int actualIndex = _Act4_1_5SrNoControllers.indexOf(act4_1_5SrNoControllers);

                    if (Act4_1_5Widgets.length == 1) {
                      showAlertDialog(context, translate('workerDetailValidation'));
                      return;
                    }
                    if (act4_1_5RuleIds[actualIndex] != 0) {
                      deleteAct4_1_5(actualIndex);
                    }

                    act4_1_5Ids.removeAt(actualIndex);
                    act4_1_5Sharamk214DNo.removeAt(actualIndex);
                    act4_1_5RuleIds.removeAt(actualIndex);
                    _Act4_1_5SrNoControllers.removeAt(actualIndex);
                    _Act4_1_5NameContractorControllers.removeAt(actualIndex);
                    _Act4_1_5NameContractorLabourControllers.removeAt(actualIndex);
                    WagesToPaid.removeAt(actualIndex);
                    _Act4_1_5WagesTobePaidControllers.removeAt(actualIndex);
                    _Act4_1_5DifferAmountControllers.removeAt(actualIndex);
                    Act4_1_5Widgets.removeAt(actualIndex);
                    act4_1_5GlobalKeys.removeAt(actualIndex);

                    for (var i = 0; i < _Act4_1_5SrNoControllers.length; i++) {
                      _Act4_1_5SrNoControllers[i].text = (i + 1).toString();
                    }
                  });
                },
              ),
            ),
          ),
        ],
      );
      Act4_1_5Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act4_2_5(
    int index,
    TextEditingController act4_2_5SrNoControllers,
    TextEditingController act4_2_5NameContractorControllers,
  ) async {
    setState(() {
      act4_2_5SrNoControllers.text = "${index + 1}";
      final _key4_2_5 = GlobalKey();

      act4_2_5GlobalKeys.add(_key4_2_5);
      final newWidget = Column(
        key: _key4_2_5,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act4_2_5SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('nameOfContractor'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act4_2_5NameContractorControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('contractorNameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          int actualIndex = _Act4_2_5SrNoControllers.indexOf(act4_2_5SrNoControllers);

                          if (Act4_2_5Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act4_2_5RuleIds[actualIndex] != 0) {
                            deleteAct4_2_5(actualIndex);
                          }

                          act4_2_5Ids.removeAt(actualIndex);
                          act4_2_5RuleIds.removeAt(actualIndex);
                          _Act4_2_5SrNoControllers.removeAt(actualIndex);
                          _Act4_2_5NameContractorControllers.removeAt(actualIndex);
                          Act4_2_5Widgets.removeAt(actualIndex);
                          act4_2_5GlobalKeys.removeAt(actualIndex);

                          for (var i = 0; i < _Act4_2_5SrNoControllers.length; i++) {
                            _Act4_2_5SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );
      Act4_2_5Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act5_4(
    int index,
    TextEditingController act5_4SrNoControllers,
    TextEditingController act5_4MaleWorkersControllers,
    TextEditingController act5_4MDesgControllers,
    TextEditingController act5_4MSalaryPaidControllers,
    TextEditingController act5_4FemaleWorkersControllers,
    TextEditingController act5_4FDesgControllers,
    TextEditingController act5_4FSalaryPaidControllers,
  ) async {
    setState(() {
      act5_4SrNoControllers.text = "${index + 1}";
      final _key5_4 = GlobalKey();

      act5_4GlobalKeys.add(_key5_4);
      final newWidget = Column(
        key: _key5_4,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act5_4SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('maleWorkerName'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act5_4MaleWorkersControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('maleWorkerNameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('desg'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act5_4MDesgControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('designValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('salaryPaid'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act5_4MSalaryPaidControllers,
            textInputType: TextInputType.number,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('salaryValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('femaleWorkerName'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act5_4FemaleWorkersControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('femaleWorkerNameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('desg'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act5_4FDesgControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('designValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('salaryPaid'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act5_4FSalaryPaidControllers,
            textInputType: TextInputType.number,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('salaryValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          int actualIndex = _Act5_4SrNoControllers.indexOf(act5_4SrNoControllers);

                          if (Act5_4Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act5_4RuleIds[actualIndex] != 0) {
                            deleteAct5_4(actualIndex);
                          }

                          act5_4Ids.removeAt(actualIndex);
                          act5_4RuleIds.removeAt(actualIndex);
                          _Act5_4SrNoControllers.removeAt(actualIndex);
                          _Act5_4MaleWorkersControllers.removeAt(actualIndex);
                          _Act5_4MDesgControllers.removeAt(actualIndex);
                          _Act5_4MSalaryPaidControllers.removeAt(actualIndex);
                          _Act5_4FemaleWorkersControllers.removeAt(actualIndex);
                          _Act5_4FDesgControllers.removeAt(actualIndex);
                          _Act5_4FSalaryPaidControllers.removeAt(actualIndex);
                          Act5_4Widgets.removeAt(actualIndex);
                          act5_4GlobalKeys.removeAt(actualIndex);

                          for (var i = 0; i < _Act5_4SrNoControllers.length; i++) {
                            _Act5_4SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );
      Act5_4Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act6(
    int index,
    TextEditingController act6SrNoControllers,
    TextEditingController act6NameContractorControllers,
    TextEditingController act6AddressControllers,
    TextEditingController act6DetailsWorkNoControllers,
    DateTime currentTimeSinceDate,
    TextEditingController act6TimeSinceControllers,
    TextEditingController act6NoWorkersControllers,
    TextEditingController act6TotalNoWorkersControllers,
  ) async {
    setState(() {
      act6SrNoControllers.text = "${index + 1}";
      final _key6 = GlobalKey();

      act6GlobalKeys.add(_key6);
      final newWidget = Column(
        key: _key6,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act6SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('nameOfContractor'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act6NameContractorControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('contractorNameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('permanentAddress'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act6AddressControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('addressValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('detailsOfWork'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act6DetailsWorkNoControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('detailsOfWorkValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('TimeSinceWork'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.text,
            readOnly: true,
            suffixIcon: IconButton(
              onPressed: Type == "view"
                  ? null
                  : () async {
                      final DateTime? pickedDate = await showDatePicker(
                        context: context,
                        initialDate: currentTimeSinceDates[index],
                        firstDate: DateTime(1900),
                        // Set a very distant past date
                        lastDate: DateTime(2100),
                        // Set a very distant future date
                        initialDatePickerMode: DatePickerMode.day,
                      );
                      if (pickedDate != null && pickedDate != currentTimeSinceDates[index]) {
                        setState(() {
                          currentTimeSinceDates[index] = pickedDate;
                          String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                          act6TimeSinceControllers.text = formDate;
                          _Act6TimeSinceControllers[index].text = formDate;
                        });
                      }
                    },
              icon: Icon(
                Icons.calendar_today,
              ),
            ),
            onTap: Type == "view"
                ? null
                : () async {
                    final DateTime? pickedDate = await showDatePicker(
                      context: context,
                      initialDate: currentTimeSinceDates[index],
                      firstDate: DateTime(1900),
                      // Set a very distant past date
                      lastDate: DateTime(2100),
                      // Set a very distant future date
                      initialDatePickerMode: DatePickerMode.day,
                    );
                    if (pickedDate != null && pickedDate != currentTimeSinceDates[index]) {
                      setState(() {
                        currentTimeSinceDates[index] = pickedDate;
                        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                        act6TimeSinceControllers.text = formDate;
                        _Act6TimeSinceControllers[index].text = formDate;
                      });
                    }
                  },
            controller: _Act6TimeSinceControllers[index],
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('timeSinceValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('noOfWorkersEmp'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act6NoWorkersControllers,
            textInputType: TextInputType.number,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('noOfWorkerValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('totalNoOfWorkers'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act6TotalNoWorkersControllers,
            textInputType: TextInputType.number,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('noOfMigrateWorkerValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          int actualIndex = _Act6SrNoControllers.indexOf(act6SrNoControllers);

                          if (Act6Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act6RuleIds[actualIndex] != 0) {
                            deleteAct_6(actualIndex);
                          }

                          act6ContractorPersonDetailsDetailDNo.removeAt(actualIndex);
                          act6Ids.removeAt(actualIndex);
                          act6RuleIds.removeAt(actualIndex);
                          _Act6SrNoControllers.removeAt(actualIndex);
                          _Act6NameContractorControllers.removeAt(actualIndex);
                          _Act6AddressControllers.removeAt(actualIndex);
                          _Act6DetailsWorkControllers.removeAt(actualIndex);
                          _Act6TimeSinceControllers.removeAt(actualIndex);
                          _Act6NoWorkersControllers.removeAt(actualIndex);
                          _Act6TotalNoWorkersControllers.removeAt(actualIndex);
                          Act6Widgets.removeAt(actualIndex);
                          act6GlobalKeys.removeAt(actualIndex);

                          for (var i = 0; i < _Act6SrNoControllers.length; i++) {
                            _Act6SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );
      Act6Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act7_1_1(
    int index,
    TextEditingController act7_1_1SrNoControllers,
    TextEditingController act7_1_1NameChildLabourControllers,
    TextEditingController act7_1_1AddressControllers,
    TextEditingController act7_1_1AgeControllers,
  ) async {
    setState(() {
      act7_1_1SrNoControllers.text = "${index + 1}";
      final newWidget = Column(
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('srNo')),
            controller: act7_1_1SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('nameOfChildLabour')),
            controller: act7_1_1NameChildLabourControllers,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('address')),
            controller: act7_1_1AddressControllers,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('ageChild')),
            controller: act7_1_1AgeControllers,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('imageOfChild')),
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('documentOfchild')),
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Align(
            alignment: Alignment.centerRight,
            child: AppCustomButton(
              loaderColor: AppStyles.naturalWhiteColor,
              width: 100,
              height: 44,
              endIcon: Icon(Icons.delete),
              background: AppStyles.primary500Color,
              text: translate('delete'),
              textColor: AppStyles.white,
              fontWeight: FontWeight.normal,
              fontSize: 14,
              onClicked: () {
                setState(() {
                  Act7_1_1Widgets.removeAt(Act7_1_1Widgets.length - 1);
                });
              },
            ),
          ),
        ],
      );
      Act7_1_1Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act7_1_2(
    int index,
    TextEditingController act7_1_2SrNoController,
    TextEditingController act7_1_2NameAdolescentLabourControllers,
    TextEditingController act7_1_2AddressController,
    TextEditingController act7_1_2AgeController,
  ) async {
    setState(() {
      act7_1_2SrNoController.text = "${index + 2}";

      final newWidget = Column(
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('srNo')),
            controller: act7_1_2SrNoController,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('nameofAdolescentLabour')),
            controller: act7_1_2NameAdolescentLabourControllers,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('address')),
            controller: act7_1_2AddressController,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: Text(translate('ageChild')),
            controller: act7_1_2AgeController,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Align(
            alignment: Alignment.centerRight,
            child: AppCustomButton(
              loaderColor: AppStyles.naturalWhiteColor,
              width: 100,
              height: 44,
              endIcon: Icon(Icons.delete),
              background: AppStyles.primary500Color,
              text: translate('delete'),
              textColor: AppStyles.white,
              fontWeight: FontWeight.normal,
              fontSize: 14,
              onClicked: () {
                setState(() {
                  Act7_1_2Widgets.removeAt(Act7_1_2Widgets.length - 1);
                });
              },
            ),
          ),
        ],
      );
    });
  }

  Future<void> Act7_1_3(
    int index,
    TextEditingController act7_1_3SrNoControllers,
    TextEditingController act7_1_3NameChildLabourControllers,
    TextEditingController act7_1_3AddressControllers,
    TextEditingController act7_1_3AgeControllers,
  ) async {
    setState(() {
      act7_1_3SrNoControllers.text = "${index + 1}";
      final _key7_5 = GlobalKey();

      act7_5GlobalKeys.add(_key7_5);
      final newWidget = Column(
        key: _key7_5,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_1_3SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('nameOfChildLabour'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_1_3NameChildLabourControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('nameOfChildLabourValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('address'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_1_3AddressControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('addValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('ageChild'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_1_3AgeControllers,
            textInputType: TextInputType.number,
            inputFormatters: [FilteringTextInputFormatter.digitsOnly],
            maxLength: 3,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('ageValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          int actualIndex = _Act7_1_3SrNoControllers.indexOf(act7_1_3SrNoControllers);

                          if (Act7_1_3Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act7_5RuleIds[actualIndex] != 0) {
                            deleteAct7_5(actualIndex);
                          }

                          act7_5Ids.removeAt(actualIndex);
                          act7_5WorkemenSrNo.removeAt(actualIndex);
                          act7_5RuleIds.removeAt(actualIndex);
                          _Act7_1_3SrNoControllers.removeAt(actualIndex);
                          _Act7_1_3NameChildLabourControllers.removeAt(actualIndex);
                          _Act7_1_3AddressControllers.removeAt(actualIndex);
                          _Act7_1_3AgeControllers.removeAt(actualIndex);
                          Act7_1_3Widgets.removeAt(actualIndex);
                          act7_5GlobalKeys.removeAt(actualIndex);

                          for (var i = 0; i < _Act7_1_3SrNoControllers.length; i++) {
                            _Act7_1_3SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );
      Act7_1_3Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act7_2_4(
    int index,
    TextEditingController act7_2_4SrNoControllers,
    TextEditingController act7_2_4NameAdolescentLabourControllers,
    TextEditingController act7_2_4AddressControllers,
    TextEditingController act7_2_4AgeControllers,
  ) async {
    setState(() {
      final _key7_4 = GlobalKey();

      act7_4GlobalKeys.add(_key7_4);
      act7_2_4SrNoControllers.text = "${index + 1}";
      final newWidget = Column(
        key: _key7_4,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_2_4SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('nameofAdolescentLabour'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_2_4NameAdolescentLabourControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('nameOfAdolescentValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('address'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_2_4AddressControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('addValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('ageChild'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_2_4AgeControllers,
            textInputType: TextInputType.number,
            inputFormatters: [FilteringTextInputFormatter.digitsOnly],
            maxLength: 3,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('ageValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          int actualIndex = _Act7_2_4SrNoControllers.indexOf(act7_2_4SrNoControllers);

                          if (Act7_2_4Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act7_4RuleIds[actualIndex] != 0) {
                            deleteAct7_4(actualIndex);
                          }

                          act7_4Ids.removeAt(actualIndex);
                          act7_4RuleIds.removeAt(actualIndex);
                          _Act7_2_4SrNoControllers.removeAt(actualIndex);
                          _Act7_2_4NameAdolescentLabourControllers.removeAt(actualIndex);
                          _Act7_2_4AddressControllers.removeAt(actualIndex);
                          _Act7_2_4AgeControllers.removeAt(actualIndex);
                          Act7_2_4Widgets.removeAt(actualIndex);
                          act7_4GlobalKeys.removeAt(actualIndex);

                          for (var i = 0; i < _Act7_2_4SrNoControllers.length; i++) {
                            _Act7_2_4SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );
      Act7_2_4Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act7_3(
    int index,
    TextEditingController act7_3SrNoControllers,
    TextEditingController act7_3NameAdolescentLabourControllers,
    TextEditingController act7_3AddressControllers,
    TextEditingController act7_3AgeControllers,
  ) async {
    setState(() {
      act7_3SrNoControllers.text = "${index + 1}";
      final _key7_3 = GlobalKey();

      act7_3GlobalKeys.add(_key7_3);
      final newWidget = Column(
        key: _key7_3,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_3SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('nameofAdolescentLabour'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_3NameAdolescentLabourControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('nameOfAdolescentValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('address'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_3AddressControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('addValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('ageChild'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act7_3AgeControllers,
            textInputType: TextInputType.number,
            inputFormatters: [FilteringTextInputFormatter.digitsOnly],
            maxLength: 3,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('ageValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          int actualIndex = _Act7_3SrNoControllers.indexOf(act7_3SrNoControllers);

                          if (Act7_3Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act7_3Ids[actualIndex] != 0) {
                            deleteAct7_3(actualIndex);
                          }
                          act7_3ACTIsBreakRule972DetailDNo.removeAt(actualIndex);
                          act7_3Ids.removeAt(actualIndex);
                          act7_3RuleIds.removeAt(actualIndex);
                          _Act7_3SrNoControllers.removeAt(actualIndex);
                          _Act7_3NameAdolescentLabourControllers.removeAt(actualIndex);
                          _Act7_3AddressControllers.removeAt(actualIndex);
                          _Act7_3AgeControllers.removeAt(actualIndex);
                          Act7_3Widgets.removeAt(actualIndex);
                          act7_3GlobalKeys.removeAt(actualIndex);

                          for (var i = 0; i < _Act7_3SrNoControllers.length; i++) {
                            _Act7_3SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );
      Act7_3Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act8_3(int index, TextEditingController act8_3SrNoControllers, TextEditingController act8_3NameControllers, TextEditingController act8_3DesgControllers, DateTime currentSuspensionDate,
      TextEditingController act8_3DateSuspensionControllers) async {
    setState(() {
      act8_3SrNoControllers.text = "${index + 1}";
      final _key8_3 = GlobalKey();

      act8_3GlobalKeys.add(_key8_3);
      final newWidget = Column(
        key: _key8_3,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act8_3SrNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('name'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act8_3NameControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('nameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('desg'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act8_3DesgControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('designValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('dateofSuspension'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            suffixIcon: IconButton(
              onPressed: Type == "view"
                  ? null
                  : () async {
                      final DateTime? pickedDate = await showDatePicker(
                        context: context,
                        initialDate: current_suspensionDates[index],
                        firstDate: DateTime(1900),
                        // Set a very distant past date
                        lastDate: DateTime.now(),
                        // Set a very distant future date
                        initialDatePickerMode: DatePickerMode.day,
                      );
                      if (pickedDate != null && pickedDate != current_suspensionDates[index]) {
                        setState(() {
                          current_suspensionDates[index] = pickedDate;
                          String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                          act8_3DateSuspensionControllers.text = formDate;
                          _Act8_3DateSuspensionControllers[index].text = formDate;
                        });
                      }
                    },
              icon: Icon(
                Icons.calendar_today,
              ),
            ),
            readOnly: true,
            onTap: Type == "view"
                ? null
                : () async {
                    final DateTime? pickedDate = await showDatePicker(
                      context: context,
                      initialDate: current_suspensionDates[index],
                      firstDate: DateTime(1900),
                      // Set a very distant past date
                      lastDate: DateTime.now(),
                      // Set a very distant future date
                      initialDatePickerMode: DatePickerMode.day,
                    );
                    if (pickedDate != null && pickedDate != current_suspensionDates[index]) {
                      setState(() {
                        current_suspensionDates[index] = pickedDate;
                        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                        act8_3DateSuspensionControllers.text = formDate;
                        _Act8_3DateSuspensionControllers[index].text = formDate;
                      });
                    }
                  },
            controller: _Act8_3DateSuspensionControllers[index],
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('dateOfSuspensionValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          int actualIndex = _Act8_3SrNoControllers.indexOf(act8_3SrNoControllers);

                          if (Act8_3Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act8_3RuleIds[actualIndex] != 0) {
                            deleteAct8_3(actualIndex);
                          }
                          act8_3dessrno.removeAt(actualIndex);
                          act8_3Ids.removeAt(actualIndex);
                          act8_3RuleIds.removeAt(actualIndex);
                          _Act8_3SrNoControllers.removeAt(actualIndex);
                          _Act8_3NameControllers.removeAt(actualIndex);
                          _Act8_3DesgControllers.removeAt(actualIndex);
                          _Act8_3DateSuspensionControllers.removeAt(actualIndex);
                          Act8_3Widgets.removeAt(actualIndex);
                          act8_3GlobalKeys.removeAt(actualIndex);

                          for (var i = 0; i < _Act8_3SrNoControllers.length; i++) {
                            _Act8_3SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );
      Act8_3Widgets.insert(index, newWidget);
    });
  }

  Future<void> Act11_1(
    int index,
    TextEditingController act11_1SrnNoControllers,
    TextEditingController act11_1NameControllers,
    TextEditingController act11_1DesgControllers,
    DateTime current_appointmentDate,
    TextEditingController act11_1DateAppoinmentControllers,
  ) async {
    setState(() {
      act11_1SrnNoControllers.text = "${index + 1}";
      final _key11_1 = GlobalKey();

      act11_1GlobalKeys.add(_key11_1);
      final newWidget = Column(
        key: _key11_1,
        children: [
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('srNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act11_1SrnNoControllers,
            readOnly: true,
            textInputType: TextInputType.text,
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            readOnly: Type == "view" ? true : false,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('name'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act11_1NameControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('nameValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('desg'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            controller: act11_1DesgControllers,
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('designValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          AppTextField(
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('dateOfAppointment'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            suffixIcon: IconButton(
              onPressed: Type == "view"
                  ? null
                  : () async {
                      final DateTime? pickedDate = await showDatePicker(
                        context: context,
                        initialDate: current_appointmentDates[index],
                        firstDate: DateTime(1900),
                        // Set a very distant past date
                        lastDate: DateTime.now(),
                        // Set a very distant future date
                        initialDatePickerMode: DatePickerMode.day,
                      );
                      if (pickedDate != null && pickedDate != current_appointmentDates[index]) {
                        setState(() {
                          current_appointmentDates[index] = pickedDate;
                          String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                          act11_1DateAppoinmentControllers.text = formDate;
                          _Act11_1DateAppointmentControllers[index].text = formDate;
                        });
                      }
                    },
              icon: Icon(
                Icons.calendar_today,
              ),
            ),
            readOnly: true,
            onTap: Type == "view"
                ? null
                : () async {
                    final DateTime? pickedDate = await showDatePicker(
                      context: context,
                      initialDate: current_appointmentDates[index],
                      firstDate: DateTime(1900),
                      // Set a very distant past date
                      lastDate: DateTime.now(),
                      // Set a very distant future date
                      initialDatePickerMode: DatePickerMode.day,
                    );
                    if (pickedDate != null && pickedDate != current_appointmentDates[index]) {
                      setState(() {
                        current_appointmentDates[index] = pickedDate;
                        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                        act11_1DateAppoinmentControllers.text = formDate;
                        _Act11_1DateAppointmentControllers[index].text = formDate;
                      });
                    }
                  },
            controller: _Act11_1DateAppointmentControllers[index],
            textInputType: TextInputType.text,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('dateOfAppointmentValidation');
              }
              return null;
            },
          ),
          const SizedBox(
            height: AppConstants.TEXT_FORM_FIELD_PADDING,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Align(
              alignment: Alignment.centerRight,
              child: AppCustomButton(
                loaderColor: AppStyles.naturalWhiteColor,
                width: 100,
                height: 44,
                endIcon: Icon(Icons.delete),
                background: AppStyles.primary500Color,
                text: translate('delete'),
                textColor: AppStyles.white,
                fontWeight: FontWeight.normal,
                fontSize: 14,
                onClicked: () {
                  FocusScope.of(context).unfocus();
                  Type == "view"
                      ? null
                      : setState(() {
                          int actualIndex = _Act11_1SrNoControllers.indexOf(act11_1SrnNoControllers);

                          if (Act11_1Widgets.length == 1) {
                            showAlertDialog(context, translate('workerDetailValidation'));
                            return;
                          }
                          if (act11_1RuleIds[actualIndex] != 0) {
                            deleteAct11_1(actualIndex);
                          }

                          act11_1Ids.removeAt(actualIndex);
                          act11_1EmployeesActNo.removeAt(actualIndex);
                          act11_1RuleIds.removeAt(actualIndex);
                          _Act11_1SrNoControllers.removeAt(actualIndex);
                          _Act11_1NameControllers.removeAt(actualIndex);
                          _Act11_1DesgControllers.removeAt(actualIndex);
                          _Act11_1DateAppointmentControllers.removeAt(actualIndex);
                          Act11_1Widgets.removeAt(actualIndex);
                          act11_1GlobalKeys.removeAt(actualIndex);

                          for (var i = 0; i < _Act11_1SrNoControllers.length; i++) {
                            _Act11_1SrNoControllers[i].text = (i + 1).toString();
                          }
                        });
                },
              ),
            ),
          ),
        ],
      );
      Act11_1Widgets.insert(index, newWidget);
    });
  }

  Widget _buildReportInfo() {
    return Column(
      children: <Widget>[
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('inspectionReportNo'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.text,
          controller: _reportNoController,
          readOnly: true,
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('inspectionDate'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.datetime,
          controller: _inspectionDateController,
          readOnly: true,
          validator: (text) {
            if (!(AppUtils.checkRequired(text))) {
              return translate('required');
            }
            return null;
          },
        ),
        // const SizedBox(
        //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
        // ),
        // Align(
        //   alignment: Alignment.centerLeft,
        //   child: Text(
        //     translate('district'),
        //     style: AppStyles.textInputStyle,
        //   ),
        // ),
        // const SizedBox(
        //   height: AppConstants.PADDING_8,
        // ),
        // DropdownButtonFormField(
        //   hint: new Text(translate('select')),
        //   value: selectedReportDistrict,
        //   onChanged: (dynamic newValue) {
        //     setState(() {
        //       selectedReportDistrict = newValue!;
        //       selectedReportTaluka = null;
        //       ReportTalukatList = [];
        //       GetTalukaList(selectedReportDistrict);
        //     });
        //   },
        //   validator: (value) {
        //     if (value == null) {
        //       return 'Please Select District';
        //     } else {
        //       return null;
        //     }
        //   },
        //   decoration: InputDecoration(
        //     border: OutlineInputBorder(
        //       borderRadius: BorderRadius.circular(10),
        //     ),
        //     enabledBorder: OutlineInputBorder(
        //       borderRadius: BorderRadius.circular(10),
        //       borderSide: BorderSide(color: Colors.grey), // Customize the border color
        //     ),
        //     focusedBorder: OutlineInputBorder(
        //       borderRadius: BorderRadius.circular(10),
        //       borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
        //     ),
        //   ),
        //   isExpanded: true,
        //   items: ReportDistrictList.map(
        //     (map) {
        //       return DropdownMenuItem<int?>(
        //         value: map.DataValue,
        //         child: Text(
        //           map.DisplayValue ?? "",
        //         ),
        //       );
        //     },
        //   ).toList(),
        // ),
        // const SizedBox(
        //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
        // ),
        // Align(
        //   alignment: Alignment.centerLeft,
        //   child: Text(
        //     translate('taluka'),
        //     style: AppStyles.textInputStyle,
        //   ),
        // ),
        // const SizedBox(
        //   height: AppConstants.PADDING_8,
        // ),
        // DropdownButtonFormField(
        //   hint: new Text(translate('select')),
        //   value: selectedReportTaluka,
        //   onChanged: (dynamic newValue) {
        //     setState(() {
        //       selectedReportTaluka = newValue!;
        //     });
        //   },
        //   validator: (value) {
        //     if (value == null) {
        //       return 'Please Select Taluka';
        //     } else {
        //       return null;
        //     }
        //   },
        //   decoration: InputDecoration(
        //     border: OutlineInputBorder(
        //       borderRadius: BorderRadius.circular(10),
        //     ),
        //     enabledBorder: OutlineInputBorder(
        //       borderRadius: BorderRadius.circular(10),
        //       borderSide: BorderSide(color: Colors.grey), // Customize the border color
        //     ),
        //     focusedBorder: OutlineInputBorder(
        //       borderRadius: BorderRadius.circular(10),
        //       borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
        //     ),
        //   ),
        //   isExpanded: true,
        //   items: ReportTalukatList.map(
        //     (map) {
        //       return DropdownMenuItem<int?>(
        //         value: map.DataValue,
        //         child: Text(
        //           map.DisplayValue ?? "",
        //         ),
        //       );
        //     },
        //   ).toList(),
        // ),
        // const SizedBox(
        //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
        // ),
        // AppTextField(
        //   textInputAction: TextInputAction.next,
        //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
        //   title: translate('area'),
        //   textInputType: TextInputType.text,
        //   controller: _areaController,
        //   validator: (text) {
        //     if (!(AppUtils.checkRequired(text))) {
        //       return translate('areaValidation');
        //     }
        //     return null;
        //   },
        // ),
        // const SizedBox(
        //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
        // ),
        // AppTextField(
        //   textInputAction: TextInputAction.next,
        //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
        //   title: translate('pinCode'),
        //   textInputType: TextInputType.number,
        //   controller: _pinCodeController,
        //   maxLength: 6,
        //   validator: (text) {
        //     if (text?.length != 6) {
        //       return translate('pinCodeLengthError'); // Customize the error message
        //     }
        //     return null;
        //   },
        // ),
      ],
    );
  }

  Widget _buildInspectionType() {
    return Column(
      children: <Widget>[
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('inspectionType'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _dropDownFocusNode1,
          child: DropdownButtonFormField(
            focusNode: _dropDownFocusNode1,
            hint: new Text(translate('select')),
            value: dropdownValue,
            onChanged: Type == "view"
                ? null
                : (dynamic newValue) {
                    setState(() {
                      _IFSCNoBaseController.text = "";
                      _nameOfComplain.text = "";
                      _subjectOfComplain.text = "";
                      _dateOfComplain.text = "";
                      dropdownValue = newValue!;
                      if (dropdownValue == 1) {
                        isOnline = true;
                        isComplain = false;
                        isUnScheduled = false;
                        _dateOfComplain.text = "";
                      } else if (dropdownValue == 2) {
                        isOnline = false;
                        isComplain = true;
                        isUnScheduled = false;
                      } else if (dropdownValue == 3) {
                        isOnline = false;
                        isComplain = false;
                        isUnScheduled = true;
                        _dateOfComplain.text = "";
                      }
                    });
                  },
            validator: (value) {
              if (value == null) {
                return 'Please Select InspectionType';
              } else {
                return null;
              }
            },
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
                borderSide: BorderSide(color: Colors.grey), // Customize the border color
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
                borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
              ),
            ),
            isExpanded: true,
            items: EstablishList.map(
              (map) {
                return DropdownMenuItem<dynamic>(
                  value: map.DataValue,
                  child: Text(
                    map.DisplayValue ?? "",
                  ),
                );
              },
            ).toList(),
          ),
        ),
        Visibility(
            visible: isOnline,
            child: Column(
              children: [
                const SizedBox(
                  height: AppConstants.TEXT_FORM_FIELD_PADDING,
                ),
                EnsureVisibleWhenFocused(
                  focusNode: _textFormFieldFocusNode1,
                  child: AppTextField(
                    readOnly: Type == "view" ? true : false,
                    focusNode: _textFormFieldFocusNode1,
                    contentPadding: EdgeInsets.symmetric(vertical: 30.0, horizontal: 15.0),
                    textInputAction: TextInputAction.next,
                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                    title: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('onlineApplicationNo'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          TextSpan(
                            text: ' *', // Suffix text
                            style: TextStyle(
                              color: Colors.red, // Customize the suffix text color
                            ),
                          ),
                        ],
                      ),
                    ),
                    textInputType: TextInputType.multiline,
                    controller: _IFSCNoBaseController,
                    validator: (text) {
                      if (!(AppUtils.checkRequired(text))) {
                        return 'Please Enter Online Application Number';
                      }
                      return null;
                    },
                  ),
                ),
              ],
            )),
        Visibility(
            visible: isComplain,
            child: Column(
              children: [
                const SizedBox(
                  height: AppConstants.TEXT_FORM_FIELD_PADDING,
                ),
                EnsureVisibleWhenFocused(
                  focusNode: _textFormFieldFocusNode2,
                  child: AppTextField(
                    readOnly: Type == "view" ? true : false,
                    focusNode: _textFormFieldFocusNode2,
                    textInputAction: TextInputAction.next,
                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                    title: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('complainApplicationNo'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          TextSpan(
                            text: ' *', // Suffix text
                            style: TextStyle(
                              color: Colors.red, // Customize the suffix text color
                            ),
                          ),
                        ],
                      ),
                    ),
                    textInputType: TextInputType.text,
                    controller: _IFSCNoBaseController,
                    validator: (text) {
                      if (!(AppUtils.checkRequired(text))) {
                        return 'Please Enter Complaint Application Number';
                      }
                      return null;
                    },
                  ),
                ),
                const SizedBox(
                  height: AppConstants.TEXT_FORM_FIELD_PADDING,
                ),
                EnsureVisibleWhenFocused(
                  focusNode: _textFormFieldFocusNodeName,
                  child: AppTextField(
                    readOnly: Type == "view" ? true : false,
                    focusNode: _textFormFieldFocusNodeName,
                    textInputAction: TextInputAction.next,
                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                    title: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('nameOfComplain'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          TextSpan(
                            text: ' *', // Suffix text
                            style: TextStyle(
                              color: Colors.red, // Customize the suffix text color
                            ),
                          ),
                        ],
                      ),
                    ),
                    textInputType: TextInputType.text,
                    controller: _nameOfComplain,
                    validator: (text) {
                      if (!(AppUtils.checkRequired(text))) {
                        return 'Please Enter Name Of Complainant';
                      }
                      return null;
                    },
                  ),
                ),
                const SizedBox(
                  height: AppConstants.TEXT_FORM_FIELD_PADDING,
                ),
                EnsureVisibleWhenFocused(
                  focusNode: _textFormFieldFocusNode3,
                  child: AppTextField(
                    readOnly: Type == "view" ? true : false,
                    focusNode: _textFormFieldFocusNode3,
                    textInputAction: TextInputAction.next,
                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                    title: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('subjectOfComplain'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          TextSpan(
                            text: ' *', // Suffix text
                            style: TextStyle(
                              color: Colors.red, // Customize the suffix text color
                            ),
                          ),
                        ],
                      ),
                    ),
                    textInputType: TextInputType.text,
                    controller: _subjectOfComplain,
                    validator: (text) {
                      if (!(AppUtils.checkRequired(text))) {
                        return 'Please Enter Subject Of Complaint';
                      }
                      return null;
                    },
                  ),
                ),
                const SizedBox(
                  height: AppConstants.TEXT_FORM_FIELD_PADDING,
                ),
                EnsureVisibleWhenFocused(
                  focusNode: _textFormFieldFocusNode4,
                  child: AppTextField(
                    focusNode: _textFormFieldFocusNode4,
                    textInputAction: TextInputAction.next,
                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                    title: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: translate('dateOfComplain'),
                            style: TextStyle(
                              color: Colors.black,
                              // Customize the title text color
                              fontSize: 16, // Customize the title text size
                            ),
                          ),
                          TextSpan(
                            text: ' *', // Suffix text
                            style: TextStyle(
                              color: Colors.red, // Customize the suffix text color
                            ),
                          ),
                        ],
                      ),
                    ),
                    textInputType: TextInputType.text,
                    readOnly: true,
                    suffixIcon: IconButton(
                      onPressed: Type == "view" ? null : () => _select_dateOfComplain(context),
                      icon: Icon(
                        Icons.calendar_today,
                      ),
                    ),
                    onTap: Type == "view" ? null : () => _select_dateOfComplain(context),
                    controller: _dateOfComplain,
                    validator: (text) {
                      if (!(AppUtils.checkRequired(text))) {
                        return 'Please Enter Date Of Complaint';
                      }
                      return null;
                    },
                  ),
                ),
              ],
            )),
        // Visibility(
        //     visible: isUnScheduled,
        //     child: Column(
        //       children: [
        //         const SizedBox(
        //           height: AppConstants.TEXT_FORM_FIELD_PADDING,
        //         ),
        //         AppTextField(
        //           textInputAction: TextInputAction.next,
        //           titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
        //           title: translate('unscheduledApplicationNo'),
        //           textInputType: TextInputType.text,
        //           controller: _IFSCNoBaseController,
        //           validator: (text) {
        //             if (!(AppUtils.checkRequired(text))) {
        //               return translate('required');
        //             }
        //             return null;
        //           },
        //         ),
        //       ],
        //     ))
      ],
    );
  }

  Widget _buildEstablishment() {
    return Column(
      children: <Widget>[
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _textFormFieldFocusNode5,
          child: AppTextField(
            readOnly: Type == "view" ? true : false,
            focusNode: _textFormFieldFocusNode5,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('establishmentName'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.text,
            controller: _establishmentNameController,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('EstNameValidation');
              }
              return null;
            },
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _textFormFieldFocusNode6,
          child: AppTextField(
            readOnly: Type == "view" ? true : false,
            focusNode: _textFormFieldFocusNode6,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('permanentAddress'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.text,
            controller: _permanentAddressController,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('addressValidation');
              }
              return null;
            },
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('district'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _dropDownFocusNode2,
          child: DropdownButtonFormField(
            focusNode: _dropDownFocusNode2,
            hint: Text(translate('select')),
            value: selectedDistrict,
            onChanged: null,
            // onChanged: (dynamic newValue) {
            //   setState(() {
            //     selectedDistrict = newValue!;
            //     selectedTaluka = null;
            //     EstablishTalukaList = [];
            //     authKey();
            //     GetEstablishTalukaList(selectedDistrict);
            //   });
            // },
            validator: (value) {
              if (value == null) {
                return 'Please Select District';
              } else {
                return null;
              }
            },
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
                borderSide: BorderSide(color: Colors.grey), // Customize the border color
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
                borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
              ),
            ),
            isExpanded: true,
            items: EstablishDistrictList.map(
              (map) {
                return DropdownMenuItem<dynamic>(
                  value: map.DataValue,
                  child: Text(map.DisplayValue ?? ""),
                );
              },
            ).toList(),
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('taluka'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _dropDownFocusNode3,
          child: DropdownButtonFormField(
            focusNode: _dropDownFocusNode3,
            hint: new Text(translate('select')),
            value: selectedTaluka,
            onChanged: Type == "view"
                ? null
                : (dynamic newValue) {
                    setState(() {
                      selectedTaluka = newValue!;
                    });
                  },
            validator: (value) {
              if (value == null) {
                return 'Please Select Taluka';
              } else {
                return null;
              }
            },
            isExpanded: true,
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
                borderSide: BorderSide(color: Colors.grey), // Customize the border color
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
                borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
              ),
            ),
            items: EstablishTalukaList.map(
              (map) {
                return DropdownMenuItem<dynamic>(
                  value: map.DataValue,
                  child: Text(
                    map.DisplayValue ?? "",
                  ),
                );
              },
            ).toList(),
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          readOnly: Type == "view" ? true : false,
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('Area'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                // TextSpan(
                //   text: ' *', // Suffix text
                //   style: TextStyle(
                //     color: Colors.red, // Customize the suffix text color
                //   ),
                // ),
              ],
            ),
          ),
          textInputType: TextInputType.text,
          controller: _est_area_Controller,
          // validator: (text) {
          //   if (!(AppUtils.checkRequired(text))) {
          //     return translate('areaValidation');
          //   }
          //   return null;
          // },
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _textFormFieldFocusNode8,
          child: AppTextField(
            readOnly: Type == "view" ? true : false,
            focusNode: _textFormFieldFocusNode8,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('pinCode'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.number,
            inputFormatters: [FilteringTextInputFormatter.digitsOnly],
            controller: _est_pincode_Controller,
            maxLength: 6,
            // validator: (text) {
            //   if (text?.length != 6) {
            //     return translate('pinCodeLengthError'); // Customize the error message
            //   }
            //   return null;
            // },
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('registeredUnder'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
              ],
            ),
          ),
        ),
        Container(
            decoration: ShapeDecoration(
              shape: RoundedRectangleBorder(
                side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                borderRadius: BorderRadius.all(Radius.circular(12.0)),
              ),
            ),
            child: Column(
              children: [
                CheckboxListTile(
                  title: Text(translate('estAct1')),
                  value: IsFactoriesAct,
                  onChanged: Type == "view"
                      ? null
                      : (newValue) {
                          setState(() {
                            IsFactoriesAct = newValue!;
                          });
                        },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                ),
                CheckboxListTile(
                  title: Text(translate('estAct2')),
                  value: IsTrustAct,
                  onChanged: Type == "view"
                      ? null
                      : (newValue) {
                          setState(() {
                            IsTrustAct = newValue!;
                          });
                        },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                ),
                CheckboxListTile(
                  title: Text(translate('estAct3')),
                  value: IsEstablishmentAct,
                  onChanged: Type == "view"
                      ? null
                      : (newValue) {
                          setState(() {
                            IsEstablishmentAct = newValue!;
                          });
                        },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                ),
                CheckboxListTile(
                  title: Text(translate('estAct4')),
                  value: IsLabourAct,
                  onChanged: Type == "view"
                      ? null
                      : (newValue) {
                          setState(() {
                            IsLabourAct = newValue!;
                          });
                        },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                ),
                CheckboxListTile(
                  title: Text(translate('estAct5')),
                  value: IsSocietyAct,
                  onChanged: Type == "view"
                      ? null
                      : (newValue) {
                          setState(() {
                            IsSocietyAct = newValue!;
                          });
                        },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                ),
                CheckboxListTile(
                  title: Text(translate('estAct6')),
                  value: IsTMTWAct1961Grul1965,
                  onChanged: Type == "view"
                      ? null
                      : (newValue) {
                          setState(() {
                            IsTMTWAct1961Grul1965 = newValue!;
                          });
                        },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                ),
                CheckboxListTile(
                  title: Text(translate('estAct7')),
                  value: IsRegistrationUnderGST,
                  onChanged: Type == "view"
                      ? null
                      : (newValue) {
                          setState(() {
                            IsRegistrationUnderGST = newValue!;
                          });
                        },
                  controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                ),
              ],
            )),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('noneOfAbove'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        Row(
          children: [
            Expanded(
              flex: 1,
              child: RadioListTile(
                title: Text("Yes"),
                value: 1,
                groupValue: registerUnder,
                onChanged: (value) {
                  Type == "view"
                      ? null
                      : setState(() {
                          registerUnder = value;
                        });
                },
              ),
            ),
            Expanded(
              flex: 1,
              child: RadioListTile(
                title: Text("No"),
                value: 0,
                groupValue: registerUnder,
                onChanged: (value) {
                  Type == "view"
                      ? null
                      : setState(() {
                          registerUnder = value;
                        });
                },
              ),
            ),
          ],
        ),
        const SizedBox(
          height: AppConstants.DEFAULT_CONTAINER_PADDING,
        ),
        Visibility(
          visible: registerUnder == 0 ? false : true,
          child: Padding(
            padding: EdgeInsets.only(bottom: AppConstants.TEXT_FORM_FIELD_PADDING),
            child: EnsureVisibleWhenFocused(
              focusNode: _textFormFieldFocusNode10,
              child: AppTextField(
                readOnly: Type == "view" ? true : false,
                focusNode: _textFormFieldFocusNode10,
                textInputAction: TextInputAction.next,
                titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                // title: Text(translate('regUnderNoneOfAbove')),
                title: RichText(
                  text: TextSpan(
                    children: [
                      TextSpan(
                        text: translate('regUnderNoneOfAbove'),
                        style: TextStyle(
                          color: Colors.black,
                          // Customize the title text color
                          fontSize: 16, // Customize the title text size
                        ),
                      ),
                      TextSpan(
                        text: ' *', // Suffix text
                        style: TextStyle(
                          color: Colors.red, // Customize the suffix text color
                        ),
                      ),
                    ],
                  ),
                ),
                textInputType: TextInputType.text,
                controller: _regUnderNoneOfAboveController,
                validator: (text) {
                  if (!(AppUtils.checkRequired(text))) {
                    return translate('regNoValidation');
                  }
                  return null;
                },
              ),
            ),
          ),
        ),
        EnsureVisibleWhenFocused(
          focusNode: _textFormFieldFocusNode9,
          child: AppTextField(
            readOnly: Type == "view" ? true : false,
            focusNode: _textFormFieldFocusNode9,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('regNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  (registerUnder == 0 || IsFactoriesAct || IsEstablishmentAct || IsLabourAct || IsRegistrationUnderGST || IsSocietyAct || IsTrustAct || IsTMTWAct1961Grul1965)
                      ? TextSpan(
                          text: ' *', // Suffix text
                          style: TextStyle(
                            color: Colors.red, // Customize the suffix text color
                          ),
                        )
                      : TextSpan(),
                ],
              ),
            ),
            textInputType: TextInputType.text,
            controller: _regNo_Controller,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('regNoValidation');
              }
              return null;
            },
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('licenseProof'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Row(
              children: [
                Expanded(
                  flex: 1,
                  child: Align(
                    alignment: Alignment.centerLeft,
                    child: AppCustomButton(
                      loaderColor: AppStyles.naturalWhiteColor,
                      width: 110,
                      background: AppStyles.greyButtonColor,
                      text: translate('chooseFile'),
                      textColor: AppStyles.black,
                      fontWeight: FontWeight.normal,
                      fontSize: 12,
                      onClicked: () {
                        Type == "view"
                            ? null
                            : showModalBottomSheet<void>(
                                context: context,
                                builder: (BuildContext context) {
                                  return Container(
                                    child: Wrap(
                                      children: <Widget>[
                                        ListTile(
                                          leading: Icon(Icons.camera),
                                          title: Text('Open Camera'),
                                          onTap: () {
                                            _openCamera("LicenseProofDoc");
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                        ListTile(
                                          leading: Icon(Icons.photo),
                                          title: Text('Open Gallery'),
                                          onTap: () {
                                            _openGallery("LicenseProofDoc");
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                        ListTile(
                                          leading: Icon(Icons.folder),
                                          title: Text('Open Document Picker'),
                                          onTap: () {
                                            _openDocumentPicker("LicenseProofDoc");
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                      ],
                                    ),
                                  );
                                },
                              );
                        setState(() {});
                      },
                    ),
                  ),
                ),
                if (LicensepProofDoc.isNotEmpty)
                  Expanded(
                    flex: 1,
                    child: Text(
                      LicensepProofDoc,
                      maxLines: 2,
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                if (fileLicenseProof != null && fileLicenseProof!.path.isNotEmpty && !isAppOnline)
                  Expanded(
                    flex: 1,
                    child: Text(
                      fileLicenseProof!.path.split('/').last,
                      maxLines: 2,
                      style: AppStyles.textInputStyle,
                    ),
                  ),
              ],
            ),
          ),
        ),
        if ((LicensepProofCID.isNotEmpty) && (LicensepProofDoc.isNotEmpty))
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              onPressed: () {
                downloadFile(LicensepProofDoc, LicensepProofCID);
              },
              child: Text('Download'),
            ),
          ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('registrationProof'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Row(
              children: [
                Expanded(
                  flex: 1,
                  child: Align(
                    alignment: Alignment.centerLeft,
                    child: AppCustomButton(
                      loaderColor: AppStyles.naturalWhiteColor,
                      width: 110,
                      background: AppStyles.greyButtonColor,
                      text: translate('chooseFile'),
                      textColor: AppStyles.black,
                      fontWeight: FontWeight.normal,
                      fontSize: 12,
                      onClicked: () {
                        Type == "view"
                            ? null
                            : showModalBottomSheet<void>(
                                context: context,
                                builder: (BuildContext context) {
                                  return Container(
                                    child: Wrap(
                                      children: <Widget>[
                                        ListTile(
                                          leading: Icon(Icons.camera),
                                          title: Text('Open Camera'),
                                          onTap: () {
                                            _openCamera("RegProofDoc");
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                        ListTile(
                                          leading: Icon(Icons.photo),
                                          title: Text('Open Gallery'),
                                          onTap: () {
                                            _openGallery("RegProofDoc");
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                        ListTile(
                                          leading: Icon(Icons.folder),
                                          title: Text('Open Document Picker'),
                                          onTap: () {
                                            _openDocumentPicker("RegProofDoc");
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                      ],
                                    ),
                                  );
                                },
                              );
                      },
                    ),
                  ),
                ),
                if (RegistrationDoc.isNotEmpty)
                  Expanded(
                    flex: 1,
                    child: Text(
                      RegistrationDoc,
                      maxLines: 2,
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                if (fileRegProof != null && fileRegProof!.path.isNotEmpty && !isAppOnline)
                  Expanded(
                    flex: 1,
                    child: Text(
                      fileRegProof!.path.split('/').last,
                      maxLines: 2,
                      style: AppStyles.textInputStyle,
                    ),
                  ),
              ],
            ),
          ),
        ),
        if ((RegistrationDoc.isNotEmpty) && (RegistrationCID.isNotEmpty))
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              onPressed: () {
                downloadFile(RegistrationDoc, RegistrationCID);
              },
              child: Text('Download'),
            ),
          ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('registrationDate'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.text,
          readOnly: true,
          suffixIcon: IconButton(
            onPressed: Type == "view" ? null : () => _selectRegDate(context),
            icon: Icon(
              Icons.calendar_today,
            ),
          ),
          onTap: Type == "view" ? null : () => _selectRegDate(context),
          controller: _registrationDateController,
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('typeofIndustry'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        // EnsureVisibleWhenFocused(
        //   focusNode: _dropDownFocusNode4,
        //   child: DropdownButtonFormField(
        //     focusNode: _dropDownFocusNode4,
        //     hint: new Text(translate('select')),
        //     value: selectedIndustory,
        //     onChanged: Type == "view"
        //         ? null
        //         : (dynamic newValue) {
        //             setState(() {
        //               selectedIndustory = newValue!;
        //             });
        //           },
        //     validator: (value) {
        //       if (value == null) {
        //         return 'Please Select Type of Industry';
        //       } else {
        //         return null;
        //       }
        //     },
        //     isExpanded: true,
        //     decoration: InputDecoration(
        //       border: OutlineInputBorder(
        //         borderRadius: BorderRadius.circular(10),
        //       ),
        //       enabledBorder: OutlineInputBorder(
        //         borderRadius: BorderRadius.circular(10),
        //         borderSide: BorderSide(color: Colors.grey), // Customize the border color
        //       ),
        //       focusedBorder: OutlineInputBorder(
        //         borderRadius: BorderRadius.circular(10),
        //         borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
        //       ),
        //       isDense: true,
        //     ),
        //     items: EstablishTypeOfIndustryList.map(
        //       (map) {
        //         return DropdownMenuItem<dynamic>(
        //           value: map.DataValue,
        //           child: Text(
        //             map.DisplayValue ?? "",
        //           ),
        //         );
        //       },
        //     ).toList(),
        //   ),
        // ),
        EnsureVisibleWhenFocused(
          focusNode: _dropDownFocusNode4,
          child: CustomDropdown(
            hintText: translate('select'),
            focusNode: _dropDownFocusNode4,
            items: EstablishTypeOfIndustryList,
            value: selectedIndustory,
            onChanged: (dynamic value) {
              setState(() {
                selectedIndustory = value;
                print("selectedIndustory---$selectedIndustory");
              });
            },
            validator: (value) {
              if (selectedIndustory == null) {
                return 'Please Select Type of Industry';
              } else {
                return null;
              }
            },
          ),
        ),

        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Visibility(
          visible: selectedIndustory == 57 ? true : false,
          child: Column(
            children: [
              EnsureVisibleWhenFocused(
                focusNode: _textFormFieldFocusNodeOther,
                child: AppTextField(
                  focusNode: _textFormFieldFocusNodeOther,
                  readOnly: Type == "view" ? true : false,
                  textInputAction: TextInputAction.next,
                  titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                  title: RichText(
                    text: TextSpan(
                      children: [
                        TextSpan(
                          text: translate('Other'),
                          style: TextStyle(
                            color: Colors.black, // Customize the title text color
                            fontSize: 16, // Customize the title text size
                          ),
                        ),
                        TextSpan(
                          text: ' *', // Suffix text
                          style: TextStyle(
                            color: Colors.red, // Customize the suffix text color
                          ),
                        ),
                      ],
                    ),
                  ),
                  textInputType: TextInputType.text,
                  controller: _EstOtherController,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please Enter Other(Specify)';
                    } else {
                      return null;
                    }
                  },
                ),
              ),
              const SizedBox(
                height: AppConstants.TEXT_FORM_FIELD_PADDING,
              ),
            ],
          ),
        ),
        AppTextField(
          readOnly: Type == "view" ? true : false,
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('maleWorker'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.number,
          inputFormatters: [FilteringTextInputFormatter.digitsOnly],
          controller: _maleWorkerController,
          validator: (value) {
            if (value == null) {
              return 'Please Enter Male Worker';
            } else {
              return null;
            }
          },
          onChanged: (_) => updateTotal(),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          readOnly: Type == "view" ? true : false,
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('femaleWorker'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.number,
          inputFormatters: [FilteringTextInputFormatter.digitsOnly],
          controller: _femaleWorkerController,
          validator: (value) {
            if (value == null) {
              return 'Please Enter FeMale Worker';
            } else {
              return null;
            }
          },
          onChanged: (_) => updateTotal(),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          readOnly: Type == "view" ? true : false,
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('transgenderWorker'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.number,
          inputFormatters: [FilteringTextInputFormatter.digitsOnly],
          controller: _transgenderWorkerController,
          validator: (value) {
            if (value == null) {
              return 'Please Enter Transgender Worker';
            } else {
              return null;
            }
          },
          onChanged: (_) => updateTotal(),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('totalWorker'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.number,
          inputFormatters: [FilteringTextInputFormatter.digitsOnly],
          controller: _totalWorkerController,
          readOnly: true,
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _textFormFieldFocusNode11,
          child: AppTextField(
            readOnly: Type == "view" ? true : false,
            focusNode: _textFormFieldFocusNode11,
            contentPadding: EdgeInsets.symmetric(vertical: 30.0, horizontal: 15.0),
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('authorizedPerson'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.text,
            controller: _authorizedPersonController,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('managerValidation');
              }
              return null;
            },
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Column(
          children: <Widget>[
            EnsureVisibleWhenFocused(
              focusNode: _textFormFieldFocusNode12,
              child: AppTextField(
                readOnly: Type == "view" ? true : false,
                focusNode: _textFormFieldFocusNode12,
                textInputAction: TextInputAction.next,
                // contentPadding: EdgeInsets.symmetric(vertical: 30.0, horizontal: 15.0),
                titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                textInputType: TextInputType.text,
                title: RichText(
                  text: TextSpan(
                    children: [
                      TextSpan(
                        text: translate('authorizedPersonEmail'),
                        style: TextStyle(
                          color: Colors.black, // Customize the title text color
                          fontSize: 16, // Customize the title text size
                        ),
                      ),
                      TextSpan(
                        text: ' *', // Suffix text
                        style: TextStyle(
                          color: Colors.red, // Customize the suffix text color
                        ),
                      ),
                    ],
                  ),
                ),

                controller: _authorizedPersonEmailController,
                onChanged: (String val) {
                  setState(() {
                    if (val != lastValue) {
                      lastValue = val;
                      if (val.endsWith(' ') && validateEmail(val.trim())) {
                        if (!emails.contains(val.trim())) {
                          String newEmailsString = val.trim();
                          List<String> newEmails = newEmailsString.split(',');
                          emails.addAll(newEmails);
                        }
                        _authorizedPersonEmailController.clear();
                      } else if (val.endsWith(' ') && !validateEmail(val.trim())) {
                        _authorizedPersonEmailController.clear();
                      }
                    }
                  });
                },
                // onTapOutside: (PointerDownEvent e) {
                //   updateEmails();
                // },
                onEditingComplete: () {
                  updateEmails();
                },
                validator: (text) {
                  if (emails.isEmpty) {
                    if (text == null || text.isEmpty) {
                      return translate('emailValidation');
                    } else if (!validateEmail(text)) {
                      return translate('emailInvalid');
                    }
                  }
                  return null;
                },
              ),
            ),
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Column(
                children: <Widget>[
                  ...emails
                      .map(
                        (email) => email.isNotEmpty
                            ? Chip(
                                avatar: CircleAvatar(
                                  backgroundColor: AppStyles.primary500Color,
                                  child: Text(
                                    email.substring(0, 1),
                                    style: TextStyle(color: Colors.white),
                                  ),
                                ),
                                labelPadding: EdgeInsets.all(4),
                                backgroundColor: Colors.white,
                                label: Text(
                                  email,
                                  style: TextStyle(fontSize: 16, color: AppStyles.primary500Color),
                                ),
                                onDeleted: Type == "view"
                                    ? null
                                    : () => {
                                          setState(() {
                                            emails.removeWhere((element) => email == element);
                                          })
                                        },
                              )
                            : Container(),
                      )
                      .toList(),
                ],
              ),
            ),
          ],
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _textFormFieldFocusNode13,
          child: AppTextField(
            readOnly: Type == "view" ? true : false,
            focusNode: _textFormFieldFocusNode13,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('authorizedPersonNo'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.phone,
            inputFormatters: [FilteringTextInputFormatter.digitsOnly],
            controller: _authorizedPersonNoController,
            maxLength: 10,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('contactValidation');
              } else if (text?.length != 10) {
                return 'Mobile Number must be of 10 digit';
              }
              return null;
            },
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        EnsureVisibleWhenFocused(
          focusNode: _textFormFieldFocusNode14,
          child: AppTextField(
            readOnly: Type == "view" ? true : false,
            focusNode: _textFormFieldFocusNode14,
            textInputAction: TextInputAction.next,
            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
            title: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: translate('authorizedPersonDesign'),
                    style: TextStyle(
                      color: Colors.black, // Customize the title text color
                      fontSize: 16, // Customize the title text size
                    ),
                  ),
                  TextSpan(
                    text: ' *', // Suffix text
                    style: TextStyle(
                      color: Colors.red, // Customize the suffix text color
                    ),
                  ),
                ],
              ),
            ),
            textInputType: TextInputType.text,
            controller: _authorizedPersonDesignController,
            validator: (text) {
              if (!(AppUtils.checkRequired(text))) {
                return translate('authdesignValidation');
              }
              return null;
            },
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
      ],
    );
  }

  void createNewEmployee() {
    employeeIds.clear();
    employerNameControllers.clear();
    empPermanentAddressControllers.clear();
    empDesignation.clear();
    empAgeControllers.clear();

    employerNameControllers.add(TextEditingController());
    empPermanentAddressControllers.add(TextEditingController());
    otherNoteControllers.add(TextEditingController());
    empDesignation.add(0);
    employeeIds.add(0);
    empAgeControllers.add(TextEditingController());

    final newIndex = employerWidgets.length;
    addEmployerDetails(
        employerWidgets.length, employerNameControllers[newIndex], empPermanentAddressControllers[newIndex], otherNoteControllers[newIndex], empDesignation[newIndex], empAgeControllers[newIndex]);
  }

  Widget _buildEmployerDetails(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (employerWidgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createNewEmployee();
      }
    });
    return Container(
      margin: EdgeInsets.symmetric(vertical: 10),
      padding: EdgeInsets.all(AppConstants.PADDING_8),
      decoration: ShapeDecoration(
        shape: RoundedRectangleBorder(
          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
          borderRadius: BorderRadius.all(Radius.circular(12.0)),
        ),
      ),
      child: Column(
        children: <Widget>[
          Form(
            key: _formEmployeeKey,
            child: ListView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              itemCount: employerWidgets.length,
              itemBuilder: (context, index) {
                // Dynamically added widgets
                return employerWidgets[index];
              },
            ),
          ),
          const SizedBox(
            height: AppConstants.PADDING_8,
          ),
          Visibility(
            visible: Type == "view" ? false : true,
            child: Row(
              children: [
                // Expanded(
                //   child: AppCustomButton(
                //     loaderColor: AppStyles.naturalWhiteColor,
                //     width: 100,
                //     height: 44,
                //     background: AppStyles.primary500Color,
                //     text: translate('save'),
                //     textColor: AppStyles.white,
                //     fontWeight: FontWeight.normal,
                //     fontSize: 14,
                //     onClicked: Type == "view"
                //         ? null
                //         : () {
                //             FocusScope.of(context).unfocus();
                //             final _form = _formEmployeeKey.currentState!;
                //             if (_form.validate()) {
                //               validateStep4();
                //             }
                //           },
                //   ),
                // ),
                // SizedBox(width: 10),
                Expanded(
                  child: AppCustomButton(
                    loaderColor: AppStyles.naturalWhiteColor,
                    width: 150,
                    height: 44,
                    endIcon: Icon(Icons.create_new_folder),
                    background: AppStyles.primary500Color,
                    text: translate('moreEmployer'),
                    textColor: AppStyles.white,
                    fontWeight: FontWeight.normal,
                    fontSize: 14,
                    onClicked: () {
                      FocusScope.of(context).unfocus();
                      int newIndex = employerWidgets.length;
                      employeeIds.add(0);
                      employerNameControllers.add(TextEditingController());
                      empPermanentAddressControllers.add(TextEditingController());
                      otherNoteControllers.add(TextEditingController());
                      empDesignation.add(0);
                      empAgeControllers.add(TextEditingController());
                      Type == "view"
                          ? null
                          : addEmployerDetails(employerWidgets.length, employerNameControllers[newIndex], empPermanentAddressControllers[newIndex], otherNoteControllers[newIndex],
                              empDesignation[newIndex], empAgeControllers[newIndex]);
                    },
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void createNewContractor(BuildContext context) {
    _contractorIds.clear();
    _contractorNameControllers.clear();
    _companyNameControllers.clear();
    _jobTypeControllers.clear();
    _commencementDateControllers.clear();
    _completionDateControllers.clear();
    _contractorMaleWorkerControllers.clear();
    _contractorFeMaleWorkerControllers.clear();
    _contractorTransgenderWorkerControllers.clear();
    _contractorTotalWorkerControllers.clear();
    _selectContractors.clear();
    isContractorsList.clear();
    _selectedHasLicense.clear();
    _isHasLicenesList.clear();
    selectedFileUploadNames.clear();
    contractorImages.clear();

    _contractorIds.add(0);
    _contractorNameControllers.add(TextEditingController());
    _companyNameControllers.add(TextEditingController());
    _jobTypeControllers.add(TextEditingController());
    _commencementDateControllers.add(TextEditingController());
    _completionDateControllers.add(TextEditingController());
    _contractorMaleWorkerControllers.add(TextEditingController(text: "0"));
    _contractorFeMaleWorkerControllers.add(TextEditingController(text: "0"));
    _contractorTransgenderWorkerControllers.add(TextEditingController(text: "0"));
    _contractorTotalWorkerControllers.add(TextEditingController(text: "0"));
    _selectContractors.add('');
    isContractorsList.add(true);
    _selectedHasLicense.add(0);
    _isHasLicenesList.add(false);
    selectedFileUploadNames.add('');
    contractorImages.add(InspectionOneSiteModel());

    final newIndex = contractorWidgets.length;
    // addContractors(
    //     newIndex,
    //     _contractorIds[newIndex],
    //     _contractorNameControllers[newIndex],
    //     _companyNameControllers[newIndex],
    //     _jobTypeControllers[newIndex],
    //     _commencementDateControllers[newIndex],
    //     _completionDateControllers[newIndex],
    //     _contractorMaleWorkerControllers[newIndex],
    //     _contractorFeMaleWorkerControllers[newIndex],
    //     _contractorTransgenderWorkerControllers[newIndex],
    //     _contractorTotalWorkerControllers[newIndex],
    //     _selectedHasLicense[newIndex],
    //     _isHasLicenesList[newIndex],
    //     selectedFileUploadNames[newIndex],
    //     contractorImages[newIndex]);
  }

  Widget _dynamicContracter(BuildContext context) {
    return Column(children: <Widget>[
      const SizedBox(
        height: AppConstants.TEXT_FORM_FIELD_PADDING,
      ),
      Align(
        alignment: Alignment.centerLeft,
        child: RichText(
          text: TextSpan(
            children: [
              TextSpan(
                text: translate('contractors'),
                style: TextStyle(
                  color: Colors.black, // Customize the title text color
                  fontSize: 16, // Customize the title text size
                ),
              ),
              TextSpan(
                text: ' *', // Suffix text
                style: TextStyle(
                  color: Colors.red, // Customize the suffix text color
                ),
              ),
            ],
          ),
        ),
      ),
      const SizedBox(
        height: AppConstants.PADDING_8,
      ),
      DropdownButtonFormField(
        hint: new Text(translate('select')),
        value: selectContractor ?? AllYesNoList[1].DataValue,
        onChanged: Type == "view"
            ? null
            : (dynamic newValue) {
                setState(() {
                  selectContractor = newValue!;
                  if (selectContractor == 0) {
                    removeContractore();
                    isContractor = false;
                  } else if (selectContractor == 1) {
                    if (_ListHolderContractoreDetailsModel.length == 0) {
                      addContractore();
                    }

                    isContractor = true;
                  }
                });
              },
        validator: (value) {
          if (value == null) {
            return 'Please Select Contractors';
          } else {
            return null;
          }
        },
        isExpanded: true,
        decoration: InputDecoration(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(color: Colors.grey), // Customize the border color
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
          ),
        ),
        items: AllYesNoList.map(
          (map) {
            return DropdownMenuItem<int?>(
              value: map.DataValue,
              child: Text(
                map.DisplayValue ?? "",
              ),
            );
          },
        ).toList(),
      ),
      const SizedBox(
        height: AppConstants.TEXT_FORM_FIELD_PADDING,
      ),
      if (isContractor == true)
        Container(
          padding: EdgeInsets.all(AppConstants.PADDING_8),
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Column(
            children: [
              Align(
                  alignment: Alignment.centerLeft,
                  child: Container(
                    padding: EdgeInsets.all(AppConstants.PADDING_8),
                    child: Form(
                        key: _formContractorKey,
                        child: ListView.builder(
                          shrinkWrap: true,
                          physics: NeverScrollableScrollPhysics(),
                          itemCount: _ListHolderContractoreDetailsModel.length,
                          itemBuilder: (context, index) {
                            return Padding(
                                padding: EdgeInsets.only(bottom: 20),
                                child: Container(
                                    padding: EdgeInsets.all(AppConstants.PADDING_8),
                                    decoration: ShapeDecoration(
                                      shape: RoundedRectangleBorder(
                                        side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                        borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                      ),
                                    ),
                                    child: Column(key: contractorGlobalKeys[index], children: [
                                      AppTextField(
                                        readOnly: Type == "view" ? true : false,
                                        textInputAction: TextInputAction.next,
                                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                        title: RichText(
                                          text: TextSpan(
                                            children: [
                                              TextSpan(
                                                text: translate('companyName'),
                                                style: TextStyle(
                                                  color: Colors.black,
                                                  // Customize the title text color
                                                  fontSize: 16, // Customize the title text size
                                                ),
                                              ),
                                              TextSpan(
                                                text: ' *', // Suffix text
                                                style: TextStyle(
                                                  color: Colors.red, // Customize the suffix text color
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                        controller: _ListCompanyNameTextEditingController[index],
                                        onChanged: (value) {
                                          updateContractoreByCompanyName(value, index);
                                        },
                                        textInputType: TextInputType.text,
                                        validator: (text) {
                                          if (!(AppUtils.checkRequired(text))) {
                                            return translate('companyNameValidation');
                                          }
                                          return null;
                                        },
                                      ),
                                      const SizedBox(
                                        height: 20,
                                      ),
                                      AppTextField(
                                        readOnly: Type == "view" ? true : false,
                                        textInputAction: TextInputAction.next,
                                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                        title: RichText(
                                          text: TextSpan(
                                            children: [
                                              TextSpan(
                                                text: translate('ownerName'),
                                                style: TextStyle(
                                                  color: Colors.black,
                                                  // Customize the title text color
                                                  fontSize: 16, // Customize the title text size
                                                ),
                                              ),
                                              TextSpan(
                                                text: ' *', // Suffix text
                                                style: TextStyle(
                                                  color: Colors.red, // Customize the suffix text color
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                        textInputType: TextInputType.text,
                                        controller: _ListOwnerNameTextEditingController[index],
                                        onChanged: (value) {
                                          updateContractoreByOwnerName(value, index);
                                        },
                                        validator: (text) {
                                          if (!(AppUtils.checkRequired(text))) {
                                            return translate('contractorNameValidation');
                                          }
                                          return null;
                                        },
                                      ),
                                      const SizedBox(
                                        height: 20,
                                      ),
                                      AppTextField(
                                        readOnly: Type == "view" ? true : false,
                                        textInputAction: TextInputAction.next,
                                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                        title: RichText(
                                          text: TextSpan(
                                            children: [
                                              TextSpan(
                                                text: translate('jobType'),
                                                style: TextStyle(
                                                  color: Colors.black,
                                                  // Customize the title text color
                                                  fontSize: 16, // Customize the title text size
                                                ),
                                              ),
                                              TextSpan(
                                                text: ' *', // Suffix text
                                                style: TextStyle(
                                                  color: Colors.red, // Customize the suffix text color
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                        textInputType: TextInputType.text,
                                        controller: _ListJobTypeTextEditingController[index],
                                        onChanged: (value) {
                                          updateContractoreByJobType(value, index);
                                        },
                                        validator: (text) {
                                          if (!(AppUtils.checkRequired(text))) {
                                            return translate('jobTypeValidation');
                                          }
                                          return null;
                                        },
                                      ),
                                      const SizedBox(
                                        height: 20,
                                      ),
                                      Align(
                                        alignment: Alignment.centerLeft,
                                        child: RichText(
                                          text: TextSpan(
                                            children: [
                                              TextSpan(
                                                text: translate('hasLicense'),
                                                style: TextStyle(
                                                  color: Colors.black,
                                                  // Customize the title text color
                                                  fontSize: 16, // Customize the title text size
                                                ),
                                              ),
                                              TextSpan(
                                                text: ' *', // Suffix text
                                                style: TextStyle(
                                                  color: Colors.red, // Customize the suffix text color
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                      const SizedBox(
                                        height: 20,
                                      ),
                                      DropdownButtonFormField(
                                        hint: new Text(translate('select')),
                                        value: _ListContractorsHasLicence[index],
                                        onChanged: (value) {
                                          print("name licence :" + value.toString());
                                          updateContractorsdropdownLicence(value!, index);
                                        },
                                        isExpanded: true,
                                        decoration: InputDecoration(
                                          border: OutlineInputBorder(
                                            borderRadius: BorderRadius.circular(10),
                                          ),
                                          enabledBorder: OutlineInputBorder(
                                            borderRadius: BorderRadius.circular(10),
                                            borderSide: BorderSide(color: Colors.grey), // Customize the border color
                                          ),
                                          focusedBorder: OutlineInputBorder(
                                            borderRadius: BorderRadius.circular(10),
                                            borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
                                          ),
                                        ),
                                        items: AllYesNoList.map(
                                          (map) {
                                            return DropdownMenuItem<int?>(
                                              value: map.DataValue,
                                              child: Text(
                                                map.DisplayValue ?? "",
                                              ),
                                            );
                                          },
                                        ).toList(),
                                      ),
                                      const SizedBox(
                                        height: 20,
                                      ),
                                      if (_ListContractorsHasLicence[index] == 1)
                                        Container(
                                          child: Column(
                                            children: [
                                              // AppTextField(
                                              //   textInputAction: TextInputAction.next,
                                              //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                              //   title: RichText(
                                              //     text: TextSpan(
                                              //       children: [
                                              //         TextSpan(
                                              //           text: translate('commencementDate'),
                                              //           style: TextStyle(
                                              //             color: Colors.black,
                                              //             // Customize the title text color
                                              //             fontSize: 16, // Customize the title text size
                                              //           ),
                                              //         ),
                                              //         TextSpan(
                                              //           text: ' *',
                                              //           // Suffix text
                                              //           style: TextStyle(
                                              //             color: Colors.red, // Customize the suffix text color
                                              //           ),
                                              //         ),
                                              //       ],
                                              //     ),
                                              //   ),
                                              //   textInputType: TextInputType.text,
                                              //   readOnly: true,
                                              //   suffixIcon: IconButton(
                                              //     onPressed: () async {
                                              //       DateTime? commencementDate = current_commencementDates; // Use current date if commencement date is null
                                              //       DateTime initialCompletionDate = current_completionDates; // Use commencement date as initial completion date if it's available
                                              //
                                              //       final DateTime? pickedDate = await showDatePicker(
                                              //         context: context,
                                              //         initialDate: initialCompletionDate,
                                              //         firstDate: commencementDate,
                                              //         lastDate: DateTime(2100),
                                              //         // Set a very distant future date
                                              //         initialDatePickerMode: DatePickerMode.day,
                                              //       );
                                              //
                                              //       if (pickedDate != null && pickedDate != current_completionDates) {
                                              //         current_completionDates = pickedDate;
                                              //         String fromDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                              //
                                              //         updateContractoreByCommencementDate(fromDate.toString(), index);
                                              //         updateContractoreByCompletionDate(fromDate, index);
                                              //       }
                                              //     },
                                              //     icon: Icon(
                                              //       Icons.calendar_today,
                                              //     ),
                                              //   ),
                                              //   onTap: () async {
                                              //     DateTime? commencementDate = current_commencementDates; // Use current date if commencement date is null
                                              //     DateTime initialCompletionDate = current_completionDates; // Use commencement date as initial completion date if it's available
                                              //
                                              //     final DateTime? pickedDate = await showDatePicker(
                                              //       context: context,
                                              //       initialDate: initialCompletionDate,
                                              //       firstDate: commencementDate,
                                              //       lastDate: DateTime(2100),
                                              //       // Set a very distant future date
                                              //       initialDatePickerMode: DatePickerMode.day,
                                              //     );
                                              //
                                              //     if (pickedDate != null && pickedDate != current_completionDates) {
                                              //       current_completionDates = pickedDate;
                                              //       String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                              //
                                              //       updateContractoreByCommencementDate(formDate.toString(), index);
                                              //       updateContractoreByCompletionDate(formDate, index);
                                              //     }
                                              //   },
                                              //   controller: _ListCommencemenDateTextEditingController[index],
                                              //   validator: (text) {
                                              //     if (!(AppUtils.checkRequired(text))) {
                                              //       return translate('completionDateValidation');
                                              //     }
                                              //     return null;
                                              //   },
                                              // ),
                                              // const SizedBox(
                                              //   height: 20,
                                              // ),
                                              // AppTextField(
                                              //   textInputAction: TextInputAction.next,
                                              //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                              //   title: RichText(
                                              //     text: TextSpan(
                                              //       children: [
                                              //         TextSpan(
                                              //           text: translate('completionDate'),
                                              //           style: TextStyle(
                                              //             color: Colors.black,
                                              //             // Customize the title text color
                                              //             fontSize: 16, // Customize the title text size
                                              //           ),
                                              //         ),
                                              //         TextSpan(
                                              //           text: ' *',
                                              //           // Suffix text
                                              //           style: TextStyle(
                                              //             color: Colors.red, // Customize the suffix text color
                                              //           ),
                                              //         ),
                                              //       ],
                                              //     ),
                                              //   ),
                                              //   textInputType: TextInputType.text,
                                              //   readOnly: true,
                                              //   suffixIcon: IconButton(
                                              //     onPressed: () async {
                                              //       final DateTime? pickedDate = await showDatePicker(
                                              //         context: context,
                                              //         initialDate: current_commencementDates,
                                              //         firstDate: DateTime(1900),
                                              //         // Set a very distant past date
                                              //         lastDate: DateTime(2100),
                                              //         // Set a very distant future date
                                              //         initialDatePickerMode: DatePickerMode.day,
                                              //       );
                                              //       if (pickedDate != null && pickedDate != current_commencementDates) {
                                              //         current_commencementDates = pickedDate;
                                              //         String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                              //
                                              //         updateContractoreByCompletionDate(formDate, index);
                                              //       }
                                              //     },
                                              //     icon: Icon(
                                              //       Icons.calendar_today,
                                              //     ),
                                              //   ),
                                              //   onTap: () async {
                                              //     final DateTime? pickedDate = await showDatePicker(
                                              //       context: context,
                                              //       initialDate: current_commencementDates,
                                              //       firstDate: DateTime(1900),
                                              //       // Set a very distant past date
                                              //       lastDate: DateTime(2100),
                                              //       // Set a very distant future date
                                              //       initialDatePickerMode: DatePickerMode.day,
                                              //     );
                                              //     if (pickedDate != null && pickedDate != current_commencementDates) {
                                              //       current_commencementDates = pickedDate;
                                              //       String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                              //
                                              //       updateContractoreByCompletionDate(formDate, index);
                                              //     }
                                              //   },
                                              //   controller: _ListCompletionDateTextEditingController[index],
                                              //   validator: (text) {
                                              //     if (!(AppUtils.checkRequired(text))) {
                                              //       return translate('completionDateValidation');
                                              //     }
                                              //     return null;
                                              //   },
                                              // )
                                              AppTextField(
                                                textInputAction: TextInputAction.next,
                                                titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                title: RichText(
                                                  text: TextSpan(
                                                    children: [
                                                      TextSpan(
                                                        text: translate('commencementDate'),
                                                        style: TextStyle(
                                                          color: Colors.black,
                                                          // Customize the title text color
                                                          fontSize: 16, // Customize the title text size
                                                        ),
                                                      ),
                                                      TextSpan(
                                                        text: ' *',
                                                        // Suffix text
                                                        style: TextStyle(
                                                          color: Colors.red, // Customize the suffix text color
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                textInputType: TextInputType.text,
                                                readOnly: true,
                                                suffixIcon: IconButton(
                                                  onPressed: Type == "view"
                                                      ? null
                                                      : () async {
                                                          final DateTime? pickedDate = await showDatePicker(
                                                            context: context,
                                                            initialDate: current_commencementDates[index],
                                                            firstDate: DateTime(1900),
                                                            // Set a very distant past date
                                                            lastDate: DateTime(2100),
                                                            // Set a very distant future date
                                                            initialDatePickerMode: DatePickerMode.day,
                                                          );
                                                          if (pickedDate != null && pickedDate != current_commencementDates[index]) {
                                                            setState(() {
                                                              current_commencementDates[index] = pickedDate;
                                                              String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                                              _ListCommencemenDateTextEditingController[index].text = formDate;
                                                              _ListCompletionDateTextEditingController[index].text = _ListCommencemenDateTextEditingController[index].text;
                                                            });
                                                          }
                                                        },
                                                  icon: Icon(
                                                    Icons.calendar_today,
                                                  ),
                                                ),
                                                onTap: Type == "view"
                                                    ? null
                                                    : () async {
                                                        final DateTime? pickedDate = await showDatePicker(
                                                          context: context,
                                                          initialDate: current_commencementDates[index],
                                                          firstDate: DateTime(1900),
                                                          // Set a very distant past date
                                                          lastDate: DateTime(2100),
                                                          // Set a very distant future date
                                                          initialDatePickerMode: DatePickerMode.day,
                                                        );
                                                        if (pickedDate != null && pickedDate != current_commencementDates[index]) {
                                                          setState(() {
                                                            current_commencementDates[index] = pickedDate;
                                                            String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                                            _ListCommencemenDateTextEditingController[index].text = formDate;
                                                            _ListCompletionDateTextEditingController[index].text = _ListCommencemenDateTextEditingController[index].text;
                                                          });
                                                        }
                                                      },
                                                controller: _ListCommencemenDateTextEditingController[index],
                                                validator: (text) {
                                                  if (!(AppUtils.checkRequired(text))) {
                                                    return translate('commencementDateValidation');
                                                  }
                                                  return null;
                                                },
                                              ),
                                              const SizedBox(
                                                height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                              ),
                                              AppTextField(
                                                textInputAction: TextInputAction.next,
                                                titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                title: RichText(
                                                  text: TextSpan(
                                                    children: [
                                                      TextSpan(
                                                        text: translate('completionDate'),
                                                        style: TextStyle(
                                                          color: Colors.black,
                                                          // Customize the title text color
                                                          fontSize: 16, // Customize the title text size
                                                        ),
                                                      ),
                                                      TextSpan(
                                                        text: ' *',
                                                        // Suffix text
                                                        style: TextStyle(
                                                          color: Colors.red, // Customize the suffix text color
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                textInputType: TextInputType.text,
                                                readOnly: true,
                                                suffixIcon: IconButton(
                                                  onPressed: Type == "view"
                                                      ? null
                                                      : () async {
                                                          DateTime? commencementDate = current_commencementDates[index]; // Use current date if commencement date is null
                                                          DateTime initialCompletionDate = current_completionDates; // Use commencement date as initial completion date if it's available

                                                          final DateTime? pickedDate = await showDatePicker(
                                                            context: context,
                                                            initialDate: initialCompletionDate,
                                                            firstDate: commencementDate,
                                                            lastDate: DateTime(2100),
                                                            // Set a very distant future date
                                                            initialDatePickerMode: DatePickerMode.day,
                                                          );

                                                          if (pickedDate != null && pickedDate != current_completionDates) {
                                                            setState(() {
                                                              current_completionDates = pickedDate;
                                                              String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                                              _ListCompletionDateTextEditingController[index].text = formDate;
                                                            });
                                                          }
                                                        },
                                                  icon: Icon(
                                                    Icons.calendar_today,
                                                  ),
                                                ),
                                                onTap: Type == "view"
                                                    ? null
                                                    : () async {
                                                        DateTime? commencementDate = current_commencementDates[index]; // Use current date if commencement date is null
                                                        DateTime initialCompletionDate = current_completionDates; // Use commencement date as initial completion date if it's available

                                                        final DateTime? pickedDate = await showDatePicker(
                                                          context: context,
                                                          initialDate: initialCompletionDate,
                                                          firstDate: commencementDate,
                                                          lastDate: DateTime(2100),
                                                          // Set a very distant future date
                                                          initialDatePickerMode: DatePickerMode.day,
                                                        );

                                                        if (pickedDate != null && pickedDate != current_completionDates) {
                                                          setState(() {
                                                            current_completionDates = pickedDate;
                                                            String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                                            _ListCompletionDateTextEditingController[index].text = formDate;
                                                          });
                                                        }
                                                      },
                                                controller: _ListCompletionDateTextEditingController[index],
                                                validator: (text) {
                                                  if (!(AppUtils.checkRequired(text))) {
                                                    return translate('completionDateValidation');
                                                  }
                                                  return null;
                                                },
                                              ),
                                            ],
                                          ),
                                        ),
                                      const SizedBox(
                                        height: 20,
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                            translate('contractorsDetails-workers'),
                                          ),
                                        ],
                                      ),
                                      const SizedBox(
                                        height: 20,
                                      ),
                                      Container(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        decoration: ShapeDecoration(
                                          shape: RoundedRectangleBorder(
                                            side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                            borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                          ),
                                        ),
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          children: [
                                            const SizedBox(
                                              height: 20,
                                            ),
                                            AppTextField(
                                              readOnly: Type == "view" ? true : false,
                                              textInputAction: TextInputAction.next,
                                              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                              title: RichText(
                                                text: TextSpan(
                                                  children: [
                                                    TextSpan(
                                                      text: translate('maleWorker'),
                                                      style: TextStyle(
                                                        color: Colors.black,
                                                        // Customize the title text color
                                                        fontSize: 16, // Customize the title text size
                                                      ),
                                                    ),
                                                    TextSpan(
                                                      text: ' *',
                                                      // Suffix text
                                                      style: TextStyle(
                                                        color: Colors.red, // Customize the suffix text color
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                              textInputType: TextInputType.number,
                                              controller: _ListMaleWorkerTextEditingController[index],
                                              onChanged: (value) {
                                                updateContractoreByMaleWorker(value, index);
                                              },
                                            ),
                                            const SizedBox(
                                              height: 20,
                                            ),
                                            AppTextField(
                                              readOnly: Type == "view" ? true : false,
                                              textInputAction: TextInputAction.next,
                                              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                              title: RichText(
                                                text: TextSpan(
                                                  children: [
                                                    TextSpan(
                                                      text: translate('femaleWorker'),
                                                      style: TextStyle(
                                                        color: Colors.black,
                                                        // Customize the title text color
                                                        fontSize: 16, // Customize the title text size
                                                      ),
                                                    ),
                                                    TextSpan(
                                                      text: ' *',
                                                      // Suffix text
                                                      style: TextStyle(
                                                        color: Colors.red, // Customize the suffix text color
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                              textInputType: TextInputType.number,
                                              controller: _ListFeMaleWorkerTextEditingController[index],
                                              onChanged: (value) {
                                                updateContractoreByFeMaleWorker(value, index);
                                              },
                                            ),
                                            const SizedBox(
                                              height: 20,
                                            ),
                                            AppTextField(
                                              readOnly: Type == "view" ? true : false,
                                              textInputAction: TextInputAction.next,
                                              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                              title: RichText(
                                                text: TextSpan(
                                                  children: [
                                                    TextSpan(
                                                      text: translate('transgenderWorker'),
                                                      style: TextStyle(
                                                        color: Colors.black, // Customize the title text color
                                                        fontSize: 16, // Customize the title text size
                                                      ),
                                                    ),
                                                    TextSpan(
                                                      text: ' *', // Suffix text
                                                      style: TextStyle(
                                                        color: Colors.red, // Customize the suffix text color
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                              textInputType: TextInputType.number,
                                              inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                                              controller: _ListTransgenderWorkerTextEditingController[index],
                                              validator: (value) {
                                                if (value == null) {
                                                  return 'Please Enter Transgender Worker';
                                                } else {
                                                  return null;
                                                }
                                              },
                                              onChanged: (value) {
                                                updateContractoreBytransgenderWorker(value, index);
                                              },
                                            ),
                                            const SizedBox(
                                              height: 20,
                                            ),
                                            AppTextField(
                                              textInputAction: TextInputAction.next,
                                              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                              title: RichText(
                                                text: TextSpan(
                                                  children: [
                                                    TextSpan(
                                                      text: translate('totalWorker'),
                                                      style: TextStyle(
                                                        color: Colors.black,
                                                        // Customize the title text color
                                                        fontSize: 16, // Customize the title text size
                                                      ),
                                                    ),
                                                    TextSpan(
                                                      text: ' *',
                                                      // Suffix text
                                                      style: TextStyle(
                                                        color: Colors.red, // Customize the suffix text color
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                              textInputType: TextInputType.number,
                                              controller: _ListTotalWorkerTextEditingController[index],
                                              readOnly: true,
                                              onChanged: (value) {
                                                updateContractoreBytotalWorker(value, index);
                                              },
                                            ),
                                            const SizedBox(
                                              height: 20,
                                            ),
                                            Row(
                                              children: [
                                                Text(
                                                  translate('fileUpload'),
                                                  style: AppStyles.textInputStyle,
                                                )
                                              ],
                                            ),
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            Container(
                                              decoration: ShapeDecoration(
                                                shape: RoundedRectangleBorder(
                                                  side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                                  borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                                ),
                                              ),
                                              child: Padding(
                                                padding: EdgeInsets.all(AppConstants.PADDING_8),
                                                child: Row(
                                                  children: [
                                                    Expanded(
                                                      flex: 1,
                                                      child: Align(
                                                        alignment: Alignment.centerLeft,
                                                        child: AppCustomButton(
                                                          loaderColor: AppStyles.naturalWhiteColor,
                                                          width: 110,
                                                          background: AppStyles.greyButtonColor,
                                                          text: translate('chooseFile'),
                                                          textColor: AppStyles.black,
                                                          fontWeight: FontWeight.normal,
                                                          fontSize: 12,
                                                          onClicked: () async {
                                                            Type == "view"
                                                                ? null
                                                                : showModalBottomSheet<void>(
                                                                    context: context,
                                                                    builder: (BuildContext context) {
                                                                      return Container(
                                                                        child: Wrap(
                                                                          children: <Widget>[
                                                                            ListTile(
                                                                              leading: Icon(Icons.camera),
                                                                              title: Text('Open Camera'),
                                                                              onTap: () async {
                                                                                bool isOnline = await checkConnectivity();
                                                                                if (isOnline) {
                                                                                  _openCamera(
                                                                                    "FileUploads",
                                                                                    index,
                                                                                  );
                                                                                } else {
                                                                                  _openCameraForOfflineMode(
                                                                                    "FileUploads",
                                                                                    index,
                                                                                  );
                                                                                }

                                                                                Navigator.of(context).pop();
                                                                                // setState(() {
                                                                                //   print("filePaths----$filePaths");
                                                                                // });
                                                                              },
                                                                            ),
                                                                            ListTile(
                                                                              leading: Icon(Icons.photo),
                                                                              title: Text('Open Gallery'),
                                                                              onTap: () async {
                                                                                bool isOnline = await checkConnectivity();
                                                                                if (isOnline) {
                                                                                  _openGallery("FileUploads", index);
                                                                                } else {
                                                                                  _openGalleryForOfflineMode(
                                                                                    "FileUploads",
                                                                                    index,
                                                                                  );
                                                                                }
                                                                                Navigator.of(context).pop();
                                                                              },
                                                                            ),
                                                                            ListTile(
                                                                              leading: Icon(Icons.folder),
                                                                              title: Text('Open Document Picker'),
                                                                              onTap: () async {
                                                                                bool isOnline = await checkConnectivity();
                                                                                if (isOnline) {
                                                                                  _openDocumentPicker("FileUploads", index);
                                                                                } else {
                                                                                  _openDocumentForOfflineMode("FileUploads", index);
                                                                                }

                                                                                Navigator.of(context).pop();
                                                                              },
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      );
                                                                    },
                                                                  );
                                                          },
                                                        ),
                                                      ),
                                                    ),
                                                    if (!isAppOnline)
                                                      Expanded(
                                                        flex: 1,
                                                        child: Text(
                                                          _ListHolderContractoreDetailsModel[index].image_name.isNotEmpty ? _ListHolderContractoreDetailsModel[index].image_name.split('/').last : '',
                                                          maxLines: 2,
                                                          style: AppStyles.textInputStyle,
                                                        ),
                                                      )
                                                    else
                                                      Expanded(
                                                        flex: 1,
                                                        child: Text(
                                                          _ListHolderContractoreDetailsModel[index].image_name,
                                                          maxLines: 2,
                                                          style: AppStyles.textInputStyle,
                                                        ),
                                                      )
                                                  ],
                                                ),
                                              ),
                                            ),
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            if (isContractoredownloadImage(index))
                                              SizedBox(
                                                width: double.infinity,
                                                child: ElevatedButton(
                                                  onPressed: () {
                                                    String name = findContractorsFileUploadName(index);
                                                    String path = findContractorsFileUploadPath(index);
                                                    downloadFile(name, path);
                                                  },
                                                  child: Text('Download'),
                                                ),
                                              )
                                          ],
                                        ),
                                      ),
                                      const SizedBox(
                                        height: 30,
                                      ),
                                      Visibility(
                                        visible: Type == "view" ? false : true,
                                        child: Row(
                                          mainAxisAlignment: MainAxisAlignment.end,
                                          children: <Widget>[
                                            AppCustomButton(
                                              loaderColor: AppStyles.naturalWhiteColor,
                                              background: AppStyles.primary500Color,
                                              text: translate('delete'),
                                              width: 100,
                                              height: 44,
                                              endIcon: Icon(Icons.delete),
                                              textColor: AppStyles.white,
                                              fontWeight: FontWeight.normal,
                                              fontSize: 14,
                                              onClicked: Type == "view"
                                                  ? null
                                                  : () {
                                                      FocusScope.of(context).unfocus();
                                                      deleteContractor(index);
                                                      deleteContractoreByPosition(index);
                                                      setState(() {});
                                                    },
                                            )
                                          ],
                                        ),
                                      ),
                                    ])));
                          },
                        )),
                  )),
              const SizedBox(
                height: 10,
              ),
              if (isContractor == true)
                //   Align(
                //     alignment: Alignment.centerRight,
                //     child: AppCustomButton(
                //       loaderColor: AppStyles.naturalWhiteColor,
                //       width: 150,
                //       height: 44,
                //       endIcon: Icon(Icons.add),
                //       background: AppStyles.primary500Color,
                //       text: translate('moreContractors'),
                //       textColor: AppStyles.white,
                //       fontWeight: FontWeight.normal,
                //       fontSize: 14,
                //       onClicked: () {
                //         setState(() {
                //           addContractore();
                //         });
                //       },
                //     ),
                //   ),
                // IconButton(
                //     onPressed: () {
                //       for (final e in _ListHolderContractoreDetailsModel) {
                //         print(e.company_name);
                //       }
                //     },
                //     icon: const Icon(Icons.delete))
                Visibility(
                  visible: Type == "view" ? false : true,
                  child: Row(
                    children: [
                      // Expanded(
                      //   child: AppCustomButton(
                      //     loaderColor: AppStyles.naturalWhiteColor,
                      //     width: 100,
                      //     height: 44,
                      //     background: AppStyles.primary500Color,
                      //     text: translate('save'),
                      //     textColor: AppStyles.white,
                      //     fontWeight: FontWeight.normal,
                      //     fontSize: 14,
                      //     onClicked: Type == "view"
                      //         ? null
                      //         : () {
                      //             FocusScope.of(context).unfocus();
                      //             final _form = _formContractorKey.currentState!;
                      //             if (_form.validate()) {
                      //               validateStep5();
                      //             }
                      //           },
                      //   ),
                      // ),
                      // SizedBox(width: 10),
                      Expanded(
                        child: AppCustomButton(
                          loaderColor: AppStyles.naturalWhiteColor,
                          width: 150,
                          height: 44,
                          // endIcon: Icon(Icons.create_new_folder),
                          background: AppStyles.primary500Color,
                          text: translate('moreContractors'),
                          textColor: AppStyles.white,
                          fontWeight: FontWeight.normal,
                          fontSize: 14,
                          onClicked: Type == "view"
                              ? null
                              : () {
                                  FocusScope.of(context).unfocus();
                                  setState(() {
                                    addContractore();
                                  });
                                },
                        ),
                      ),
                    ],
                  ),
                ),
            ],
          ),
        ),
    ]);
  }

  Widget _buildContractor(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (contractorWidgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createNewContractor(context);
      }
    });
    return Column(
      children: <Widget>[
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('contractors'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        DropdownButtonFormField(
          hint: new Text(translate('select')),
          value: selectContractor ?? AllYesNoList[1].DataValue,
          onChanged: Type == "view"
              ? null
              : (dynamic newValue) {
                  setState(() {
                    selectContractor = newValue!;
                    if (selectContractor == 0) {
                      isContractor = false;
                    } else if (selectContractor == 1) {
                      isContractor = true;
                      if (contractorWidgets.length == 0) {
                        createNewContractor(context);
                      }
                    }
                  });
                },
          validator: (value) {
            if (value == null) {
              return 'Please Select Contractors';
            } else {
              return null;
            }
          },
          isExpanded: true,
          decoration: InputDecoration(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: Colors.grey), // Customize the border color
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
            ),
          ),
          items: AllYesNoList.map(
            (map) {
              return DropdownMenuItem<int?>(
                value: map.DataValue,
                child: Text(
                  map.DisplayValue ?? "",
                ),
              );
            },
          ).toList(),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Visibility(
          visible: isContractor,
          child: Container(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            decoration: ShapeDecoration(
              shape: RoundedRectangleBorder(
                side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                borderRadius: BorderRadius.all(Radius.circular(12.0)),
              ),
            ),
            child: Column(
              children: [
                ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: contractorWidgets.length,
                  itemBuilder: (context, index) {
                    // Dynamically added widgets
                    return contractorWidgets[index];
                  },
                ),
                const SizedBox(
                  height: AppConstants.PADDING_8,
                ),
                Row(
                  children: [
                    Expanded(
                      child: AppCustomButton(
                        loaderColor: AppStyles.naturalWhiteColor,
                        width: 100,
                        height: 44,
                        background: AppStyles.primary500Color,
                        text: translate('save'),
                        textColor: AppStyles.white,
                        fontWeight: FontWeight.normal,
                        fontSize: 14,
                        onClicked: Type == "view"
                            ? null
                            : () {
                                validateStep5();
                              },
                      ),
                    ),
                    SizedBox(width: 10),
                    Expanded(
                      child: AppCustomButton(
                        loaderColor: AppStyles.naturalWhiteColor,
                        width: 180,
                        height: 44,
                        endIcon: Icon(Icons.create_new_folder),
                        background: AppStyles.primary500Color,
                        text: translate('moreContractors'),
                        textColor: AppStyles.white,
                        fontWeight: FontWeight.normal,
                        fontSize: 14,
                        onClicked: () {
                          final newIndex = contractorWidgets.length;
                          _contractorIds.add(0);
                          _contractorNameControllers.add(TextEditingController());
                          _companyNameControllers.add(TextEditingController());
                          _jobTypeControllers.add(TextEditingController());
                          _commencementDateControllers.add(TextEditingController());
                          _completionDateControllers.add(TextEditingController());
                          _contractorMaleWorkerControllers.add(TextEditingController(text: "0"));
                          _contractorFeMaleWorkerControllers.add(TextEditingController(text: "0"));
                          _contractorTransgenderWorkerControllers.add(TextEditingController(text: "0"));
                          _contractorTotalWorkerControllers.add(TextEditingController(text: "0"));
                          _selectedHasLicense.add(0);
                          _isHasLicenesList.add(false);
                          selectedFileUploadNames.add('');
                          contractorImages.add(InspectionOneSiteModel());

                          // Type == "view"
                          //     ? null
                          //     : addContractors(
                          //         newIndex,
                          //         _contractorIds[newIndex],
                          //         _contractorNameControllers[newIndex],
                          //         _companyNameControllers[newIndex],
                          //         _jobTypeControllers[newIndex],
                          //         _commencementDateControllers[newIndex],
                          //         _completionDateControllers[newIndex],
                          //         _contractorMaleWorkerControllers[newIndex],
                          //         _contractorFeMaleWorkerControllers[newIndex],
                          //         _contractorTransgenderWorkerControllers[newIndex],
                          //         _contractorTotalWorkerControllers[newIndex],
                          //         _selectedHasLicense[newIndex],
                          //         _isHasLicenesList[newIndex],
                          //         selectedFileUploadNames[newIndex],
                          //         contractorImages[newIndex]);
                        },
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  void createAct1_6() {
    _Act1NameControllers.clear();
    _Act1SrNoControllers.clear();
    act1_6WorkerIds.clear();
    act1_6RuleIds.clear();
    act1_6Ids.clear();

    _Act1NameControllers.add(TextEditingController());
    _Act1SrNoControllers.add(TextEditingController());
    act1_6WorkerIds.add(0);
    act1_6RuleIds.add(0);
    act1_6Ids.add(0);
    final index = Act1_6Widgets.length;
    Acts1_6(index, _Act1SrNoControllers[index], _Act1NameControllers[index]);
  }

  void createAct1_8() {
    act1_8RuleIds.clear();
    act1_8Rule8MinWorkerIds.clear();
    act1_8Ids.clear();
    _Act1_8SrNoControllers.clear();
    _Act1_8NameControllers.clear();
    _Act1_8lengthServiceControllers.clear();
    _Act1_8dailyWorkHrsControllers.clear();
    _Act1_8dayControllers.clear();
    _Act1_8MonthControllers.clear();
    _Act1_8wageEntitledControllers.clear();
    _Act1_8wagePayableControllers.clear();
    _Act1_8wagePaidControllers.clear();
    _Act1_8differenceWageAmountControllers.clear();
    _Act1_8UploadFiles.clear();
    _Act1_8remarksControllers.clear();
    WagesToPaid.clear();
    DaliyMonthlys.clear();
    current_wagesEntitleds.clear();
    isDay.clear();
    isMonth.clear();

    WagesToPaid.add(0);
    DaliyMonthlys.add(0);
    isMonth.add(false);
    isDay.add(false);
    _Act1_8SrNoControllers.add(TextEditingController());
    _Act1_8NameControllers.add(TextEditingController());
    _Act1_8DesgControllers.add(TextEditingController());
    _Act1_8lengthServiceControllers.add(TextEditingController());
    _Act1_8dailyWorkHrsControllers.add(TextEditingController());
    _Act1_8MonthControllers.add(TextEditingController());
    _Act1_8dayControllers.add(TextEditingController());
    _Act1_8wageEntitledControllers.add(TextEditingController());
    _Act1_8wagePayableControllers.add(TextEditingController());
    _Act1_8wagePaidControllers.add(TextEditingController());
    _Act1_8differenceWageAmountControllers.add(TextEditingController());
    _Act1_8UploadFiles.add(TextEditingController());
    _Act1_8remarksControllers.add(TextEditingController());
    current_wagesEntitleds.add(DateTime.now());
    act1_8Rule8MinWorkerIds.add(0);
    act1_8RuleIds.add(0);
    act1_8Ids.add(0);
    final index = Act1_8Widgets.length;
    Acts1_8(
        index,
        _Act1_8SrNoControllers[index],
        _Act1_8NameControllers[index],
        _Act1_8DesgControllers[index],
        _Act1_8lengthServiceControllers[index],
        _Act1_8dailyWorkHrsControllers[index],
        _Act1_8dayControllers[index],
        _Act1_8MonthControllers[index],
        current_wagesEntitleds[index],
        DaliyMonthlys[index],
        isMonth[index],
        isDay[index],
        _Act1_8wageEntitledControllers[index],
        _Act1_8wagePayableControllers[index],
        _Act1_8wagePaidControllers[index],
        _Act1_8differenceWageAmountControllers[index],
        _Act1_8remarksControllers[index]);
  }

  void createAct2_1() {
    _Act2_1FinancialYearControllers.clear();
    _Act2_1SrNoControllers.clear();
    IsFromA.clear();
    IsFromB.clear();
    IsFromC.clear();
    IsFromD.clear();
    act2_1FinancialLIstIds.clear();
    act2_1RuleIds.clear();
    act2_1Ids.clear();

    _Act2_1FinancialYearControllers.add(TextEditingController());
    _Act2_1SrNoControllers.add(TextEditingController());
    act2_1FinancialLIstIds.add(0);
    act2_1RuleIds.add(0);
    IsFromA.add(false);
    IsFromB.add(false);
    IsFromC.add(false);
    IsFromD.add(false);
    act2_1Ids.add(0);
    final index = Act2_1Widgets.length;
    Acts2_1(index, _Act2_1SrNoControllers[index], _Act2_1FinancialYearControllers[index], IsFromA[index], IsFromB[index], IsFromC[index], IsFromD[index]);
  }

  void createAct2_2() {
    _Act2_2SrNoControllers.clear();
    _Act2_2WorkerNameControllers.clear();
    act2_2Ids.clear();
    act2_2NotPaidWorkerDetailDNoIds.clear();
    act2_2RuleIds.clear();

    _Act2_2SrNoControllers.add(TextEditingController());
    _Act2_2WorkerNameControllers.add(TextEditingController());
    act2_2NotPaidWorkerDetailDNoIds.add(0);
    act2_2RuleIds.add(0);
    act2_2Ids.add(0);
    final index = Act2_2Widgets.length;
    Acts2_2(index, _Act2_2SrNoControllers[index], _Act2_2WorkerNameControllers[index]);
  }

  void createAct4_1_5() {
    _Act4_1_5SrNoControllers.clear();
    _Act4_1_5NameContractorControllers.clear();
    _Act4_1_5NameContractorLabourControllers.clear();
    WagesToPaid.clear();
    _Act4_1_5WagesTobePaidControllers.clear();
    _Act4_1_5DifferAmountControllers.clear();
    act4_1_5RuleIds.clear();
    act4_1_5Ids.clear();
    act4_1_5Sharamk214DNo.clear();

    _Act4_1_5SrNoControllers.add(TextEditingController());
    _Act4_1_5NameContractorControllers.add(TextEditingController());
    _Act4_1_5NameContractorLabourControllers.add(TextEditingController());
    WagesToPaid.add(0);
    _Act4_1_5WagesTobePaidControllers.add(TextEditingController());
    _Act4_1_5DifferAmountControllers.add(TextEditingController());
    act4_1_5RuleIds.add(0);
    act4_1_5Ids.add(0);
    act4_1_5Sharamk214DNo.add(0);
    final index = Act4_1_5Widgets.length;
    Act4_1_5(
      index,
      _Act4_1_5SrNoControllers[index],
      _Act4_1_5NameContractorControllers[index],
      _Act4_1_5NameContractorLabourControllers[index],
      WagesToPaid[index],
      _Act4_1_5WagesTobePaidControllers[index],
      _Act4_1_5DifferAmountControllers[index],
    );
  }

  void createAct4_2_5() {
    act4_2_5ACTIsBreakRuleS211k65DNo.clear();
    act4_2_5RuleIds.clear();
    act4_2_5Ids.clear();
    _Act4_2_5SrNoControllers.clear();
    _Act4_2_5NameContractorControllers.clear();

    act4_2_5ACTIsBreakRuleS211k65DNo.add(0);
    act4_2_5RuleIds.add(0);
    act4_2_5Ids.add(0);
    _Act4_2_5SrNoControllers.add(TextEditingController());
    _Act4_2_5NameContractorControllers.add(TextEditingController());
    int newIndex = Act4_2_5Widgets.length;
    Act4_2_5(newIndex, _Act4_2_5SrNoControllers[newIndex], _Act4_2_5NameContractorControllers[newIndex]);
  }

  void createAct5_4() {
    _Act5_4SrNoControllers.clear();
    _Act5_4MaleWorkersControllers.clear();
    _Act5_4MDesgControllers.clear();
    _Act5_4MSalaryPaidControllers.clear();
    _Act5_4FemaleWorkersControllers.clear();
    _Act5_4FDesgControllers.clear();
    _Act5_4FSalaryPaidControllers.clear();
    act5_4RuleIds.clear();
    act5_4Ids.clear();

    _Act5_4SrNoControllers.add(TextEditingController());
    _Act5_4MaleWorkersControllers.add(TextEditingController());
    _Act5_4MDesgControllers.add(TextEditingController());
    _Act5_4MSalaryPaidControllers.add(TextEditingController());
    _Act5_4FemaleWorkersControllers.add(TextEditingController());
    _Act5_4FDesgControllers.add(TextEditingController());
    _Act5_4FSalaryPaidControllers.add(TextEditingController());
    act5_4RuleIds.add(0);
    act5_4Ids.add(0);
    final index = Act5_4Widgets.length;
    Act5_4(index, _Act5_4SrNoControllers[index], _Act5_4MaleWorkersControllers[index], _Act5_4MDesgControllers[index], _Act5_4MSalaryPaidControllers[index], _Act5_4FemaleWorkersControllers[index],
        _Act5_4FDesgControllers[index], _Act5_4FSalaryPaidControllers[index]);
  }

  void createAct6() {
    _Act6SrNoControllers.clear();
    _Act6NameContractorControllers.clear();
    _Act6AddressControllers.clear();
    _Act6DetailsWorkControllers.clear();
    _Act6TimeSinceControllers.clear();
    _Act6NoWorkersControllers.clear();
    _Act6TotalNoWorkersControllers.clear();
    currentTimeSinceDates.clear();
    act6ContractorPersonDetailsDetailDNo.clear();
    act6RuleIds.clear();
    act6Ids.clear();

    _Act6SrNoControllers.add(TextEditingController());
    _Act6NameContractorControllers.add(TextEditingController());
    _Act6AddressControllers.add(TextEditingController());
    _Act6DetailsWorkControllers.add(TextEditingController());
    _Act6TimeSinceControllers.add(TextEditingController());
    _Act6NoWorkersControllers.add(TextEditingController());
    _Act6TotalNoWorkersControllers.add(TextEditingController());
    currentTimeSinceDates.add(DateTime.now());
    act6ContractorPersonDetailsDetailDNo.add(0);
    act6RuleIds.add(0);
    act6Ids.add(0);
    final index = Act6Widgets.length;
    Act6(
      index,
      _Act6SrNoControllers[index],
      _Act6NameContractorControllers[index],
      _Act6AddressControllers[index],
      _Act6DetailsWorkControllers[index],
      currentTimeSinceDates[index],
      _Act6TimeSinceControllers[index],
      _Act6NoWorkersControllers[index],
      _Act6TotalNoWorkersControllers[index],
    );
  }

  void createAct7_3() {
    _Act7_3SrNoControllers.clear();
    _Act7_3NameAdolescentLabourControllers.clear();
    _Act7_3AddressControllers.clear();
    _Act7_3AgeControllers.clear();
    act7_3ACTIsBreakRule972DetailDNo.clear();
    act7_3RuleIds.clear();
    act7_3Ids.clear();

    act7_3ACTIsBreakRule972DetailDNo.add(0);
    act7_3Ids.add(0);
    act7_3RuleIds.add(0);
    _Act7_3SrNoControllers.add(TextEditingController());
    _Act7_3NameAdolescentLabourControllers.add(TextEditingController());
    _Act7_3AddressControllers.add(TextEditingController());
    _Act7_3AgeControllers.add(TextEditingController());
    final index = Act7_3Widgets.length;
    Act7_3(
      index,
      _Act7_3SrNoControllers[index],
      _Act7_3NameAdolescentLabourControllers[index],
      _Act7_3AddressControllers[index],
      _Act7_3AgeControllers[index],
    );
  }

  void createAct7_2_4() {
    _Act7_2_4SrNoControllers.clear();
    _Act7_2_4NameAdolescentLabourControllers.clear();
    _Act7_2_4AddressControllers.clear();
    _Act7_2_4AgeControllers.clear();
    act7_4ACTIsBreakRule973DetailDNo.clear();
    act7_4RuleIds.clear();
    act7_4Ids.clear();

    _Act7_2_4SrNoControllers.add(TextEditingController());
    _Act7_2_4NameAdolescentLabourControllers.add(TextEditingController());
    _Act7_2_4AddressControllers.add(TextEditingController());
    _Act7_2_4AgeControllers.add(TextEditingController());
    act7_4ACTIsBreakRule973DetailDNo.add(0);
    act7_4RuleIds.add(0);
    act7_4Ids.add(0);
    final index = Act7_2_4Widgets.length;
    Act7_2_4(
      index,
      _Act7_2_4SrNoControllers[index],
      _Act7_2_4NameAdolescentLabourControllers[index],
      _Act7_2_4AddressControllers[index],
      _Act7_2_4AgeControllers[index],
    );
  }

  void createAct7_5() {
    _Act7_1_3SrNoControllers.clear();
    _Act7_1_3NameChildLabourControllers.clear();
    _Act7_1_3AddressControllers.clear();
    _Act7_1_3AgeControllers.clear();
    act7_5RuleIds.clear();
    act7_5WorkemenSrNo.clear();
    act7_5Ids.clear();

    act7_5WorkemenSrNo.add(0);
    act7_5Ids.add(0);
    act7_5RuleIds.add(0);
    _Act7_1_3SrNoControllers.add(TextEditingController());
    _Act7_1_3NameChildLabourControllers.add(TextEditingController());
    _Act7_1_3AddressControllers.add(TextEditingController());
    _Act7_1_3AgeControllers.add(TextEditingController());
    final index = Act7_1_3Widgets.length;
    Act7_1_3(
      index,
      _Act7_1_3SrNoControllers[index],
      _Act7_1_3NameChildLabourControllers[index],
      _Act7_1_3AddressControllers[index],
      _Act7_1_3AgeControllers[index],
    );
  }

  void createAct8_3() {
    _Act8_3SrNoControllers.clear();
    _Act8_3NameControllers.clear();
    _Act8_3DesgControllers.clear();
    current_suspensionDates.clear();
    _Act8_3DateSuspensionControllers.clear();
    act8_3dessrno.clear();
    act8_3Ids.clear();
    act8_3RuleIds.clear();

    act8_3dessrno.add(0);
    act8_3Ids.add(0);
    act8_3RuleIds.add(0);
    _Act8_3SrNoControllers.add(TextEditingController());
    _Act8_3NameControllers.add(TextEditingController());
    _Act8_3DesgControllers.add(TextEditingController());
    current_suspensionDates.add(DateTime.now());
    _Act8_3DateSuspensionControllers.add(TextEditingController());
    final index = Act8_3Widgets.length;
    Act8_3(
      index,
      _Act8_3SrNoControllers[index],
      _Act8_3NameControllers[index],
      _Act8_3DesgControllers[index],
      current_suspensionDates[index],
      _Act8_3DateSuspensionControllers[index],
    );
  }

  void createAct11_1() {
    _Act11_1SrNoControllers.clear();
    _Act11_1NameControllers.clear();
    _Act11_1DesgControllers.clear();
    _Act11_1DateAppointmentControllers.clear();
    current_appointmentDates.clear();
    act11_1RuleIds.clear();
    act11_1EmployeesActNo.clear();
    act11_1Ids.clear();

    act11_1EmployeesActNo.add(0);
    act11_1Ids.add(0);
    act11_1RuleIds.add(0);
    _Act11_1SrNoControllers.add(TextEditingController());
    _Act11_1NameControllers.add(TextEditingController());
    _Act11_1DesgControllers.add(TextEditingController());
    current_appointmentDates.add(DateTime.now());
    _Act11_1DateAppointmentControllers.add(TextEditingController());
    final index = Act11_1Widgets.length;

    Act11_1(
      index,
      _Act11_1SrNoControllers[index],
      _Act11_1NameControllers[index],
      _Act11_1DesgControllers[index],
      current_appointmentDates[index],
      _Act11_1DateAppointmentControllers[index],
    );
  }

  Widget _buildActs(BuildContext context, AppLanguage appLanguage) {
    if (isSwitchedLanguage == false) {
      appLanguage.changeLanguage(Locale('en'));
    }
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act1_6Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct1_6();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act1_8Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct1_8();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act2_1Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct2_1();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act2_2Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct2_2();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act4_1_5Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct4_1_5();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act4_2_5Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct4_2_5();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act5_4Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct5_4();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act6Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct6();
      }
    });
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act7_3Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct7_3();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act7_2_4Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct7_2_4();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act7_1_3Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct7_5();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act8_3Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct8_3();
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (Act11_1Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
        createAct11_1();
      }
    });
    //
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act2_2Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act2_2SrNoControllers.clear();
    //     _Act2_2WorkerNameControllers.clear();
    //     act2_2Ids.clear();
    //     act2_2NotPaidWorkerDetailDNoIds.clear();
    //     act2_2RuleIds.clear();
    //
    //     _Act2_2SrNoControllers.add(TextEditingController());
    //     _Act2_2WorkerNameControllers.add(TextEditingController());
    //     act2_2NotPaidWorkerDetailDNoIds.add(0);
    //     act2_2RuleIds.add(0);
    //     act2_2Ids.add(0);
    //     final index = Act2_2Widgets.length;
    //     Acts2_2(index, _Act2_2SrNoControllers[index], _Act2_2WorkerNameControllers[index]);
    //   }
    // });
    //
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act4_1_5Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act4_1_5SrNoControllers.clear();
    //     _Act4_1_5NameContractorControllers.clear();
    //     _Act4_1_5NameContractorLabourControllers.clear();
    //     WagesToPaid.clear();
    //     _Act4_1_5WagesTobePaidControllers.clear();
    //     _Act4_1_5DifferAmountControllers.clear();
    //     act4_1_5RuleIds.clear();
    //     act4_1_5Ids.clear();
    //     act4_1_5Sharamk214DNo.clear();
    //
    //     _Act4_1_5SrNoControllers.add(TextEditingController());
    //     _Act4_1_5NameContractorControllers.add(TextEditingController());
    //     _Act4_1_5NameContractorLabourControllers.add(TextEditingController());
    //     WagesToPaid.add(0);
    //     _Act4_1_5WagesTobePaidControllers.add(TextEditingController());
    //     _Act4_1_5DifferAmountControllers.add(TextEditingController());
    //     act4_1_5RuleIds.add(0);
    //     act4_1_5Ids.add(0);
    //     act4_1_5Sharamk214DNo.add(0);
    //     final index = Act4_1_5Widgets.length;
    //     Act4_1_5(
    //       index,
    //       _Act4_1_5SrNoControllers[index],
    //       _Act4_1_5NameContractorControllers[index],
    //       _Act4_1_5NameContractorLabourControllers[index],
    //       WagesToPaid[index],
    //       _Act4_1_5WagesTobePaidControllers[index],
    //       _Act4_1_5DifferAmountControllers[index],
    //     );
    //   }
    // });
    //
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act5_4Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act5_4SrNoControllers.clear();
    //     _Act5_4MaleWorkersControllers.clear();
    //     _Act5_4MDesgControllers.clear();
    //     _Act5_4MSalaryPaidControllers.clear();
    //     _Act5_4FemaleWorkersControllers.clear();
    //     _Act5_4FDesgControllers.clear();
    //     _Act5_4FSalaryPaidControllers.clear();
    //     act5_4RuleIds.clear();
    //     act5_4Ids.clear();
    //
    //     _Act5_4SrNoControllers.add(TextEditingController());
    //     _Act5_4MaleWorkersControllers.add(TextEditingController());
    //     _Act5_4MDesgControllers.add(TextEditingController());
    //     _Act5_4MSalaryPaidControllers.add(TextEditingController());
    //     _Act5_4FemaleWorkersControllers.add(TextEditingController());
    //     _Act5_4FDesgControllers.add(TextEditingController());
    //     _Act5_4FSalaryPaidControllers.add(TextEditingController());
    //     act5_4RuleIds.add(0);
    //     act5_4Ids.add(0);
    //     final index = Act5_4Widgets.length;
    //     Act5_4(index, _Act5_4SrNoControllers[index], _Act5_4MaleWorkersControllers[index], _Act5_4MDesgControllers[index], _Act5_4MSalaryPaidControllers[index], _Act5_4FemaleWorkersControllers[index],
    //         _Act5_4FDesgControllers[index], _Act5_4FSalaryPaidControllers[index]);
    //   }
    // });
    //
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act6Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act6SrNoControllers.clear();
    //     _Act6NameContractorControllers.clear();
    //     _Act6AddressControllers.clear();
    //     _Act6DetailsWorkControllers.clear();
    //     _Act6TimeSinceControllers.clear();
    //     _Act6NoWorkersControllers.clear();
    //     _Act6TotalNoWorkersControllers.clear();
    //     act6ContractorPersonDetailsDetailDNo.clear();
    //     currentTimeSinceDates.clear();
    //     act6RuleIds.clear();
    //     act6Ids.clear();
    //
    //     _Act6SrNoControllers.add(TextEditingController());
    //     _Act6NameContractorControllers.add(TextEditingController());
    //     _Act6AddressControllers.add(TextEditingController());
    //     _Act6DetailsWorkControllers.add(TextEditingController());
    //     _Act6TimeSinceControllers.add(TextEditingController());
    //     _Act6NoWorkersControllers.add(TextEditingController());
    //     _Act6TotalNoWorkersControllers.add(TextEditingController());
    //     currentTimeSinceDates.add(DateTime.now());
    //     act6ContractorPersonDetailsDetailDNo.add(0);
    //     act6RuleIds.add(0);
    //     act6Ids.add(0);
    //     final index = Act6Widgets.length;
    //     Act6(
    //       index,
    //       _Act6SrNoControllers[index],
    //       _Act6NameContractorControllers[index],
    //       _Act6AddressControllers[index],
    //       _Act6DetailsWorkControllers[index],
    //       currentTimeSinceDates[index],
    //       _Act6TimeSinceControllers[index],
    //       _Act6NoWorkersControllers[index],
    //       _Act6TotalNoWorkersControllers[index],
    //     );
    //   }
    // });
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act7_3Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act7_3SrNoControllers.clear();
    //     _Act7_3NameAdolescentLabourControllers.clear();
    //     _Act7_3AddressControllers.clear();
    //     _Act7_3AgeControllers.clear();
    //     act7_3ACTIsBreakRule972DetailDNo.clear();
    //     act7_3RuleIds.clear();
    //     act7_3Ids.clear();
    //
    //     act7_3ACTIsBreakRule972DetailDNo.add(0);
    //     act7_3Ids.add(0);
    //     act7_3RuleIds.add(0);
    //     _Act7_3SrNoControllers.add(TextEditingController());
    //     _Act7_3NameAdolescentLabourControllers.add(TextEditingController());
    //     _Act7_3AddressControllers.add(TextEditingController());
    //     _Act7_3AgeControllers.add(TextEditingController());
    //     final index = Act7_3Widgets.length;
    //     Act7_3(
    //       index,
    //       _Act7_3SrNoControllers[index],
    //       _Act7_3NameAdolescentLabourControllers[index],
    //       _Act7_3AddressControllers[index],
    //       _Act7_3AgeControllers[index],
    //     );
    //   }
    // });
    //
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act7_2_4Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act7_2_4SrNoControllers.clear();
    //     _Act7_2_4NameAdolescentLabourControllers.clear();
    //     _Act7_2_4AddressControllers.clear();
    //     _Act7_2_4AgeControllers.clear();
    //     act7_4RuleIds.clear();
    //     act7_4Ids.clear();
    //
    //     _Act7_2_4SrNoControllers.add(TextEditingController());
    //     _Act7_2_4NameAdolescentLabourControllers.add(TextEditingController());
    //     _Act7_2_4AddressControllers.add(TextEditingController());
    //     _Act7_2_4AgeControllers.add(TextEditingController());
    //     act7_4RuleIds.add(0);
    //     act7_4Ids.add(0);
    //     final index = Act7_2_4Widgets.length;
    //     Act7_2_4(
    //       index,
    //       _Act7_2_4SrNoControllers[index],
    //       _Act7_2_4NameAdolescentLabourControllers[index],
    //       _Act7_2_4AddressControllers[index],
    //       _Act7_2_4AgeControllers[index],
    //     );
    //   }
    // });
    //
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act7_1_3Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act7_1_3SrNoControllers.clear();
    //     _Act7_1_3NameChildLabourControllers.clear();
    //     _Act7_1_3AddressControllers.clear();
    //     _Act7_1_3AgeControllers.clear();
    //     act7_5RuleIds.clear();
    //     act7_5Ids.clear();
    //
    //     act7_5Ids.add(0);
    //     act7_5RuleIds.add(0);
    //     _Act7_1_3SrNoControllers.add(TextEditingController());
    //     _Act7_1_3NameChildLabourControllers.add(TextEditingController());
    //     _Act7_1_3AddressControllers.add(TextEditingController());
    //     _Act7_1_3AgeControllers.add(TextEditingController());
    //     final index = Act7_1_3Widgets.length;
    //     Act7_1_3(
    //       index,
    //       _Act7_1_3SrNoControllers[index],
    //       _Act7_1_3NameChildLabourControllers[index],
    //       _Act7_1_3AddressControllers[index],
    //       _Act7_1_3AgeControllers[index],
    //     );
    //   }
    // });
    //
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act8_3Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act8_3SrNoControllers.clear();
    //     _Act8_3NameControllers.clear();
    //     act8_3Ids.clear();
    //     act8_3RuleIds.clear();
    //
    //     act8_3Ids.add(0);
    //     act8_3RuleIds.add(0);
    //     _Act8_3SrNoControllers.add(TextEditingController());
    //     _Act8_3NameControllers.add(TextEditingController());
    //     _Act8_3DesgControllers.add(TextEditingController());
    //     _Act8_3DateSuspensionControllers.add(TextEditingController());
    //     final index = Act8_3Widgets.length;
    //     Act8_3(
    //       index,
    //       _Act8_3SrNoControllers[index],
    //       _Act8_3NameControllers[index],
    //       _Act8_3DesgControllers[index],
    //       _Act8_3DateSuspensionControllers[index],
    //     );
    //   }
    // });
    //
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   if (Act11_1Widgets.length == 0 && (Type != "edit") && (Type != "view")) {
    //     _Act11_1SrNoControllers.clear();
    //     _Act11_1NameControllers.clear();
    //     _Act11_1DesgControllers.clear();
    //     _Act11_1DateAppointmentControllers.clear();
    //     act11_1RuleIds.clear();
    //     act11_1Ids.clear();
    //
    //     act11_1Ids.add(0);
    //     act11_1RuleIds.add(0);
    //     _Act11_1SrNoControllers.add(TextEditingController());
    //     _Act11_1NameControllers.add(TextEditingController());
    //     _Act11_1DesgControllers.add(TextEditingController());
    //     _Act11_1DateAppointmentControllers.add(TextEditingController());
    //     final index = Act11_1Widgets.length;
    //
    //     Act11_1(
    //       index,
    //       _Act11_1SrNoControllers[index],
    //       _Act11_1NameControllers[index],
    //       _Act11_1DesgControllers[index],
    //       _Act11_1DateAppointmentControllers[index],
    //     );
    //   }
    // });
    _Act1SrNoController.text = "1";
    _Act1_8SrNoController.text = "1";
    _Act2_1SrNoController.text = "1";
    _Act2_2SrnoController.text = "1";
    _Act4_1_1SrNoController.text = "1";
    _Act4_1_5SrNoController.text = "1";
    _Act4_2_5SrNoController.text = "1";
    _Act8_3SrNoController.text = "1";
    _Act11_1SrNoController.text = "1";
    _Act7_2_4SrNoController.text = "1";
    _Act7_3SrNoController.text = "1";
    _Act7_1_3SrNoController.text = "1";
    _Act7_1_2SrNoController.text = "1";
    _Act7_1_1SrNoController.text = "1";
    _Act6SrNoController.text = "1";
    _Act5_4SrNoController.text = "1";
    // _Act1NameControllers.add(TextEditingController());
    // _Act1SrNoControllers.add(TextEditingController());

    // DaliyMonthlys.add(0);

    // isDayMonth.add(false);
    // _Act1_8NameControllers.add(TextEditingController());
    // _Act1_8lengthServiceControllers.add(TextEditingController());
    // _Act1_8dailyWorkHrsControllers.add(TextEditingController());
    // _Act1_8dayMonthControllers.add(TextEditingController());
    // _Act1_8wageEntitledControllers.add(TextEditingController());
    // _Act1_8wagePayableControllers.add(TextEditingController());
    // _Act1_8wagePaidControllers.add(TextEditingController());
    // _Act1_8differenceWageAmountControllers.add(TextEditingController());
    // _Act1_8UploadFiles.add(TextEditingController());
    // _Act1_8remarksControllers.add(TextEditingController());
    // _Act2_1SrNoControllers.add(TextEditingController());
    // _Act2_1FinancialYearControllers.add(TextEditingController());
    // IsFromA.add(false);
    // IsFromB.add(false);
    // IsFromC.add(false);
    // IsFromD.add(false);
    // _Act2_2SrNoControllers.add(TextEditingController());
    // _Act2_2WorkerNameControllers.add(TextEditingController());
    _Act4_1_1SrNoControllers.add(TextEditingController());
    _Act4_1_1NameContractorControllers.add(TextEditingController());
    _Act4_1_1DetailsWorkControllers.add(TextEditingController());
    _Act4_1_1TimeSinceControllers.add(TextEditingController());
    _Act4_1_1NoWorkersControllers.add(TextEditingController());
    // _Act4_1_5SrNoControllers.add(TextEditingController());
    // _Act4_1_5NameContractorControllers.add(TextEditingController());
    // _Act4_1_5NameContractorLabourControllers.add(TextEditingController());
    // _Act4_1_5PaidWagesControllers.add(TextEditingController());
    // _Act4_1_5WagesTobePaidControllers.add(TextEditingController());
    // _Act4_1_5DifferAmountControllers.add(TextEditingController());
    // _Act4_2_5SrNoControllers.add(TextEditingController());
    // _Act4_2_5NameContractorControllers.add(TextEditingController());
    // _Act11_1SrNoControllers.add(TextEditingController());
    // _Act11_1NameControllers.add(TextEditingController());
    // _Act11_1DesgControllers.add(TextEditingController());
    // _Act11_1DateAppointmentControllers.add(TextEditingController());
    // _Act8_3SrNoControllers.add(TextEditingController());
    // _Act8_3NameControllers.add(TextEditingController());
    // _Act8_3DesgControllers.add(TextEditingController());
    // _Act8_3DateSuspensionControllers.add(TextEditingController());
    // _Act7_2_4SrNoControllers.add(TextEditingController());
    // _Act7_2_4NameAdolescentLabourControllers.add(TextEditingController());
    // _Act7_2_4AddressControllers.add(TextEditingController());
    // _Act7_2_4AgeControllers.add(TextEditingController());
    // _Act7_3SrNoControllers.add(TextEditingController());
    // _Act7_3NameAdolescentLabourControllers.add(TextEditingController());
    // _Act7_3AddressControllers.add(TextEditingController());
    // _Act7_3AgeControllers.add(TextEditingController());
    // _Act7_1_3SrNoControllers.add(TextEditingController());
    // _Act7_1_3NameChildLabourControllers.add(TextEditingController());
    // _Act7_1_3AddressControllers.add(TextEditingController());
    // _Act7_1_3AgeControllers.add(TextEditingController());
    _Act7_1_2SrNoControllers.add(TextEditingController());
    _Act7_1_2NameAdolescentLabourControllers.add(TextEditingController());
    _Act7_1_2AddressControllers.add(TextEditingController());
    _Act7_1_2AgeControllers.add(TextEditingController());
    _Act7_1_1SrNoControllers.add(TextEditingController());
    _Act7_1_1NameChildLabourControllers.add(TextEditingController());
    _Act7_1_1AddressControllers.add(TextEditingController());
    _Act7_1_1AgeControllers.add(TextEditingController());
    // _Act6SrNoControllers.add(TextEditingController());
    // _Act6NameContractorControllers.add(TextEditingController());
    // _Act6AddressControllers.add(TextEditingController());
    // _Act6DetailsWorkControllers.add(TextEditingController());
    // _Act6TimeSinceControllers.add(TextEditingController());
    // _Act6NoWorkersControllers.add(TextEditingController());
    // _Act6TotalNoWorkersControllers.add(TextEditingController());
    // _Act5_4SrNoControllers.add(TextEditingController());
    // _Act5_4MaleWorkersControllers.add(TextEditingController());
    // _Act5_4MDesgControllers.add(TextEditingController());
    // _Act5_4MSalaryPaidControllers.add(TextEditingController());
    // _Act5_4FemaleWorkersControllers.add(TextEditingController());
    // _Act5_4FDesgControllers.add(TextEditingController());
    // _Act5_4FSalaryPaidControllers.add(TextEditingController());

    Language selectedLanguage = Language.languageList()[0];
    return Column(
      children: <Widget>[
        // Row(
        //   mainAxisAlignment: MainAxisAlignment.spaceAround,
        //   children: Language.languageList().map((e) =>
        //       Padding(
        //         padding: EdgeInsets.only(right: 10),
        //         child: ElevatedButton(
        //           onPressed: () {
        //             appLanguage.changeLanguage(Locale(e.languageCode));
        //                             },
        //           child: Text("${e.name} ${e.flag}"),
        //         ),),
        //   ).toList(),
        // ),

        Row(children: [
          Text("English"),
          Align(
            alignment: Alignment.center,
            child: Transform.scale(
                scale: 1,
                child: Switch(
                  onChanged: (bool) {
                    setState(() {
                      if (isSwitchedLanguage == false) {
                        isSwitchedLanguage = true;
                        appLanguage.changeLanguage(Locale('gu'));
                      } else {
                        isSwitchedLanguage = false;
                        appLanguage.changeLanguage(Locale('en'));
                      }
                    });
                  },
                  value: isSwitchedLanguage,
                  activeColor: AppStyles.greenColor,
                  activeTrackColor: AppStyles.grey400Color,
                  inactiveThumbColor: AppStyles.white,
                  inactiveTrackColor: AppStyles.grey400Color,
                )),
          ),
          Text("Gujarati"),
        ]),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "1. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act1'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs1 == false) {
                            setState(() {
                              isSwitchedActs1 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs1 = false;
                              isSwitchedActs1_1 = false;
                              isSwitchedActs1_2 = false;
                              isSwitchedActs1_3 = false;
                              isSwitchedActs1_4 = false;
                              isSwitchedActs1_5 = false;
                              isSwitchedActs1_6 = false;
                              isSwitchedActs1_7 = false;
                              isSwitchedActs1_8 = false;
                              isSwitchedActs1_9 = false;
                              isSwitchedActs1_10 = false;
                              isSwitchedActs1_11 = false;
                              isSwitchedActs1_12 = false;
                              isSwitchedActs1_13 = false;
                              isSwitchedActs1_14 = false;
                              isSwitchedActs1_15 = false;
                              isSwitchedActs1_16 = false;
                              isSwitchedActs1_17 = false;
                              isSwitchedActs1_18 = false;
                              isSwitchedActs1_19 = false;
                              isSwitchedActs1_20 = false;
                              isSwitchedActs1_21 = false;
                              _ActSection26dController.text = "";
                              _ActSection214Controller.text = "";
                              _ActRule2bYearController.text = "";
                              _ActRule2bYear1Controller.text = "";
                              _Act1RemarksController.text = "";
                              Act1_6Widgets.clear();
                            });
                          }
                        }
                      },
                      value: isSwitchedActs1,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs1,
                  child: Column(
                    children: [
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act1_1_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "1.1",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          WidgetSpan(
                                            child: Container(
                                              width: 150,
                                              child: TextFormField(
                                                readOnly: isreadOnly,
                                                controller: _ActSection26dController,
                                                maxLines: null,
                                                validator: (text) {
                                                  if (isSwitchedActs1_1 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                              ),
                                            ),
                                          ),
                                          TextSpan(
                                            text: translate('act1_1'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_1 == false) {
                                        setState(() {
                                          isSwitchedActs1_1 = true;
                                          isreadOnly = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_1 = false;
                                          isreadOnly = true;
                                          _ActSection26dController.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_1,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "1.2",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.centerLeft,
                                  child: Text(
                                    translate('act1_2'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_2 == false) {
                                        setState(() {
                                          isSwitchedActs1_2 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_2 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_2,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "1.3",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.centerLeft,
                                  child: Text(
                                    translate('act1_3'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_3 == false) {
                                        setState(() {
                                          isSwitchedActs1_3 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_3 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_3,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.4",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_4'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_4 == false) {
                                        setState(() {
                                          isSwitchedActs1_4 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_4 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_4,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act1_5_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.5",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act1_5_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 150,
                                              child: TextFormField(
                                                readOnly: isreadOnly1_5,
                                                maxLines: null,
                                                controller: _ActSection214Controller,
                                                validator: (text) {
                                                  if (isSwitchedActs1_5 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act1_5_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_5 == false) {
                                        setState(() {
                                          isSwitchedActs1_5 = true;
                                          isreadOnly1_5 = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_5 = false;
                                          isreadOnly1_5 = true;
                                          _ActSection214Controller.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_5,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.6",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_6'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      setState(() {
                                        if (isSwitchedActs1_6 == false) {
                                          isSwitchedActs1_6 = true;
                                          if (Act1_6Widgets.length == 0) {
                                            createAct1_6();
                                          }
                                        } else {
                                          isSwitchedActs1_6 = false;
                                          if (Type == "edit") {
                                            for (int i = 0; i < Act1_6Widgets.length; i++) {
                                              deleteAct1_6(i);
                                              convertXML1_6();
                                            }
                                            Act1_6Widgets.clear();
                                          } else {
                                            Act1_6Widgets.clear();
                                          }
                                        }
                                      });
                                    }
                                  },
                                  value: isSwitchedActs1_6,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Visibility(
                          visible: isSwitchedActs1_6,
                          child: Column(
                            key: act1_6_key,
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  translate('workersInfo'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              Container(
                                  decoration: ShapeDecoration(
                                    shape: RoundedRectangleBorder(
                                      side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                      borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                    ),
                                  ),
                                  child: Padding(
                                    padding: EdgeInsets.all(AppConstants.PADDING_8),
                                    child: Column(
                                      children: [
                                        const SizedBox(
                                          height: AppConstants.PADDING_8,
                                        ),

                                        Form(
                                          key: _form1_6Key,
                                          child: ListView.builder(
                                            shrinkWrap: true,
                                            physics: NeverScrollableScrollPhysics(),
                                            itemCount: Act1_6Widgets.length,
                                            itemBuilder: (context, index) {
                                              // Dynamically added widgets
                                              return Act1_6Widgets[index];
                                            },
                                          ),
                                        ),

                                        const SizedBox(
                                          height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                        ),
                                        Visibility(
                                            visible: Type == "view" ? false : true,
                                            child: Row(children: [
                                              Expanded(
                                                child: AppCustomButton(
                                                  loaderColor: AppStyles.naturalWhiteColor,
                                                  width: 100,
                                                  height: 44,
                                                  background: AppStyles.primary500Color,
                                                  text: translate('addMoreDetails'),
                                                  textColor: AppStyles.white,
                                                  fontWeight: FontWeight.normal,
                                                  fontSize: 14,
                                                  onClicked: () {
                                                    FocusScope.of(context).unfocus();
                                                    int newIndex = Act1_6Widgets.length;
                                                    act1_6WorkerIds.add(0);
                                                    act1_6Ids.add(0);
                                                    act1_6RuleIds.add(0);
                                                    _Act1NameControllers.add(TextEditingController());
                                                    _Act1SrNoControllers.add(TextEditingController());
                                                    Type == "view"
                                                        ? null
                                                        : Acts1_6(
                                                            newIndex,
                                                            _Act1SrNoControllers[newIndex],
                                                            _Act1NameControllers[newIndex],
                                                          );
                                                  },
                                                ),
                                              ),
                                              // SizedBox(width: 10),
                                              // Expanded(
                                              //   child: AppCustomButton(
                                              //     loaderColor: AppStyles.naturalWhiteColor,
                                              //     width: 100,
                                              //     height: 44,
                                              //     background: AppStyles.primary500Color,
                                              //     text: translate('save'),
                                              //     textColor: AppStyles.white,
                                              //     fontWeight: FontWeight.normal,
                                              //     fontSize: 14,
                                              //     onClicked: Type == "view"
                                              //         ? null
                                              //         : () {
                                              //             FocusScope.of(context).unfocus();
                                              //             // Increment the button click count
                                              //             setState(() {
                                              //               buttonClickCount++;
                                              //             });
                                              //             final _form = _form1_6Key.currentState!;
                                              //             if (_form.validate()) {
                                              //               convertXML1_6();
                                              //             }
                                              //           },
                                              //   ),
                                              // ),
                                            ])),

                                        // Add the widgets for employer details here
                                        // (e.g., TextFields, Buttons, etc.)
                                      ],
                                    ),
                                  )),
                            ],
                          )),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.7",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_7'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_7 == false) {
                                        setState(() {
                                          isSwitchedActs1_7 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_7 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_7,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act1_8_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.8",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_8'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      setState(() {
                                        if (isSwitchedActs1_8 == false) {
                                          if (_ListHolderWorkInformationModel.length == 0) {
                                            addWorkInformation1_8();
                                          }
                                          isSwitchedActs1_8 = true;
                                        } else {
                                          isSwitchedActs1_8 = false;
                                          if (_ListHolderWorkInformationModel.length == 0) {
                                            removeWorkInformation1_8();
                                          }
                                          if (Type == "edit") {
                                            for (int i = 0; i < _ListHolderWorkInformationModel.length; i++) {
                                              deleteAct1_8(i);
                                              convertXML1_8();
                                              deleteWorkInformation1_8(i);
                                              setState(() {});
                                            }
                                            _ListHolderWorkInformationModel.clear();
                                          } else {
                                            _ListHolderWorkInformationModel.clear();
                                          }
                                        }
                                      });
                                    }
                                  },
                                  value: isSwitchedActs1_8,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs1_8,
                              child: Container(
                                child: Column(
                                  children: [
                                    Align(
                                      alignment: Alignment.centerLeft,
                                      child: Text(
                                        translate('workersInfo'),
                                        style: AppStyles.textInputStyle,
                                      ),
                                    ),
                                    const SizedBox(
                                      height: 20,
                                    ),
                                    Container(
                                      padding: EdgeInsets.all(AppConstants.PADDING_8),
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Form(
                                          key: _form1_8Key,
                                          child: Container(
                                            child: Column(
                                              children: [
                                                ListView.builder(
                                                    shrinkWrap: true,
                                                    physics: NeverScrollableScrollPhysics(),
                                                    itemCount: _ListHolderWorkInformationModel.length,
                                                    itemBuilder: (context, index) {
                                                      return Padding(
                                                        padding: const EdgeInsets.only(bottom: 20),
                                                        child: Container(
                                                          padding: EdgeInsets.all(AppConstants.PADDING_8),
                                                          decoration: ShapeDecoration(
                                                            shape: RoundedRectangleBorder(
                                                              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                                              borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                                            ),
                                                          ),
                                                          child: Column(
                                                            key: act1_8GlobalKeys[index],
                                                            children: [
                                                              Container(
                                                                child: Column(
                                                                  children: [
                                                                    AppTextField(
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('srNo'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      controller: _ListSerialNoTextEditingController[index],
                                                                      onChanged: (value) {},
                                                                      readOnly: true,
                                                                      textInputType: TextInputType.text,
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      readOnly: Type == "view" ? true : false,
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('name'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      controller: _ListWorkersNameTextEditingController[index],
                                                                      onChanged: (value) {
                                                                        updateWorkerInformation(value, index);
                                                                      },
                                                                      textInputType: TextInputType.text,
                                                                      validator: (text) {
                                                                        if (!(AppUtils.checkRequired(text))) {
                                                                          return translate('nameValidation');
                                                                        }
                                                                        return null;
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      readOnly: Type == "view" ? true : false,
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('desg'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      controller: _ListDesginationEditingController[index],
                                                                      onChanged: (value) {
                                                                        updateDesginationWorkerInformation(value, index);
                                                                      },
                                                                      textInputType: TextInputType.text,
                                                                      validator: (text) {
                                                                        if (!(AppUtils.checkRequired(text))) {
                                                                          return translate('designValidation');
                                                                        }
                                                                        return null;
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      readOnly: Type == "view" ? true : false,
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('lengthofService'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      controller: _ListWorkersLenghtOfServiceEditingController[index],
                                                                      onChanged: (value) {
                                                                        updateWorkersLenghtOfService(value, index);
                                                                      },
                                                                      textInputType: TextInputType.text,
                                                                      validator: (text) {
                                                                        if (!(AppUtils.checkRequired(text))) {
                                                                          return translate('lengthServiceValidation');
                                                                        }
                                                                        return null;
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      readOnly: Type == "view" ? true : false,
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('dailyWorkingHours'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      controller: _ListWorkersDailyWorkingHouseEditingController[index],
                                                                      onChanged: (value) {
                                                                        updateWorkersDailyWorkingHouse(value, index);
                                                                      },
                                                                      textInputType: TextInputType.number,
                                                                      validator: (text) {
                                                                        if (!(AppUtils.checkRequired(text))) {
                                                                          return translate('dailyWorkingValidation');
                                                                        }
                                                                        return null;
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    Align(
                                                                      alignment: Alignment.centerLeft,
                                                                      child: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('dayMonth'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      height: AppConstants.PADDING_8,
                                                                    ),
                                                                    StatefulBuilder(
                                                                      builder: (context, stateDaily) {
                                                                        return Column(children: [
                                                                          // DropdownButtonFormField(
                                                                          //   value:
                                                                          //       _ListWorkersDayMonth[index].length == 0
                                                                          //           ? null
                                                                          //           : _ListWorkersDayMonth[index],
                                                                          //   hint: new Text(translate('select')),
                                                                          //   onChanged: Type == "view"
                                                                          //       ? null
                                                                          //       : (dynamic newValue) {
                                                                          //           stateDaily(() {
                                                                          //             print('Selected: $newValue');
                                                                          //             updateWorkerdropdownLicence(
                                                                          //                 newValue, index);
                                                                          //           });
                                                                          //         },
                                                                          //   validator: (value) {
                                                                          //     if (value == null) {
                                                                          //       return translate('dayMonthValidation');
                                                                          //     } else {
                                                                          //       return null;
                                                                          //     }
                                                                          //   },
                                                                          //   isExpanded: true,
                                                                          //   decoration: InputDecoration(
                                                                          //     border: OutlineInputBorder(
                                                                          //       borderRadius: BorderRadius.circular(10),
                                                                          //     ),
                                                                          //     enabledBorder: OutlineInputBorder(
                                                                          //       borderRadius: BorderRadius.circular(10),
                                                                          //       borderSide: BorderSide(
                                                                          //           color: Colors
                                                                          //               .grey), // Customize the border color
                                                                          //     ),
                                                                          //     focusedBorder: OutlineInputBorder(
                                                                          //       borderRadius: BorderRadius.circular(10),
                                                                          //       borderSide: BorderSide(
                                                                          //           color: AppStyles
                                                                          //               .primary500Color), // Customize the focused border color
                                                                          //     ),
                                                                          //   ),
                                                                          //   items: <String>[
                                                                          //     'Daily',
                                                                          //     'Monthly',
                                                                          //   ].map<DropdownMenuItem<String>>(
                                                                          //       (String value) {
                                                                          //     return DropdownMenuItem<String>(
                                                                          //       value: value,
                                                                          //       child: Text(value),
                                                                          //     );
                                                                          //   }).toList(),
                                                                          // ),
                                                                          DropdownButtonFormField(
                                                                            hint: new Text(translate('select')),
                                                                            value: _ListWorkersDayMonth[index] == 0 ? null : _ListWorkersDayMonth[index],
                                                                            onChanged: (dynamic newValue) {
                                                                              stateDaily(() {
                                                                                _ListWorkersDayMonth[index] = newValue!;
                                                                                if (_ListWorkersDayMonth[index] == 1) {
                                                                                  _ListIsWorkersMonth[index] = false;
                                                                                  _ListIsWorkersDay[index] = true;
                                                                                } else if (_ListWorkersDayMonth[index] == 2) {
                                                                                  _ListIsWorkersDay[index] = false;
                                                                                  _ListIsWorkersMonth[index] = true;
                                                                                }
                                                                              });
                                                                            },
                                                                            validator: (value) {
                                                                              if (value == null) {
                                                                                return 'Please Select DayMonth';
                                                                              } else {
                                                                                return null;
                                                                              }
                                                                            },
                                                                            isExpanded: true,
                                                                            decoration: InputDecoration(
                                                                              border: OutlineInputBorder(
                                                                                borderRadius: BorderRadius.circular(10),
                                                                              ),
                                                                              enabledBorder: OutlineInputBorder(
                                                                                borderRadius: BorderRadius.circular(10),
                                                                                borderSide: BorderSide(color: Colors.grey), // Customize the border color
                                                                              ),
                                                                              focusedBorder: OutlineInputBorder(
                                                                                borderRadius: BorderRadius.circular(10),
                                                                                borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
                                                                              ),
                                                                            ),
                                                                            items: DailyMonthlyList.map(
                                                                              (map) {
                                                                                return DropdownMenuItem<dynamic>(
                                                                                  value: map.DataValue,
                                                                                  child: Text(
                                                                                    map.DisplayValue ?? "",
                                                                                  ),
                                                                                );
                                                                              },
                                                                            ).toList(),
                                                                          ),
                                                                          Visibility(
                                                                            visible: _ListIsWorkersDay[index],
                                                                            child: Column(children: [
                                                                              const SizedBox(
                                                                                height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                                                              ),
                                                                              AppTextField(
                                                                                readOnly: Type == "view" ? true : false,
                                                                                textInputAction: TextInputAction.next,
                                                                                titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                                title: RichText(
                                                                                  text: TextSpan(
                                                                                    children: [
                                                                                      TextSpan(
                                                                                        text: translate('wagesPaidPerDay'),
                                                                                        style: TextStyle(
                                                                                          color: Colors.black,
                                                                                          // Customize the title text color
                                                                                          fontSize: 16, // Customize the title text size
                                                                                        ),
                                                                                      ),
                                                                                      TextSpan(
                                                                                        text: ' *', // Suffix text
                                                                                        style: TextStyle(
                                                                                          color: Colors.red, // Customize the suffix text color
                                                                                        ),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ),
                                                                                controller: _ListWorkerSwagesPaidPerDayEditingController[index],
                                                                                textInputType: TextInputType.number,
                                                                                validator: (text) {
                                                                                  if (!(AppUtils.checkRequired(text))) {
                                                                                    return 'Please Enter Wages Paid Per Day';
                                                                                  }
                                                                                  return null;
                                                                                },
                                                                              ),
                                                                            ]),
                                                                          ),
                                                                          Visibility(
                                                                            visible: _ListIsWorkersMonth[index],
                                                                            child: Column(children: [
                                                                              const SizedBox(
                                                                                height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                                                              ),
                                                                              AppTextField(
                                                                                readOnly: Type == "view" ? true : false,
                                                                                textInputAction: TextInputAction.next,
                                                                                titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                                title: RichText(
                                                                                  text: TextSpan(
                                                                                    children: [
                                                                                      TextSpan(
                                                                                        text: translate('wagesPaidPerMonth'),
                                                                                        style: TextStyle(
                                                                                          color: Colors.black,
                                                                                          // Customize the title text color
                                                                                          fontSize: 16, // Customize the title text size
                                                                                        ),
                                                                                      ),
                                                                                      TextSpan(
                                                                                        text: ' *', // Suffix text
                                                                                        style: TextStyle(
                                                                                          color: Colors.red, // Customize the suffix text color
                                                                                        ),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ),
                                                                                controller: _ListWorkerSwagesPaidPerMonthEditingController[index],
                                                                                textInputType: TextInputType.number,
                                                                                validator: (text) {
                                                                                  if (!(AppUtils.checkRequired(text))) {
                                                                                    return 'Please Enter Wages Paid Per Month';
                                                                                  }
                                                                                  return null;
                                                                                },
                                                                              ),
                                                                            ]),
                                                                          ),
                                                                        ]);
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: AppConstants.CORNER_RADIUS,
                                                                    ),
                                                                    // if (_ListWorkersDayMonth[index] == 1)
                                                                    //   AppTextField(
                                                                    //     readOnly: Type == "view" ? true : false,
                                                                    //     textInputAction: TextInputAction.next,
                                                                    //     titleTextStyle: AppStyles.normalTextStyle
                                                                    //         .copyWith(fontSize: 16),
                                                                    //     title: RichText(
                                                                    //       text: TextSpan(
                                                                    //         children: [
                                                                    //           TextSpan(
                                                                    //             text: translate('wagesPaidPerDay'),
                                                                    //             style: TextStyle(
                                                                    //               color: Colors.black,
                                                                    //               // Customize the title text color
                                                                    //               fontSize:
                                                                    //                   16, // Customize the title text size
                                                                    //             ),
                                                                    //           ),
                                                                    //           TextSpan(
                                                                    //             text: ' *', // Suffix text
                                                                    //             style: TextStyle(
                                                                    //               color: Colors
                                                                    //                   .red, // Customize the suffix text color
                                                                    //             ),
                                                                    //           ),
                                                                    //         ],
                                                                    //       ),
                                                                    //     ),
                                                                    //     controller:
                                                                    //         _ListWorkerSwagesPaidPerDayEditingController[
                                                                    //             index],
                                                                    //     onChanged: (value) {
                                                                    //       WorkerSwagesPaidPerDay(value, index);
                                                                    //     },
                                                                    //     textInputType: TextInputType.number,
                                                                    //     validator: (text) {
                                                                    //       if (!(AppUtils.checkRequired(text))) {
                                                                    //         return translate('dataValidation');
                                                                    //       }
                                                                    //       return null;
                                                                    //     },
                                                                    //   ),
                                                                    // // const SizedBox(
                                                                    // //   height: 10,
                                                                    // // ),
                                                                    // if (_ListWorkersDayMonth[index] == 2)
                                                                    //   AppTextField(
                                                                    //     readOnly: Type == "view" ? true : false,
                                                                    //     textInputAction: TextInputAction.next,
                                                                    //     titleTextStyle: AppStyles.normalTextStyle
                                                                    //         .copyWith(fontSize: 16),
                                                                    //     title: RichText(
                                                                    //       text: TextSpan(
                                                                    //         children: [
                                                                    //           TextSpan(
                                                                    //             text: translate('wagesPaidPerMonth'),
                                                                    //             style: TextStyle(
                                                                    //               color: Colors.black,
                                                                    //               // Customize the title text color
                                                                    //               fontSize:
                                                                    //                   16, // Customize the title text size
                                                                    //             ),
                                                                    //           ),
                                                                    //           TextSpan(
                                                                    //             text: ' *', // Suffix text
                                                                    //             style: TextStyle(
                                                                    //               color: Colors
                                                                    //                   .red, // Customize the suffix text color
                                                                    //             ),
                                                                    //           ),
                                                                    //         ],
                                                                    //       ),
                                                                    //     ),
                                                                    //     controller:
                                                                    //         _ListWorkerSwagesPaidPerMonthEditingController[
                                                                    //             index],
                                                                    //     onChanged: (value) {
                                                                    //       WorkerSwagesPaidPerMonth(value, index);
                                                                    //     },
                                                                    //     textInputType: TextInputType.number,
                                                                    //     validator: (text) {
                                                                    //       if (!(AppUtils.checkRequired(text))) {
                                                                    //         return translate('dataValidation');
                                                                    //       }
                                                                    //       return null;
                                                                    //     },
                                                                    //   ),

                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('wagesEntitledfromDate'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      suffixIcon: IconButton(
                                                                        onPressed: () async {
                                                                          final DateTime? pickedDate = await showDatePicker(
                                                                            context: context,
                                                                            initialDate: current_wagesEntitleds[index],
                                                                            firstDate: DateTime(1900),
                                                                            // Set a very distant past date
                                                                            lastDate: DateTime.now(),
                                                                            // Set a very distant future date
                                                                            initialDatePickerMode: DatePickerMode.day,
                                                                          );
                                                                          if (pickedDate != null && pickedDate != current_wagesEntitleds[index]) {
                                                                            setState(() {
                                                                              current_wagesEntitleds[index] = pickedDate;
                                                                              String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                                                              _ListWorkersWagesEntitledFormDateEditingController[index].text = formDate;
                                                                            });
                                                                          }
                                                                        },
                                                                        icon: Icon(
                                                                          Icons.calendar_today,
                                                                        ),
                                                                      ),
                                                                      readOnly: true,
                                                                      onTap: () async {
                                                                        final DateTime? pickedDate = await showDatePicker(
                                                                          context: context,
                                                                          initialDate: current_wagesEntitleds[index],
                                                                          firstDate: DateTime(1900),
                                                                          // Set a very distant past date
                                                                          lastDate: DateTime.now(),
                                                                          // Set a very distant future date
                                                                          initialDatePickerMode: DatePickerMode.day,
                                                                        );
                                                                        if (pickedDate != null && pickedDate != current_wagesEntitleds) {
                                                                          setState(() {
                                                                            current_wagesEntitleds[index] = pickedDate;
                                                                            String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                                                            _ListWorkersWagesEntitledFormDateEditingController[index].text = formDate;
                                                                          });
                                                                        }
                                                                      },
                                                                      textInputType: TextInputType.text,
                                                                      controller: _ListWorkersWagesEntitledFormDateEditingController[index],
                                                                      validator: (text) {
                                                                        if (!(AppUtils.checkRequired(text))) {
                                                                          return translate('wagesDateValidation');
                                                                        }
                                                                        return null;
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      readOnly: Type == "view" ? true : false,
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('wagesPayable'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      controller: _ListWorkersWagesPayableEditingController[index],
                                                                      onChanged: (_) => _calculateAct1_8Total(),
                                                                      textInputType: TextInputType.number,
                                                                      inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                                                                      validator: (text) {
                                                                        if (!(AppUtils.checkRequired(text))) {
                                                                          return translate('wagesPayableValidation');
                                                                        }
                                                                        return null;
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      readOnly: Type == "view" ? true : false,
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('wagesPaid'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      controller: _ListWorkersWagesPaidEditingController[index],
                                                                      onChanged: (_) => _calculateAct1_8Total(),
                                                                      textInputType: TextInputType.number,
                                                                      inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                                                                      validator: (text) {
                                                                        if (!(AppUtils.checkRequired(text))) {
                                                                          return translate('wagesPaidValidation');
                                                                        }
                                                                        return null;
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      readOnly: true,
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: RichText(
                                                                        text: TextSpan(
                                                                          children: [
                                                                            TextSpan(
                                                                              text: translate('differenceWagesAmount'),
                                                                              style: TextStyle(
                                                                                color: Colors.black, // Customize the title text color
                                                                                fontSize: 16, // Customize the title text size
                                                                              ),
                                                                            ),
                                                                            TextSpan(
                                                                              text: ' *', // Suffix text
                                                                              style: TextStyle(
                                                                                color: Colors.red, // Customize the suffix text color
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      controller: _ListWorkersDiffrenceWagesAmountEditingController[index],
                                                                      textInputType: TextInputType.number,
                                                                      validator: (text) {
                                                                        if (!(AppUtils.checkRequired(text))) {
                                                                          return translate('wagesAmountValidation');
                                                                        }
                                                                        return null;
                                                                      },
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    Align(
                                                                      alignment: Alignment.centerLeft,
                                                                      child: Text(
                                                                        translate('uploadStatement'),
                                                                        style: AppStyles.textInputStyle,
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      height: AppConstants.PADDING_8,
                                                                    ),
                                                                    Container(
                                                                      decoration: ShapeDecoration(
                                                                        shape: RoundedRectangleBorder(
                                                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                                                        ),
                                                                      ),
                                                                      child: Padding(
                                                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                                                        child: Row(
                                                                          children: [
                                                                            Expanded(
                                                                              flex: 1,
                                                                              child: Align(
                                                                                alignment: Alignment.centerLeft,
                                                                                child: AppCustomButton(
                                                                                  loaderColor: AppStyles.naturalWhiteColor,
                                                                                  width: 110,
                                                                                  background: AppStyles.greyButtonColor,
                                                                                  text: translate('chooseFile'),
                                                                                  textColor: AppStyles.black,
                                                                                  fontWeight: FontWeight.normal,
                                                                                  fontSize: 12,
                                                                                  onClicked: () {
                                                                                    Type == "view"
                                                                                        ? null
                                                                                        : showModalBottomSheet<void>(
                                                                                            context: context,
                                                                                            builder: (BuildContext context) {
                                                                                              return Container(
                                                                                                child: Wrap(
                                                                                                  children: <Widget>[
                                                                                                    ListTile(
                                                                                                      leading: Icon(Icons.camera),
                                                                                                      title: Text('Open Camera'),
                                                                                                      onTap: () async {
                                                                                                        if (isAppOnline) {
                                                                                                          _openCamera("Worker1_8", index);
                                                                                                        } else {
                                                                                                          _openCameraForOfflineMode("Worker1_8", index);
                                                                                                        }

                                                                                                        Navigator.of(context).pop();
                                                                                                      },
                                                                                                    ),
                                                                                                    ListTile(
                                                                                                      leading: Icon(Icons.photo),
                                                                                                      title: Text('Open Gallery'),
                                                                                                      onTap: () {
                                                                                                        if (isAppOnline) {
                                                                                                          _openGallery("Worker1_8", index);
                                                                                                        } else {
                                                                                                          _openGalleryForOfflineMode("Worker1_8", index);
                                                                                                        }

                                                                                                        Navigator.of(context).pop();
                                                                                                      },
                                                                                                    ),
                                                                                                    ListTile(
                                                                                                      leading: Icon(Icons.folder),
                                                                                                      title: Text('Open Document Picker'),
                                                                                                      onTap: () {
                                                                                                        if (isAppOnline) {
                                                                                                          _openDocumentPicker("Worker1_8", index);
                                                                                                        } else {
                                                                                                          _openDocumentForOfflineMode("Worker1_8", index);
                                                                                                        }
                                                                                                        Navigator.of(context).pop();
                                                                                                      },
                                                                                                    ),
                                                                                                  ],
                                                                                                ),
                                                                                              );
                                                                                            },
                                                                                          );
                                                                                  },
                                                                                ),
                                                                              ),
                                                                            ),
                                                                            if (!isAppOnline)
                                                                              Expanded(
                                                                                flex: 1,
                                                                                child: Text(
                                                                                  _ListHolderWorkInformationModel[index].file_name.isNotEmpty
                                                                                      ? _ListHolderWorkInformationModel[index].file_name.split('/').last
                                                                                      : '',
                                                                                  maxLines: 2,
                                                                                  style: AppStyles.textInputStyle,
                                                                                ),
                                                                              )
                                                                            else
                                                                              Expanded(
                                                                                flex: 1,
                                                                                child: Text(
                                                                                  _ListHolderWorkInformationModel[index].file_name,
                                                                                  maxLines: 2,
                                                                                  style: AppStyles.textInputStyle,
                                                                                ),
                                                                              ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    if (isWorkerInformationDownloadImage(index))
                                                                      SizedBox(
                                                                        width: double.infinity,
                                                                        child: ElevatedButton(
                                                                          onPressed: () {
                                                                            String name = findWorkerInformationFileUploadName(index);
                                                                            String path = findWorkerInformationFileUploadPath(index);
                                                                            downloadFile(name, path);
                                                                          },
                                                                          child: Text('Download'),
                                                                        ),
                                                                      ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    AppTextField(
                                                                      readOnly: Type == "view" ? true : false,
                                                                      textInputAction: TextInputAction.next,
                                                                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                                                      title: Text(translate('remark')),
                                                                      controller: _ListWorkersRemarksAmountEditingController[index],
                                                                      onChanged: (value) {
                                                                        updateWorkersRemarksAmount(value, index);
                                                                      },
                                                                      textInputType: TextInputType.text,
                                                                    ),
                                                                    const SizedBox(
                                                                      height: 20,
                                                                    ),
                                                                    Visibility(
                                                                      visible: Type == "view" ? false : true,
                                                                      child: Align(
                                                                        alignment: Alignment.centerRight,
                                                                        child: AppCustomButton(
                                                                          loaderColor: AppStyles.naturalWhiteColor,
                                                                          background: AppStyles.primary500Color,
                                                                          text: translate('delete'),
                                                                          width: 100,
                                                                          height: 44,
                                                                          endIcon: Icon(Icons.delete),
                                                                          textColor: AppStyles.white,
                                                                          fontWeight: FontWeight.normal,
                                                                          fontSize: 14,
                                                                          onClicked: () {
                                                                            FocusScope.of(context).unfocus();
                                                                            deleteAct1_8(index);
                                                                            deleteWorkInformation1_8(index);
                                                                            _ListSerialNoTextEditingController[index].text = "${(_ListHolderWorkInformationModel.length)}";
                                                                            setState(() {});
                                                                          },
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      height: AppConstants.PADDING_8,
                                                                    ),
                                                                  ],
                                                                ),
                                                              )
                                                            ],
                                                          ),
                                                        ),
                                                      );
                                                    }),
                                                const SizedBox(
                                                  height: AppConstants.PADDING_8,
                                                ),
                                                Visibility(
                                                  visible: Type == "view" ? false : true,
                                                  child: Row(children: [
                                                    Expanded(
                                                      child: AppCustomButton(
                                                        loaderColor: AppStyles.naturalWhiteColor,
                                                        width: 100,
                                                        height: 44,
                                                        background: AppStyles.primary500Color,
                                                        text: translate('addMoreDetails'),
                                                        textColor: AppStyles.white,
                                                        fontWeight: FontWeight.normal,
                                                        fontSize: 14,
                                                        onClicked: Type == "view"
                                                            ? null
                                                            : () {
                                                                FocusScope.of(context).unfocus();
                                                                addWorkInformation1_8();
                                                              },
                                                      ),
                                                    ),
                                                    // SizedBox(width: 10),
                                                    // Expanded(
                                                    //   child: AppCustomButton(
                                                    //     loaderColor: AppStyles.naturalWhiteColor,
                                                    //     width: 100,
                                                    //     height: 44,
                                                    //     background: AppStyles.primary500Color,
                                                    //     text: translate('save'),
                                                    //     textColor: AppStyles.white,
                                                    //     fontWeight: FontWeight.normal,
                                                    //     fontSize: 14,
                                                    //     onClicked: Type == "view"
                                                    //         ? null
                                                    //         : () async {
                                                    //             FocusScope.of(context).unfocus();
                                                    //             setState(() {
                                                    //               buttonClickCount1_8++;
                                                    //             });
                                                    //             if (_form1_8Key.currentState!.validate()) {
                                                    //               await convertXML1_8();
                                                    //             }
                                                    //           },
                                                    //   ),
                                                    // ),
                                                  ]),
                                                ),
                                                const SizedBox(
                                                  height: AppConstants.PADDING_8,
                                                ),
                                              ],
                                            ),
                                          )),
                                    )
                                  ],
                                ),
                              )),
                          const SizedBox(
                            height: AppConstants.PADDING_8,
                          ),
                          Visibility(
                              visible: false,
                              child: Column(
                                children: [
                                  Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      translate('workersInfo'),
                                      style: AppStyles.textInputStyle,
                                    ),
                                  ),
                                  Container(
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        child: Column(
                                          children: [
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            // AppTextField(
                                            //     textInputAction: TextInputAction.next,
                                            //     titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //     title: Text(translate('srNo')),
                                            //     controller: _Act1_8SrNoController,
                                            //     textInputType: TextInputType.text,
                                            //     readOnly: true),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('name')),
                                            //   controller: _Act1_8NameController,
                                            //   textInputType: TextInputType.text,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('nameValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            // ),
                                            //
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('desg')),
                                            //   controller: _Act1_8DesgController,
                                            //   textInputType: TextInputType.text,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('designValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('lengthofService')),
                                            //   controller: _Act1_8lengthServiceController,
                                            //   textInputType: TextInputType.text,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('dailyWorkingHours')),
                                            //   controller: _Act1_8dailyWorkHrsController,
                                            //   textInputType: TextInputType.number,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            //
                                            // Align(
                                            //   key: act1_8_key,
                                            //   alignment: Alignment.centerLeft,
                                            //   child: Text(
                                            //     translate('dayMonth'),
                                            //     style: AppStyles.textInputStyle,
                                            //   ),
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING_8,
                                            // ),
                                            // DropdownButtonFormField(
                                            //   hint: new Text(translate('select')),
                                            //   value: selectedDailyMonthly,
                                            //   onChanged: (dynamic newValue) {
                                            //     setState(() {
                                            //       selectedDailyMonthly = newValue!;
                                            //     });
                                            //   },
                                            //   validator: (value) {
                                            //     if (value == null) {
                                            //       return 'Please Select Daily Monthly';
                                            //     } else {
                                            //       return null;
                                            //     }
                                            //   },
                                            //   isExpanded: true,
                                            //   decoration: InputDecoration(
                                            //     border: OutlineInputBorder(
                                            //       borderRadius: BorderRadius.circular(10),
                                            //     ),
                                            //     enabledBorder: OutlineInputBorder(
                                            //       borderRadius: BorderRadius.circular(10),
                                            //       borderSide:
                                            //           BorderSide(color: Colors.grey), // Customize the border color
                                            //     ),
                                            //     focusedBorder: OutlineInputBorder(
                                            //       borderRadius: BorderRadius.circular(10),
                                            //       borderSide: BorderSide(
                                            //           color: AppStyles
                                            //               .primary500Color), // Customize the focused border color
                                            //     ),
                                            //   ),
                                            //   items: DailyMonthlyList.map(
                                            //     (map) {
                                            //       return DropdownMenuItem<dynamic>(
                                            //         value: map.DataValue,
                                            //         child: Text(
                                            //           map.DisplayValue ?? "",
                                            //         ),
                                            //       );
                                            //     },
                                            //   ).toList(),
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            // ),
                                            // Visibility(
                                            //   visible: selectedDailyMonthly == null ? false : true,
                                            //   child: selectedDailyMonthly == 1
                                            //       ? AppTextField(
                                            //           textInputAction: TextInputAction.next,
                                            //           titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //           title: Text(translate('wagesPaidPerDay')),
                                            //           controller: _Act1_8dayMonthController,
                                            //           textInputType: TextInputType.number,
                                            //           validator: (text) {
                                            //             if (!(AppUtils.checkRequired(text))) {
                                            //               return translate('dataValidation');
                                            //             }
                                            //             return null;
                                            //           },
                                            //         )
                                            //       : AppTextField(
                                            //           textInputAction: TextInputAction.next,
                                            //           titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //           title: Text(translate('wagesPaidPerMonth')),
                                            //           controller: _Act1_8dayMonthController,
                                            //           textInputType: TextInputType.text,
                                            //           validator: (text) {
                                            //             if (!(AppUtils.checkRequired(text))) {
                                            //               return translate('dataValidation');
                                            //             }
                                            //             return null;
                                            //           },
                                            //         ),
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING30,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('wagesEntitledfromDate')),
                                            //   suffixIcon: IconButton(
                                            //     onPressed: () => _select_wagesEntitledDate(context),
                                            //     icon: Icon(
                                            //       Icons.calendar_today,
                                            //     ),
                                            //   ),
                                            //   controller: _Act1_8wageEntitledController,
                                            //   readOnly: true,
                                            //   onTap: () => _select_wagesEntitledDate(context),
                                            //   textInputType: TextInputType.text,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('wagesPayable')),
                                            //   controller: _Act1_8wagePayableController,
                                            //   textInputType: TextInputType.number,
                                            //   onChanged: (_) => updateDiffrenceAmount(),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('wagesPaid')),
                                            //   controller: _Act1_8wagePaidController,
                                            //   textInputType: TextInputType.number,
                                            //   onChanged: (_) => updateDiffrenceAmount(),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('differenceWagesAmount')),
                                            //   controller: _Act1_8differenceWageAmountController,
                                            //   readOnly: true,
                                            //   textInputType: TextInputType.number,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerLeft,
                                            //   child: Text(
                                            //     translate('uploadStatement'),
                                            //     style: AppStyles.textInputStyle,
                                            //   ),
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING_8,
                                            // ),
                                            // Container(
                                            //   decoration: ShapeDecoration(
                                            //     shape: RoundedRectangleBorder(
                                            //       side: BorderSide(
                                            //           color: AppStyles.greyIconColor,
                                            //           width: 1.0,
                                            //           style: BorderStyle.solid),
                                            //       borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                            //     ),
                                            //   ),
                                            //   child: Padding(
                                            //     padding: EdgeInsets.all(AppConstants.PADDING_8),
                                            //     child: Row(
                                            //       children: [
                                            //         Expanded(
                                            //           flex: 1,
                                            //           child: Align(
                                            //             alignment: Alignment.centerLeft,
                                            //             child: AppCustomButton(
                                            //               loaderColor: AppStyles.naturalWhiteColor,
                                            //               width: 110,
                                            //               background: AppStyles.greyButtonColor,
                                            //               text: translate('chooseFile'),
                                            //               textColor: AppStyles.black,
                                            //               fontWeight: FontWeight.normal,
                                            //               fontSize: 12,
                                            //               onClicked: () {
                                            //                 showModalBottomSheet<void>(
                                            //                   context: context,
                                            //                   builder: (BuildContext context) {
                                            //                     return Container(
                                            //                       child: Wrap(
                                            //                         children: <Widget>[
                                            //                           ListTile(
                                            //                             leading: Icon(Icons.camera),
                                            //                             title: Text('Open Camera'),
                                            //                             onTap: () {
                                            //                               _openCamera("Worker1_8");
                                            //                               Navigator.of(context).pop();
                                            //                             },
                                            //                           ),
                                            //                           ListTile(
                                            //                             leading: Icon(Icons.photo),
                                            //                             title: Text('Open Gallery'),
                                            //                             onTap: () {
                                            //                               _openGallery("Worker1_8");
                                            //                               Navigator.of(context).pop();
                                            //                             },
                                            //                           ),
                                            //                           ListTile(
                                            //                             leading: Icon(Icons.folder),
                                            //                             title: Text('Open Document Picker'),
                                            //                             onTap: () {
                                            //                               _openDocumentPicker("Worker1_8");
                                            //                               Navigator.of(context).pop();
                                            //                             },
                                            //                           ),
                                            //                         ],
                                            //                       ),
                                            //                     );
                                            //                   },
                                            //                 );
                                            //               },
                                            //             ),
                                            //           ),
                                            //         ),
                                            //         Expanded(
                                            //           flex: 1,
                                            //           child: Text(
                                            //             ImageName,
                                            //             maxLines: 2,
                                            //             style: AppStyles.textInputStyle,
                                            //           ),
                                            //         ),
                                            //       ],
                                            //     ),
                                            //   ),
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('remark')),
                                            //   controller: _Act1_8remarksController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            //
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING_8,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerRight,
                                            //   child: AppCustomButton(
                                            //     loaderColor: AppStyles.naturalWhiteColor,
                                            //     width: 100,
                                            //     height: 44,
                                            //     endIcon: Icon(Icons.delete),
                                            //     background: AppStyles.primary500Color,
                                            //     text: translate('delete'),
                                            //     textColor: AppStyles.white,
                                            //     fontWeight: FontWeight.normal,
                                            //     fontSize: 14,
                                            //     onClicked: () {
                                            //       setState(() {
                                            //         Act1_8Widgets.removeAt(Act1_8Widgets.length - 1);
                                            //       });
                                            //     },
                                            //   ),
                                            // ),
                                            Form(
                                              key: _form1_8Key,
                                              child: ListView.builder(
                                                shrinkWrap: true,
                                                physics: NeverScrollableScrollPhysics(),
                                                itemCount: Act1_8Widgets.length,
                                                itemBuilder: (context, index) {
                                                  // Dynamically added widgets
                                                  return Act1_8Widgets[index];
                                                },
                                              ),
                                            ),

                                            const SizedBox(
                                              height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            ),
                                            Row(children: [
                                              Expanded(
                                                child: AppCustomButton(
                                                  loaderColor: AppStyles.naturalWhiteColor,
                                                  width: 100,
                                                  height: 44,
                                                  background: AppStyles.primary500Color,
                                                  text: translate('addMoreDetails'),
                                                  textColor: AppStyles.white,
                                                  fontWeight: FontWeight.normal,
                                                  fontSize: 14,
                                                  onClicked: Type == "view"
                                                      ? null
                                                      : () {
                                                          int newIndex = Act1_8Widgets.length;
                                                          act1_8Ids.add(0);
                                                          act1_8Rule8MinWorkerIds.add(0);
                                                          act1_8RuleIds.add(0);
                                                          // WagesToPaid.add(0);
                                                          DaliyMonthlys.add(0);
                                                          isMonth.add(false);
                                                          isDay.add(false);
                                                          current_wagesEntitleds.add(DateTime.now());
                                                          _Act1_8SrNoControllers.add(TextEditingController());
                                                          _Act1_8NameControllers.add(TextEditingController());
                                                          _Act1_8DesgControllers.add(TextEditingController());
                                                          _Act1_8lengthServiceControllers.add(TextEditingController());
                                                          _Act1_8dailyWorkHrsControllers.add(TextEditingController());
                                                          _Act1_8dayControllers.add(TextEditingController());
                                                          _Act1_8MonthControllers.add(TextEditingController());
                                                          _Act1_8wageEntitledControllers.add(TextEditingController());
                                                          _Act1_8wagePayableControllers.add(TextEditingController());
                                                          _Act1_8wagePaidControllers.add(TextEditingController());
                                                          _Act1_8differenceWageAmountControllers.add(TextEditingController());
                                                          _Act1_8UploadFiles.add(TextEditingController());
                                                          _Act1_8remarksControllers.add(TextEditingController());
                                                          Acts1_8(
                                                              newIndex,
                                                              _Act1_8SrNoControllers[newIndex],
                                                              _Act1_8NameControllers[newIndex],
                                                              _Act1_8DesgControllers[newIndex],
                                                              _Act1_8lengthServiceControllers[newIndex],
                                                              _Act1_8dailyWorkHrsControllers[newIndex],
                                                              _Act1_8dayControllers[newIndex],
                                                              _Act1_8MonthControllers[newIndex],
                                                              current_wagesEntitleds[newIndex],
                                                              DaliyMonthlys[newIndex],
                                                              isMonth[newIndex],
                                                              isDay[newIndex],
                                                              _Act1_8wageEntitledControllers[newIndex],
                                                              _Act1_8wagePayableControllers[newIndex],
                                                              _Act1_8wagePaidControllers[newIndex],
                                                              _Act1_8differenceWageAmountControllers[newIndex],
                                                              _Act1_8remarksControllers[newIndex]);
                                                        },
                                                ),
                                              ),
                                              SizedBox(width: 10),
                                              Expanded(
                                                child: AppCustomButton(
                                                  loaderColor: AppStyles.naturalWhiteColor,
                                                  width: 100,
                                                  height: 44,
                                                  background: AppStyles.primary500Color,
                                                  text: translate('save'),
                                                  textColor: AppStyles.white,
                                                  fontWeight: FontWeight.normal,
                                                  fontSize: 14,
                                                  onClicked: Type == "view"
                                                      ? null
                                                      : () {
                                                          final _form = _form1_8Key.currentState!;
                                                          if (_form.validate()) {
                                                            convertXML1_8();
                                                          }
                                                        },
                                                ),
                                              ),
                                            ])

                                            // Add the widgets for employer details here
                                            // (e.g., TextFields, Buttons, etc.)
                                          ],
                                        ),
                                      )),
                                ],
                              )),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.9",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_9'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_9 == false) {
                                        setState(() {
                                          isSwitchedActs1_9 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_9 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_9,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.10",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_10'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_10 == false) {
                                        setState(() {
                                          isSwitchedActs1_10 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_10 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_10,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.11",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_11'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_11 == false) {
                                        setState(() {
                                          isSwitchedActs1_11 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_11 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_11,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.12",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_12'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_12 == false) {
                                        setState(() {
                                          isSwitchedActs1_12 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_12 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_12,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act1_13_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.13",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act1_13_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyRule2bYear,
                                                controller: _ActRule2bYearController,
                                                validator: (text) {
                                                  if (isSwitchedActs1_13 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act1_13_2'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyRule2bYear,
                                                controller: _ActRule2bYear1Controller,
                                                validator: (text) {
                                                  if (isSwitchedActs1_13 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act1_13_3'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_13 == false) {
                                        setState(() {
                                          isSwitchedActs1_13 = true;
                                          isreadOnlyRule2bYear = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_13 = false;
                                          isreadOnlyRule2bYear = true;
                                          _ActRule2bYearController.text = "";
                                          _ActRule2bYear1Controller.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_13,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.14",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_14'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_14 == false) {
                                        setState(() {
                                          isSwitchedActs1_14 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_14 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_14,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.15",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_15'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_15 == false) {
                                        setState(() {
                                          isSwitchedActs1_15 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_15 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_15,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.16",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_16'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_16 == false) {
                                        setState(() {
                                          isSwitchedActs1_16 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_16 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_16,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.17",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_17'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_17 == false) {
                                        setState(() {
                                          isSwitchedActs1_17 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_17 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_17,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.18",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_18'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_18 == false) {
                                        setState(() {
                                          isSwitchedActs1_18 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_18 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_18,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "1.19",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act1_19'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs1_19 == false) {
                                        setState(() {
                                          isSwitchedActs1_19 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs1_19 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs1_19,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      AppTextField(
                        readOnly: Type == "view" ? true : false,
                        textInputAction: TextInputAction.next,
                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                        title: Text(translate('remarks')),
                        controller: _Act1RemarksController,
                        textInputType: TextInputType.text,
                      ),
                      const SizedBox(
                        height: AppConstants.PADDING_8,
                      ),
                      Container(
                        decoration: ShapeDecoration(
                          color: AppStyles.NotesColor,
                          shape: RoundedRectangleBorder(
                            side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                            borderRadius: BorderRadius.all(Radius.circular(12.0)),
                          ),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Text(translate('act1Note')),
                        ),
                      ),
                    ],
                  ))
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "2. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act2'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs2 == false) {
                            setState(() {
                              isSwitchedActs2 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs2 = false;
                              isSwitchedActs2_1 = false;
                              isSwitchedActs2_2 = false;
                              isSwitchedActs2_3 = false;
                              isSwitchedActs2_4 = false;
                              isSwitchedActs2_5 = false;
                              isSwitchedActs2_6 = false;
                              _ActR4aController.text = "";
                              _ActR4bController.text = "";
                              _ActR4bController.text = "";
                              _ActR4cController.text = "";
                              _ActS26R5Controller.text = "";
                              _Act2RemarksController.text = "";
                            });
                          }
                        }
                      },
                      value: isSwitchedActs2,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs2,
                  child: Column(
                    children: [
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "2.1",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Text(
                                  translate('act2_1'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      setState(() {
                                        if (isSwitchedActs2_1 == false) {
                                          if (Act2_1Widgets.length == 0) {
                                            createAct2_1();
                                          }

                                          isSwitchedActs2_1 = true;
                                        } else {
                                          isSwitchedActs2_1 = false;
                                          if (Type == "edit") {
                                            for (int i = 0; i < Act2_1Widgets.length; i++) {
                                              deleteAct2_1(i);
                                              convertXML2_1();
                                            }
                                            Act2_1Widgets.clear();
                                          } else {
                                            Act2_1Widgets.clear();
                                          }
                                        }
                                      });
                                    }
                                  },
                                  value: isSwitchedActs2_1,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs2_1,
                              child: Column(
                                children: [
                                  Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      translate('workersInfo'),
                                      style: AppStyles.textInputStyle,
                                    ),
                                  ),
                                  Container(
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        child: Column(
                                          children: [
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('srNo')),
                                            //   controller: _Act2_1SrNoController,
                                            //   readOnly: true,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('financialYear')),
                                            //   controller: _Act2_1FinancialYearController,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(text))) {
                                            //       return translate('dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            //   textInputType: TextInputType.number,
                                            //   maxLength: 7,
                                            //   inputFormatters: [
                                            //     FilteringTextInputFormatter.allow(RegExp('[0-9-]')),
                                            //   ],
                                            // ),
                                            // Column(
                                            //   children: [
                                            //     CheckboxListTile(
                                            //       title: Text(translate('formA')),
                                            //       value: isFromA,
                                            //       onChanged: (newValue) {
                                            //         setState(() {
                                            //           isFromA = newValue!;
                                            //         });
                                            //       },
                                            //       controlAffinity:
                                            //           ListTileControlAffinity.leading, //  <-- leading Checkbox
                                            //     ),
                                            //     CheckboxListTile(
                                            //       title: Text(translate('formB')),
                                            //       value: isFromB,
                                            //       onChanged: (newValue) {
                                            //         setState(() {
                                            //           isFromB = newValue!;
                                            //         });
                                            //       },
                                            //       controlAffinity:
                                            //           ListTileControlAffinity.leading, //  <-- leading Checkbox
                                            //     ),
                                            //     CheckboxListTile(
                                            //       title: Text(translate('formC')),
                                            //       value: isFromC,
                                            //       onChanged: (newValue) {
                                            //         setState(() {
                                            //           isFromC = newValue!;
                                            //         });
                                            //       },
                                            //       controlAffinity:
                                            //           ListTileControlAffinity.leading, //  <-- leading Checkbox
                                            //     ),
                                            //     CheckboxListTile(
                                            //       title: Text(translate('formD')),
                                            //       value: isFromD,
                                            //       onChanged: (newValue) {
                                            //         setState(() {
                                            //           isFromD = newValue!;
                                            //         });
                                            //       },
                                            //       controlAffinity:
                                            //           ListTileControlAffinity.leading, //  <-- leading Checkbox
                                            //     ),
                                            //   ],
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING_8,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerRight,
                                            //   child: AppCustomButton(
                                            //     loaderColor: AppStyles.naturalWhiteColor,
                                            //     width: 100,
                                            //     height: 44,
                                            //     endIcon: Icon(Icons.delete),
                                            //     background: AppStyles.primary500Color,
                                            //     text: translate('delete'),
                                            //     textColor: AppStyles.white,
                                            //     fontWeight: FontWeight.normal,
                                            //     fontSize: 14,
                                            //     onClicked: () {
                                            //       setState(() {
                                            //         Act2_1Widgets.removeAt(Act2_1Widgets.length - 1);
                                            //       });
                                            //     },
                                            //   ),
                                            // ),
                                            Form(
                                              key: _form2_1Key,
                                              child: ListView.builder(
                                                shrinkWrap: true,
                                                physics: NeverScrollableScrollPhysics(),
                                                itemCount: Act2_1Widgets.length,
                                                itemBuilder: (context, index) {
                                                  // Dynamically added widgets
                                                  return Act2_1Widgets[index];
                                                },
                                              ),
                                            ),

                                            const SizedBox(
                                              height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            ),
                                            Visibility(
                                                visible: Type == "view" ? false : true,
                                                child: Row(children: [
                                                  Expanded(
                                                    child: AppCustomButton(
                                                      loaderColor: AppStyles.naturalWhiteColor,
                                                      width: 100,
                                                      height: 44,
                                                      background: AppStyles.primary500Color,
                                                      text: translate('addMoreDetails'),
                                                      textColor: AppStyles.white,
                                                      fontWeight: FontWeight.normal,
                                                      fontSize: 14,
                                                      onClicked: Type == "view"
                                                          ? null
                                                          : () {
                                                              FocusScope.of(context).unfocus();
                                                              int newIndex = Act2_1Widgets.length;
                                                              act2_1Ids.add(0);
                                                              act2_1FinancialLIstIds.add(0);
                                                              act2_1RuleIds.add(0);
                                                              _Act2_1SrNoControllers.add(TextEditingController());
                                                              _Act2_1FinancialYearControllers.add(TextEditingController());
                                                              IsFromA.add(false);
                                                              IsFromB.add(false);
                                                              IsFromC.add(false);
                                                              IsFromD.add(false);
                                                              Acts2_1(newIndex, _Act2_1SrNoControllers[newIndex], _Act2_1FinancialYearControllers[newIndex], IsFromA[newIndex], IsFromB[newIndex],
                                                                  IsFromC[newIndex], IsFromD[newIndex]);
                                                            },
                                                    ),
                                                  ),
                                                  // SizedBox(width: 10),
                                                  // Expanded(
                                                  //   child: AppCustomButton(
                                                  //     loaderColor: AppStyles.naturalWhiteColor,
                                                  //     width: 100,
                                                  //     height: 44,
                                                  //     background: AppStyles.primary500Color,
                                                  //     text: translate('save'),
                                                  //     textColor: AppStyles.white,
                                                  //     fontWeight: FontWeight.normal,
                                                  //     fontSize: 14,
                                                  //     onClicked: Type == "view"
                                                  //         ? null
                                                  //         : () {
                                                  //             FocusScope.of(context).unfocus();
                                                  //             final _form = _form2_1Key.currentState!;
                                                  //             if (_form.validate()) {
                                                  //               convertXML2_1();
                                                  //             }
                                                  //           },
                                                  //   ),
                                                  // ),
                                                ])),

                                            // Add the widgets for employer details here
                                            // (e.g., TextFields, Buttons, etc.)
                                          ],
                                        ),
                                      )),
                                ],
                              )),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "2.2",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.centerLeft,
                                  child: Text(
                                    translate('act2_2'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      setState(() {
                                        if (isSwitchedActs2_2 == false) {
                                          if (Act2_2Widgets.length == 0) {
                                            createAct2_2();
                                          }

                                          isSwitchedActs2_2 = true;
                                        } else {
                                          isSwitchedActs2_2 = false;
                                          _Act2_2FinancialYearController.text = "";

                                          if (Type == "edit") {
                                            for (int i = 0; i < Act2_2Widgets.length; i++) {
                                              deleteAct2_2(i);
                                              convertXML2_2();
                                            }
                                            Act2_2Widgets.clear();
                                          } else {
                                            Act2_2Widgets.clear();
                                          }
                                        }
                                      });
                                    }
                                  },
                                  value: isSwitchedActs2_2,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs2_2,
                              child: Column(
                                key: act2_2_key,
                                children: [
                                  const SizedBox(
                                    height: AppConstants.PADDING_8,
                                  ),
                                  AppTextField(
                                    readOnly: Type == "view" ? true : false,
                                    textInputAction: TextInputAction.next,
                                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                    title: RichText(
                                      text: TextSpan(
                                        children: [
                                          TextSpan(
                                            text: translate('financialYear'),
                                            style: TextStyle(
                                              color: Colors.black, // Customize the title text color
                                              fontSize: 16, // Customize the title text size
                                            ),
                                          ),
                                          TextSpan(
                                            text: ' *', // Suffix text
                                            style: TextStyle(
                                              color: Colors.red, // Customize the suffix text color
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    controller: _Act2_2FinancialYearController,
                                    validator: (text) {
                                      if (!(AppUtils.checkRequired(text))) {
                                        return translate('financialYearValidation');
                                      }
                                      return null;
                                    },
                                    textInputType: TextInputType.number,
                                    maxLength: 7,
                                    inputFormatters: [
                                      FilteringTextInputFormatter.allow(RegExp(r'[0-9\-]')),
                                    ],
                                  ),
                                  const SizedBox(
                                    height: AppConstants.PADDING_8,
                                  ),
                                  Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      translate('workersInfo'),
                                      style: AppStyles.textInputStyle,
                                    ),
                                  ),
                                  Container(
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        child: Column(
                                          children: [
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            // AppTextField(
                                            //   textInputAction:
                                            //       TextInputAction.next,
                                            //   titleTextStyle: AppStyles
                                            //       .normalTextStyle
                                            //       .copyWith(fontSize: 16),
                                            //   title: Text(translate('srNo')),
                                            //   controller: _Act2_2SrnoController,
                                            //   readOnly: true,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('name')),
                                            //   controller:
                                            //       _Act2_2WorkerNameController,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'nameValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            //
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING_8,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerRight,
                                            //   child: AppCustomButton(
                                            //     loaderColor:
                                            //         AppStyles.naturalWhiteColor,
                                            //     width: 100,
                                            //     height: 44,
                                            //     endIcon: Icon(Icons.delete),
                                            //     background:
                                            //         AppStyles.primary500Color,
                                            //     text: translate('delete'),
                                            //     textColor: AppStyles.white,
                                            //     fontWeight: FontWeight.normal,
                                            //     fontSize: 14,
                                            //     onClicked: Type == "view"
                                            //         ? null
                                            //         : () {
                                            //             setState(() {
                                            //               Act2_2Widgets.removeAt(Act2_2Widgets.length - 1);
                                            //             });
                                            //           },
                                            //   ),
                                            // ),
                                            Form(
                                              key: _form2_2Key,
                                              child: ListView.builder(
                                                shrinkWrap: true,
                                                physics: NeverScrollableScrollPhysics(),
                                                itemCount: Act2_2Widgets.length,
                                                itemBuilder: (context, index) {
                                                  // Dynamically added widgets
                                                  return Act2_2Widgets[index];
                                                },
                                              ),
                                            ),

                                            const SizedBox(
                                              height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            ),
                                            Visibility(
                                                visible: Type == "view" ? false : true,
                                                child: Row(children: [
                                                  Expanded(
                                                    child: AppCustomButton(
                                                      loaderColor: AppStyles.naturalWhiteColor,
                                                      width: 100,
                                                      height: 44,
                                                      background: AppStyles.primary500Color,
                                                      text: translate('addMoreDetails'),
                                                      textColor: AppStyles.white,
                                                      fontWeight: FontWeight.normal,
                                                      fontSize: 14,
                                                      onClicked: Type == "view"
                                                          ? null
                                                          : () {
                                                              FocusScope.of(context).unfocus();
                                                              int newIndex = Act2_2Widgets.length;
                                                              act2_2Ids.add(0);
                                                              act2_2NotPaidWorkerDetailDNoIds.add(0);
                                                              act2_2RuleIds.add(0);
                                                              _Act2_2SrNoControllers.add(TextEditingController());
                                                              _Act2_2WorkerNameControllers.add(TextEditingController());

                                                              Acts2_2(newIndex, _Act2_2SrNoControllers[newIndex], _Act2_2WorkerNameControllers[newIndex]);
                                                            },
                                                    ),
                                                  ),
                                                  // SizedBox(width: 10),
                                                  // Expanded(
                                                  //   child: AppCustomButton(
                                                  //     loaderColor: AppStyles.naturalWhiteColor,
                                                  //     width: 100,
                                                  //     height: 44,
                                                  //     background: AppStyles.primary500Color,
                                                  //     text: translate('save'),
                                                  //     textColor: AppStyles.white,
                                                  //     fontWeight: FontWeight.normal,
                                                  //     fontSize: 14,
                                                  //     onClicked: Type == "view"
                                                  //         ? null
                                                  //         : () {
                                                  //             FocusScope.of(context).unfocus();
                                                  //             final _form = _form2_2Key.currentState!;
                                                  //             if (_form.validate()) {
                                                  //               convertXML2_2();
                                                  //             }
                                                  //           },
                                                  //   ),
                                                  // ),
                                                ])),

                                            // Add the widgets for employer details here
                                            // (e.g., TextFields, Buttons, etc.)
                                          ],
                                        ),
                                      )),
                                ],
                              )),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act2_3_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "2.3",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act2_3_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyR4a,
                                                controller: _ActR4aController,
                                                validator: (text) {
                                                  if (isSwitchedActs2_3 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }
                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act2_3_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs2_3 == false) {
                                        setState(() {
                                          isSwitchedActs2_3 = true;
                                          isreadOnlyR4a = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs2_3 = false;
                                          isreadOnlyR4a = true;
                                          _ActR4aController.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs2_3,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act2_4_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "2.4",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act2_4_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyR4b,
                                                controller: _ActR4bController,
                                                validator: (text) {
                                                  if (isSwitchedActs2_4 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }
                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act2_4_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs2_4 == false) {
                                        setState(() {
                                          isSwitchedActs2_4 = true;
                                          isreadOnlyR4b = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs2_4 = false;
                                          isreadOnlyR4b = true;
                                          _ActR4bController.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs2_4,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act2_5_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "2.5",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act2_5_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyR4c,
                                                controller: _ActR4cController,
                                                validator: (text) {
                                                  if (isSwitchedActs2_5 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }
                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act2_5_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs2_5 == false) {
                                        setState(() {
                                          isSwitchedActs2_5 = true;
                                          isreadOnlyR4c = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs2_5 = false;
                                          isreadOnlyR4c = true;
                                          _ActR4cController.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs2_5,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act2_6_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "2.6",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act2_6_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyS26R5,
                                                controller: _ActS26R5Controller,
                                                maxLines: null,
                                                validator: (text) {
                                                  if (isSwitchedActs2_6 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }
                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act2_6_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs2_6 == false) {
                                        setState(() {
                                          isSwitchedActs2_6 = true;
                                          isreadOnlyS26R5 = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs2_6 = false;
                                          isreadOnlyS26R5 = true;
                                          _ActS26R5Controller.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs2_6,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      AppTextField(
                        readOnly: Type == "view" ? true : false,
                        textInputAction: TextInputAction.next,
                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                        title: Text(translate('remarks')),
                        controller: _Act2RemarksController,
                        textInputType: TextInputType.text,
                      ),
                      const SizedBox(
                        height: AppConstants.PADDING_8,
                      ),
                      Container(
                        decoration: ShapeDecoration(
                          color: AppStyles.NotesColor,
                          shape: RoundedRectangleBorder(
                            side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                            borderRadius: BorderRadius.all(Radius.circular(12.0)),
                          ),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Text(
                            translate('act2Note'),
                          ),
                        ),
                      ),
                    ],
                  ))
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "3.",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act3'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs3 == false) {
                            setState(() {
                              isSwitchedActs3 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs3 = false;
                              isSwitchedActs3_1 = false;
                              isSwitchedActs3_2 = false;
                              isSwitchedActs3_3 = false;
                              isSwitchedActs3_4 = false;
                              _ActR32Controller.text = "";
                              _Act3RemarksController.text = "";
                            });
                          }
                        }
                      },
                      value: isSwitchedActs3,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs3,
                  child: Column(
                    children: [
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "3.1",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                    alignment: Alignment.centerLeft,
                                    child: Row(
                                      children: [
                                        Expanded(
                                          flex: 2,
                                          child: Text(
                                            translate('act3_1'),
                                            style: AppStyles.textInputStyle,
                                          ),
                                        ),
                                      ],
                                    )),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs3_1 == false) {
                                        setState(() {
                                          isSwitchedActs3_1 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs3_1 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs3_1,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "3.2",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.centerLeft,
                                  child: Text(
                                    translate('act3_2'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs3_2 == false) {
                                        setState(() {
                                          isSwitchedActs3_2 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs3_2 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs3_2,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act3_3_key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "3.3",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act3_3_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyR32,
                                                controller: _ActR32Controller,
                                                maxLines: null,
                                                validator: (text) {
                                                  if (isSwitchedActs3_3 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }
                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act3_3_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs3_3 == false) {
                                        setState(() {
                                          isSwitchedActs3_3 = true;
                                          isreadOnlyR32 = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs3_3 = false;
                                          isreadOnlyR32 = true;
                                          _ActR32Controller.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs3_3,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "3.4",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act3_4'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs3_4 == false) {
                                        setState(() {
                                          isSwitchedActs3_4 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs3_4 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs3_4,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      AppTextField(
                        readOnly: Type == "view" ? true : false,
                        textInputAction: TextInputAction.next,
                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                        title: Text(translate('remarks')),
                        controller: _Act3RemarksController,
                        textInputType: TextInputType.text,
                      ),
                      const SizedBox(
                        height: AppConstants.PADDING_8,
                      ),
                      Container(
                        decoration: ShapeDecoration(
                          color: AppStyles.NotesColor,
                          shape: RoundedRectangleBorder(
                            side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                            borderRadius: BorderRadius.all(Radius.circular(12.0)),
                          ),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Text(
                            translate('act3Note'),
                          ),
                        ),
                      ),
                    ],
                  ))
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "4.",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act4'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs4 == false) {
                            setState(() {
                              isSwitchedActs4 = true;
                              isreadOnlyISNo = false;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs4 = false;
                              isreadOnlyISNo = true;
                              isSwitchedActs4_1_1 = false;
                              isSwitchedActs4_1_2 = false;
                              isSwitchedActs4_1_3 = false;
                              isSwitchedActs4_1_4 = false;
                              isSwitchedActs4_1_5 = false;
                              isSwitchedActs4_1_6 = false;
                              isSwitchedActs4_1_7 = false;
                              isSwitchedActs4_1_8 = false;
                              isSwitchedActs4_1_9 = false;
                              isSwitchedActs4_1_10 = false;
                              isSwitchedActs4_1_11 = false;
                              isSwitchedActs4_1_12 = false;
                              isSwitchedActs4_2_1 = false;
                              isSwitchedActs4_2_2 = false;
                              isSwitchedActs4_2_3 = false;
                              isSwitchedActs4_2_4 = false;
                              isSwitchedActs4_2_5 = false;
                              isSwitchedActs4_2_6 = false;
                              isSwitchedActs4_2_7 = false;
                              isSwitchedActs4_2_8 = false;
                              isSwitchedActs4_2_9 = false;
                              isSwitchedActs4_2_10 = false;
                              isSwitchedActs4_2_11 = false;
                              isSwitchedActs4_2_12 = false;
                              isSwitchedActs4_2_13 = false;
                              isSwitchedActs4_2_14 = false;
                              isSwitchedActs4_2_15 = false;
                              isSwitchedActs4_2_16 = false;
                              isSwitchedActs4_2_17 = false;
                              isSwitchedActs4_2_18 = false;
                              isSwitchedActs4_2_19 = false;
                              isSwitchedActs4_2_20 = false;
                              _ActS9aLaborersController.text = "";
                              _ActS9aSnoController.text = "";
                              _ActR72Controller.text = "";
                              _ActR72Controller.text = "";
                              _ActS212SnoController.text = "";
                              _ActS211R65Controller.text = "";
                              _ActS122R25Controller.text = "";
                              _Act4_contractorRemarksController.text = "";
                              _Act4_principalRemarksController.text = "";
                            });
                          }
                        }
                      },
                      value: isSwitchedActs4,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs4,
                  child: Column(
                    children: [
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Container(
                        padding: EdgeInsets.all(5),
                        width: double.maxFinite,
                        decoration: BoxDecoration(
                          color: AppStyles.primary500Color,
                        ),
                        child: Text(
                          style: TextStyle(color: AppStyles.white),
                          translate('forPrincipalEmp'),
                          textAlign: TextAlign.center,
                        ),
                      ),
                      Column(
                        children: [
                          // Row(
                          //   children: [
                          //     const SizedBox(
                          //       width: 20,
                          //     ),
                          //     Expanded(
                          //       flex: 2,
                          //       child: Column(
                          //         crossAxisAlignment: CrossAxisAlignment.start,
                          //         children: [
                          //           RichText(
                          //             text: TextSpan(
                          //               style: AppStyles.textInputStyle,
                          //               children: [
                          //                 TextSpan(
                          //                   text:
                          //                       'At the time of investigation, the organization engages contract labour from the below-mentioned contractors. At the time of inspection serial noAt the time of investigation, the organization engages contract labour from the below-mentioned contractors. At the time of inspection serial no ',
                          //                 ),
                          //                 WidgetSpan(
                          //                   child: SizedBox(
                          //                     width: 100,
                          //                     child: TextFormField(
                          //                       readOnly: isreadOnlyISNo,
                          //                       controller: _ActISNoController,
                          //                       validator: (text) {
                          //                         if (isSwitchedActs4 == true) {
                          //                           if (!(AppUtils
                          //                               .checkRequired(text))) {
                          //                             return translate(
                          //                                 'dataValidation');
                          //                           }
                          //                         }
                          //                         return null;
                          //                       },
                          //                       keyboardType:
                          //                           TextInputType.text,
                          //                       decoration: InputDecoration(
                          //                         contentPadding:
                          //                             EdgeInsets.all(5.0),
                          //                       ),
                          //                       style: AppStyles.textInputStyle,
                          //                     ),
                          //                   ),
                          //                   alignment:
                          //                       PlaceholderAlignment.middle,
                          //                 ),
                          //                 TextSpan(
                          //                   text:
                          //                       '   contractors were present.',
                          //                 ),
                          //               ],
                          //             ),
                          //           ),
                          //         ],
                          //       ),
                          //     ),
                          //   ],
                          // ),
                          Column(
                            children: [
                              const SizedBox(
                                height: AppConstants.PADDING_8,
                              ),
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  translate('document'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                height: AppConstants.PADDING_8,
                              ),
                              Container(
                                decoration: ShapeDecoration(
                                  shape: RoundedRectangleBorder(
                                    side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                    borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                  ),
                                ),
                                child: Padding(
                                  padding: EdgeInsets.all(AppConstants.PADDING_8),
                                  child: Row(
                                    children: [
                                      Expanded(
                                        flex: 1,
                                        child: Align(
                                          alignment: Alignment.centerLeft,
                                          child: AppCustomButton(
                                            loaderColor: AppStyles.naturalWhiteColor,
                                            width: 110,
                                            background: AppStyles.greyButtonColor,
                                            text: translate('chooseFile'),
                                            textColor: AppStyles.black,
                                            fontWeight: FontWeight.normal,
                                            fontSize: 12,
                                            onClicked: Type == "view"
                                                ? null
                                                : () {
                                                    showModalBottomSheet<void>(
                                                      context: context,
                                                      builder: (BuildContext context) {
                                                        return Container(
                                                          child: Wrap(
                                                            children: <Widget>[
                                                              ListTile(
                                                                leading: Icon(Icons.camera),
                                                                title: Text('Open Camera'),
                                                                onTap: () {
                                                                  _openCamera("Principal_4");
                                                                  Navigator.of(context).pop();
                                                                },
                                                              ),
                                                              ListTile(
                                                                leading: Icon(Icons.photo),
                                                                title: Text('Open Gallery'),
                                                                onTap: () {
                                                                  _openGallery("Principal_4");
                                                                  Navigator.of(context).pop();
                                                                },
                                                              ),
                                                              ListTile(
                                                                leading: Icon(Icons.folder),
                                                                title: Text('Open Document Picker'),
                                                                onTap: () {
                                                                  _openDocumentPicker("Principal_4");
                                                                  Navigator.of(context).pop();
                                                                },
                                                              ),
                                                            ],
                                                          ),
                                                        );
                                                      },
                                                    );
                                                    setState(() {});
                                                  },
                                          ),
                                        ),
                                      ),
                                      if (!isAppOnline)
                                        if (IsextraworkDoc.isNotEmpty)
                                          Expanded(
                                            flex: 1,
                                            child: Text(
                                              IsextraworkDoc.split('/').last,
                                              maxLines: 2,
                                              style: AppStyles.textInputStyle,
                                            ),
                                          ),
                                      if (isAppOnline)
                                        if (IsextraworkDoc.isNotEmpty)
                                          Expanded(
                                            flex: 1,
                                            child: Text(
                                              IsextraworkDoc,
                                              maxLines: 2,
                                              style: AppStyles.textInputStyle,
                                            ),
                                          ),
                                    ],
                                  ),
                                ),
                              ),
                              if ((IsextraworkDocCID.isNotEmpty) && (IsextraworkDoc.isNotEmpty))
                                SizedBox(
                                  width: double.infinity,
                                  child: ElevatedButton(
                                    onPressed: () {
                                      downloadFile(IsextraworkDoc, IsextraworkDocCID);
                                    },
                                    child: Text('Download'),
                                  ),
                                ),
                              // const SizedBox(
                              //   height: AppConstants.PADDING_8,
                              // ),
                              // Align(
                              //   alignment: Alignment.centerLeft,
                              //   child: Text(
                              //     translate('contractorInfo'),
                              //     style: AppStyles.textInputStyle,
                              //   ),
                              // ),
                              // Container(
                              //     decoration: ShapeDecoration(
                              //       shape: RoundedRectangleBorder(
                              //         side: BorderSide(
                              //             color: AppStyles.greyIconColor,
                              //             width: 1.0,
                              //             style: BorderStyle.solid),
                              //         borderRadius: BorderRadius.all(
                              //             Radius.circular(12.0)),
                              //       ),
                              //     ),
                              //     child: Padding(
                              //       padding:
                              //           EdgeInsets.all(AppConstants.PADDING_8),
                              //       child: Column(
                              //         children: [
                              //           const SizedBox(
                              //             height: AppConstants.PADDING_8,
                              //           ),
                              //           AppTextField(
                              //             textInputAction: TextInputAction.next,
                              //             titleTextStyle: AppStyles
                              //                 .normalTextStyle
                              //                 .copyWith(fontSize: 16),
                              //             title: translate('srNo'),
                              //             controller: _Act4_1_1SrNoController,
                              //             readOnly: true,
                              //             textInputType: TextInputType.text,
                              //           ),
                              //           const SizedBox(
                              //             height: AppConstants
                              //                 .TEXT_FORM_FIELD_PADDING,
                              //           ),
                              //           AppTextField(
                              //             textInputAction: TextInputAction.next,
                              //             titleTextStyle: AppStyles
                              //                 .normalTextStyle
                              //                 .copyWith(fontSize: 16),
                              //             controller:
                              //                 _Act4_1_1NameContractorController,
                              //             validator: (text) {
                              //               if (!(AppUtils.checkRequired(
                              //                   text))) {
                              //                 return translate(
                              //                     'dataValidation');
                              //               }
                              //               return null;
                              //             },
                              //             title: translate('nameOfContractor'),
                              //             textInputType: TextInputType.text,
                              //           ),
                              //           const SizedBox(
                              //             height: AppConstants
                              //                 .TEXT_FORM_FIELD_PADDING,
                              //           ),
                              //           AppTextField(
                              //             textInputAction: TextInputAction.next,
                              //             titleTextStyle: AppStyles
                              //                 .normalTextStyle
                              //                 .copyWith(fontSize: 16),
                              //             title: translate('detailsOfWork'),
                              //             controller:
                              //                 _Act4_1_1DetailsWorkController,
                              //             validator: (text) {
                              //               if (!(AppUtils.checkRequired(
                              //                   text))) {
                              //                 return translate(
                              //                     'dataValidation');
                              //               }
                              //               return null;
                              //             },
                              //             textInputType: TextInputType.text,
                              //           ),
                              //           const SizedBox(
                              //             height: AppConstants
                              //                 .TEXT_FORM_FIELD_PADDING,
                              //           ),
                              //           AppTextField(
                              //             textInputAction: TextInputAction.next,
                              //             titleTextStyle: AppStyles
                              //                 .normalTextStyle
                              //                 .copyWith(fontSize: 16),
                              //             controller:
                              //                 _Act4_1_1TimeSinceController,
                              //             validator: (text) {
                              //               if (!(AppUtils.checkRequired(
                              //                   text))) {
                              //                 return translate(
                              //                     'dataValidation');
                              //               }
                              //               return null;
                              //             },
                              //             title: translate('TimeSinceWork'),
                              //             textInputType: TextInputType.text,
                              //           ),
                              //
                              //           const SizedBox(
                              //             height: AppConstants
                              //                 .TEXT_FORM_FIELD_PADDING,
                              //           ),
                              //           AppTextField(
                              //             textInputAction: TextInputAction.next,
                              //             titleTextStyle: AppStyles
                              //                 .normalTextStyle
                              //                 .copyWith(fontSize: 16),
                              //             title: translate('numberOfWorkers'),
                              //             controller:
                              //                 _Act4_1_1NoWorkersController,
                              //             validator: (text) {
                              //               if (!(AppUtils.checkRequired(
                              //                   text))) {
                              //                 return translate(
                              //                     'dataValidation');
                              //               }
                              //               return null;
                              //             },
                              //             textInputType: TextInputType.text,
                              //           ),
                              //
                              //           const SizedBox(
                              //             height: AppConstants.PADDING_8,
                              //           ),
                              //           Align(
                              //             alignment: Alignment.centerRight,
                              //             child: AppCustomButton(
                              //               loaderColor:
                              //                   AppStyles.naturalWhiteColor,
                              //               width: 100,
                              //               height: 44,
                              //               endIcon: Icon(Icons.delete),
                              //               background:
                              //                   AppStyles.primary500Color,
                              //               text: translate('delete'),
                              //               textColor: AppStyles.white,
                              //               fontWeight: FontWeight.normal,
                              //               fontSize: 14,
                              //               onClicked: () {
                              //                 setState(() {
                              //                   Act4_1_1Widgets.removeAt(
                              //                       Act4_1_1Widgets.length - 1);
                              //                 });
                              //               },
                              //             ),
                              //           ),
                              //           ListView.builder(
                              //             shrinkWrap: true,
                              //             physics:
                              //                 NeverScrollableScrollPhysics(),
                              //             itemCount: Act4_1_1Widgets.length,
                              //             itemBuilder: (context, index) {
                              //               // Dynamically added widgets
                              //               return Act4_1_1Widgets[index];
                              //             },
                              //           ),
                              //           const SizedBox(
                              //             height: AppConstants
                              //                 .DEFAULT_CONTAINER_PADDING,
                              //           ),
                              //           Row(children: [
                              //             Expanded(
                              //               child: AppCustomButton(
                              //                 loaderColor:
                              //                     AppStyles.naturalWhiteColor,
                              //                 width: 100,
                              //                 height: 44,
                              //                 background:
                              //                     AppStyles.primary500Color,
                              //                 text: translate('addMoreDetails'),
                              //                 textColor: AppStyles.white,
                              //                 fontWeight: FontWeight.normal,
                              //                 fontSize: 14,
                              //                 onClicked: () {
                              //                   int newIndex =
                              //                       Act4_1_1Widgets.length;
                              //                   Act4_1_1(
                              //                       newIndex,
                              //                       _Act4_1_1SrNoControllers[
                              //                           newIndex],
                              //                       _Act4_1_1NameContractorControllers[
                              //                           newIndex],
                              //                       _Act4_1_1DetailsWorkControllers[
                              //                           newIndex],
                              //                       _Act4_1_1TimeSinceControllers[
                              //                           newIndex],
                              //                       _Act4_1_1NoWorkersControllers[
                              //                           newIndex]);
                              //                 },
                              //               ),
                              //             ),
                              //             SizedBox(width: 10),
                              //             Expanded(
                              //               child: AppCustomButton(
                              //                 loaderColor:
                              //                     AppStyles.naturalWhiteColor,
                              //                 width: 100,
                              //                 height: 44,
                              //                 background:
                              //                     AppStyles.primary500Color,
                              //                 text: translate('save'),
                              //                 textColor: AppStyles.white,
                              //                 fontWeight: FontWeight.normal,
                              //                 fontSize: 14,
                              //                 onClicked: () {
                              //                   setState(() {
                              //                     convertXML4_1_1();
                              //                   });
                              //                 },
                              //               ),
                              //             ),
                              //           ])
                              //
                              //           // Add the widgets for employer details here
                              //           // (e.g., TextFields, Buttons, etc.)
                              //         ],
                              //       ),
                              //     )),
                            ],
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "4.1.1",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.centerLeft,
                                  child: Text(
                                    translate('act4_1_1'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_1_1 == false) {
                                        setState(() {
                                          isSwitchedActs4_1_1 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_1_1 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_1_1,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  "4.1.2",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.centerLeft,
                                  child: Text(
                                    translate('act4_1_2'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_1_2 == false) {
                                        setState(() {
                                          isSwitchedActs4_1_2 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_1_2 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_1_2,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.1.3",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_1_3'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_1_3 == false) {
                                        setState(() {
                                          isSwitchedActs4_1_3 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_1_3 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_1_3,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.1.4",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_1_4'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      setState(() {
                                        if (isSwitchedActs4_1_4 == false) {
                                          if (Act4_1_5Widgets.length == 0) {
                                            createAct4_1_5();
                                          }
                                          isSwitchedActs4_1_4 = true;
                                        } else {
                                          isSwitchedActs4_1_4 = false;

                                          if (Type == "edit") {
                                            for (int i = 0; i < Act4_1_5Widgets.length; i++) {
                                              deleteAct4_1_5(i);
                                              convertXML4_1_5();
                                            }
                                            Act4_1_5Widgets.clear();
                                          } else {
                                            Act4_1_5Widgets.clear();
                                          }
                                        }
                                      });
                                    }
                                  },
                                  value: isSwitchedActs4_1_4,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs4_1_4,
                              child: Column(
                                children: [
                                  const SizedBox(
                                    height: AppConstants.PADDING_8,
                                  ),
                                  Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      translate('contractorLabourInfo'),
                                      style: AppStyles.textInputStyle,
                                    ),
                                  ),
                                  Container(
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        child: Column(
                                          children: [
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            // AppTextField(
                                            //   textInputAction:
                                            //       TextInputAction.next,
                                            //   titleTextStyle: AppStyles
                                            //       .normalTextStyle
                                            //       .copyWith(fontSize: 16),
                                            //   title: Text(translate('srNo')),
                                            //   controller:
                                            //       _Act4_1_5SrNoController,
                                            //   readOnly: true,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('nameOfContractor')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act4_1_5NameContractorController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('nameOfContractorLabour')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act4_1_5NameContractorLabourController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            //
                                            // Align(
                                            //   alignment: Alignment.centerLeft,
                                            //   child: Text(
                                            //     translate('paidWages'),
                                            //     style: AppStyles.textInputStyle,
                                            //   ),
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING_8,
                                            // ),

                                            // StatefulBuilder(
                                            //   builder: (context, state) {
                                            //     return Column(children: [
                                            //       DropdownButtonFormField(
                                            //         hint: new Text(
                                            //             translate('select')),
                                            //         onChanged:
                                            //             (dynamic newValue) {
                                            //           setState(() {
                                            //             selectedWagesPaid =
                                            //                 newValue;
                                            //             print(
                                            //                 'Selected: $selectedWagesPaid');
                                            //           });
                                            //         },
                                            //         validator: (value) {
                                            //           if (value == null) {
                                            //             return 'Please Select Paid Wages';
                                            //           } else {
                                            //             return null;
                                            //           }
                                            //         },
                                            //         isExpanded: true,
                                            //         decoration: InputDecoration(
                                            //           border:
                                            //               OutlineInputBorder(
                                            //             borderRadius:
                                            //                 BorderRadius
                                            //                     .circular(10),
                                            //           ),
                                            //           enabledBorder: OutlineInputBorder(
                                            //             borderRadius: BorderRadius.circular(10),
                                            //             borderSide: BorderSide(color: Colors.grey), // Customize the border color
                                            //           ),
                                            //           focusedBorder: OutlineInputBorder(
                                            //             borderRadius: BorderRadius.circular(10),
                                            //             borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
                                            //           ),
                                            //         ),
                                            //         items: WagestoPaidList.map(
                                            //           (map) {
                                            //             return DropdownMenuItem<
                                            //                 int?>(
                                            //               value: map.DataValue,
                                            //               child: Text(
                                            //                   map.DisplayValue ??
                                            //                       ""),
                                            //             );
                                            //           },
                                            //         ).toList(),
                                            //       ),
                                            //     ]);
                                            //   },
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('wagesTobePaid')),
                                            //   controller: _Act4_1_5WagesTobePaidController,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            //   textInputType:
                                            //       TextInputType.number,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('differentialAmountTobePaid')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act4_1_5DifferAmountController,
                                            //   textInputType:
                                            //       TextInputType.number,
                                            // ),
                                            //
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING_8,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerRight,
                                            //   child: AppCustomButton(
                                            //     loaderColor:
                                            //         AppStyles.naturalWhiteColor,
                                            //     width: 100,
                                            //     height: 44,
                                            //     endIcon: Icon(Icons.delete),
                                            //     background:
                                            //         AppStyles.primary500Color,
                                            //     text: translate('delete'),
                                            //     textColor: AppStyles.white,
                                            //     fontWeight: FontWeight.normal,
                                            //     fontSize: 14,
                                            //     onClicked: Type == "view"
                                            //         ? null
                                            //         : () {
                                            //             setState(() {
                                            //               Act4_1_5Widgets.removeAt(Act4_1_5Widgets.length - 1);
                                            //             });
                                            //           },
                                            //   ),
                                            // ),
                                            Form(
                                              key: _form4_1_4Key,
                                              child: ListView.builder(
                                                shrinkWrap: true,
                                                physics: NeverScrollableScrollPhysics(),
                                                itemCount: Act4_1_5Widgets.length,
                                                itemBuilder: (context, index) {
                                                  // Dynamically added widgets
                                                  return Act4_1_5Widgets[index];
                                                },
                                              ),
                                            ),

                                            const SizedBox(
                                              height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            ),
                                            Visibility(
                                                visible: Type == "view" ? false : true,
                                                child: Row(children: [
                                                  Expanded(
                                                    child: AppCustomButton(
                                                      loaderColor: AppStyles.naturalWhiteColor,
                                                      width: 100,
                                                      height: 44,
                                                      background: AppStyles.primary500Color,
                                                      text: translate('addMoreDetails'),
                                                      textColor: AppStyles.white,
                                                      fontWeight: FontWeight.normal,
                                                      fontSize: 14,
                                                      onClicked: Type == "view"
                                                          ? null
                                                          : () {
                                                              FocusScope.of(context).unfocus();
                                                              int newIndex = Act4_1_5Widgets.length;
                                                              act4_1_5Ids.add(0);
                                                              act4_1_5RuleIds.add(0);
                                                              act4_1_5Sharamk214DNo.add(0);
                                                              _Act4_1_5SrNoControllers.add(TextEditingController());
                                                              _Act4_1_5NameContractorControllers.add(TextEditingController());
                                                              _Act4_1_5NameContractorLabourControllers.add(TextEditingController());
                                                              WagesToPaid.add(0);
                                                              _Act4_1_5WagesTobePaidControllers.add(TextEditingController());
                                                              _Act4_1_5DifferAmountControllers.add(TextEditingController());
                                                              Act4_1_5(
                                                                newIndex,
                                                                _Act4_1_5SrNoControllers[newIndex],
                                                                _Act4_1_5NameContractorControllers[newIndex],
                                                                _Act4_1_5NameContractorLabourControllers[newIndex],
                                                                WagesToPaid[newIndex],
                                                                _Act4_1_5WagesTobePaidControllers[newIndex],
                                                                _Act4_1_5DifferAmountControllers[newIndex],
                                                              );
                                                            },
                                                    ),
                                                  ),
                                                  // SizedBox(width: 10),
                                                  // Expanded(
                                                  //   child: AppCustomButton(
                                                  //     loaderColor: AppStyles.naturalWhiteColor,
                                                  //     width: 100,
                                                  //     height: 44,
                                                  //     background: AppStyles.primary500Color,
                                                  //     text: translate('save'),
                                                  //     textColor: AppStyles.white,
                                                  //     fontWeight: FontWeight.normal,
                                                  //     fontSize: 14,
                                                  //     onClicked: Type == "view"
                                                  //         ? null
                                                  //         : () {
                                                  //             FocusScope.of(context).unfocus();
                                                  //             final _form = _form4_1_4Key.currentState!;
                                                  //             if (_form.validate()) {
                                                  //               convertXML4_1_5();
                                                  //             }
                                                  //           },
                                                  //   ),
                                                  // ),
                                                ]))

                                            // Add the widgets for employer details here
                                            // (e.g., TextFields, Buttons, etc.)
                                          ],
                                        ),
                                      )),
                                ],
                              )),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act4_1_5key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.1.5",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act4_1_5_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyS9a,
                                                maxLines: null,
                                                controller: _ActS9aLaborersController,
                                                validator: (text) {
                                                  if (isSwitchedActs4_1_5 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act4_1_5_2'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyS9a,
                                                controller: _ActS9aSnoController,
                                                maxLines: null,
                                                keyboardType: TextInputType.text,
                                                validator: (text) {
                                                  if (isSwitchedActs4_1_5 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act4_1_5_3'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_1_5 == false) {
                                        setState(() {
                                          isSwitchedActs4_1_5 = true;
                                          isreadOnlyS9a = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_1_5 = false;
                                          isreadOnlyS9a = true;
                                          _ActS9aLaborersController.text = "";
                                          _ActS9aSnoController.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_1_5,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act4_1_6key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.1.6",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act4_1_6_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyR72,
                                                controller: _ActR72Controller,
                                                maxLines: null,
                                                keyboardType: TextInputType.text,
                                                validator: (text) {
                                                  if (isSwitchedActs4_1_6 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act4_1_6_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_1_6 == false) {
                                        setState(() {
                                          isSwitchedActs4_1_6 = true;
                                          isreadOnlyR72 = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_1_6 = false;
                                          isreadOnlyR72 = true;
                                          _ActR72Controller.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_1_6,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act4_1_7key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.1.7",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act4_1_7_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyS212Sno,
                                                controller: _ActS212SnoController,
                                                maxLines: null,
                                                validator: (text) {
                                                  if (isSwitchedActs4_1_7 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                keyboardType: TextInputType.text,
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act4_1_7_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_1_7 == false) {
                                        setState(() {
                                          isSwitchedActs4_1_7 = true;
                                          isreadOnlyS212Sno = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_1_7 = false;
                                          isreadOnlyS212Sno = true;
                                          _ActS212SnoController.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_1_7,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      // Column(
                      //   children: [
                      //     Row(
                      //       children: [
                      //         Align(
                      //           alignment: Alignment.topCenter,
                      //           child: Text(
                      //             "4.1.8",
                      //             style: AppStyles.textInputStyle,
                      //           ),
                      //         ),
                      //         const SizedBox(
                      //           width: 20,
                      //         ),
                      //         Expanded(
                      //           flex: 2,
                      //           child: Column(
                      //             crossAxisAlignment: CrossAxisAlignment.start,
                      //             children: [
                      //               RichText(
                      //                 text: TextSpan(
                      //                   style: AppStyles.textInputStyle,
                      //                   children: [
                      //                     TextSpan(
                      //                       text: 'principal employer dt. The Annual Form for the year ending 31/12/ ',
                      //                     ),
                      //                     WidgetSpan(
                      //                       child: SizedBox(
                      //                         width: 80,
                      //                         child: TextFormField(
                      //                           readOnly: isreadOnlyR822,
                      //                           controller: _ActR822YearController,
                      //                           keyboardType: TextInputType.number,
                      //                           validator: (text) {
                      //                             if (isSwitchedActs4_1_8 == true) {
                      //                               if (!(AppUtils.checkRequired(text))) {
                      //                                 return translate('dataValidation');
                      //                               }
                      //                             }
                      //
                      //                             return null;
                      //                           },
                      //                           decoration: InputDecoration(
                      //                             contentPadding: EdgeInsets.all(5.0),
                      //                           ),
                      //                           style: AppStyles.textInputStyle,
                      //                         ),
                      //                       ),
                      //                       alignment: PlaceholderAlignment.middle,
                      //                     ),
                      //                     TextSpan(
                      //                       text: '  has not been filled in Form-25 and submitted to the Registering Officer by 15 February',
                      //                     ),
                      //                     WidgetSpan(
                      //                       child: SizedBox(
                      //                         width: 100,
                      //                         child: TextFormField(
                      //                           readOnly: isreadOnlyR822,
                      //                           controller: _ActR822Year1Controller,
                      //                           validator: (text) {
                      //                             if (isSwitchedActs4_1_8 == true) {
                      //                               if (!(AppUtils.checkRequired(text))) {
                      //                                 return translate('dataValidation');
                      //                               }
                      //                             }
                      //
                      //                             return null;
                      //                           },
                      //                           keyboardType: TextInputType.number,
                      //                           decoration: InputDecoration(
                      //                             contentPadding: EdgeInsets.all(5.0),
                      //                           ),
                      //                           style: AppStyles.textInputStyle,
                      //                         ),
                      //                       ),
                      //                       alignment: PlaceholderAlignment.middle,
                      //                     ),
                      //                     TextSpan(
                      //                       text: '   , thereby Breach of Rule 82(2).',
                      //                     ),
                      //                   ],
                      //                 ),
                      //               ),
                      //             ],
                      //           ),
                      //         ),
                      //       ],
                      //     ),
                      //     Align(
                      //       alignment: Alignment.centerRight,
                      //       child: Transform.scale(
                      //           scale: 1,
                      //           child: Switch(
                      //             onChanged: (bool) {
                      //               if (isSwitchedActs4_1_8 == false) {
                      //                 setState(() {
                      //                   isSwitchedActs4_1_8 = true;
                      //                   isreadOnlyR822 = false;
                      //                 });
                      //               } else {
                      //                 setState(() {
                      //                   isSwitchedActs4_1_8 = false;
                      //                   isreadOnlyR822 = true;
                      //                   _ActR822YearController.text = "";
                      //                   _ActR822Year1Controller.text = "";
                      //                 });
                      //               }
                      //             },
                      //             value: isSwitchedActs4_1_8,
                      //             activeColor: AppStyles.greenColor,
                      //             activeTrackColor: AppStyles.grey400Color,
                      //             inactiveThumbColor: AppStyles.white,
                      //             inactiveTrackColor: AppStyles.grey400Color,
                      //           )),
                      //     ),
                      //   ],
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),
                      // Column(
                      //   children: [
                      //     Row(
                      //       children: [
                      //         Align(
                      //           alignment: Alignment.topCenter,
                      //           child: Text(
                      //             "4.19",
                      //             style: AppStyles.textInputStyle,
                      //           ),
                      //         ),
                      //         const SizedBox(
                      //           width: 20,
                      //         ),
                      //         Expanded(
                      //           flex: 2,
                      //           child: Column(
                      //             crossAxisAlignment: CrossAxisAlignment.start,
                      //             children: [
                      //               RichText(
                      //                 text: TextSpan(
                      //                   style: AppStyles.textInputStyle,
                      //                   children: [
                      //                     TextSpan(
                      //                       text: 'The above-mentioned contractors of serial no. ',
                      //                     ),
                      //                     WidgetSpan(
                      //                       child: SizedBox(
                      //                         width: 100,
                      //                         child: TextFormField(
                      //                           readOnly: isreadOnlyS292R811,
                      //                           controller: _ActS292R811Controller,
                      //                           validator: (text) {
                      //                             if (isSwitchedActs4_1_9 == true) {
                      //                               if (!(AppUtils.checkRequired(text))) {
                      //                                 return translate('dataValidation');
                      //                               }
                      //                             }
                      //
                      //                             return null;
                      //                           },
                      //                           keyboardType: TextInputType.text,
                      //                           decoration: InputDecoration(
                      //                             contentPadding: EdgeInsets.all(5.0),
                      //                           ),
                      //                           style: AppStyles.textInputStyle,
                      //                         ),
                      //                       ),
                      //                       alignment: PlaceholderAlignment.middle,
                      //                     ),
                      //                     TextSpan(
                      //                       text:
                      //                           '  have not displayed notices showing the particulars of rates of wages, hours of work, periods of wages, dates of payment of wages, name and address of the supervising inspector etc., which the principal employer has also not displayed in the establishment and at the place of work, hence breach of Section 29(2) ) read with Rule 81(1).',
                      //                     ),
                      //                   ],
                      //                 ),
                      //               ),
                      //             ],
                      //           ),
                      //         ),
                      //       ],
                      //     ),
                      //     Align(
                      //       alignment: Alignment.centerRight,
                      //       child: Transform.scale(
                      //           scale: 1,
                      //           child: Switch(
                      //             onChanged: (bool) {
                      //               if (isSwitchedActs4_1_9 == false) {
                      //                 setState(() {
                      //                   isSwitchedActs4_1_9 = true;
                      //                   isreadOnlyS292R811 = false;
                      //                 });
                      //               } else {
                      //                 setState(() {
                      //                   isSwitchedActs4_1_9 = false;
                      //                   isreadOnlyS292R811 = true;
                      //                   _ActS292R811Controller.text = "";
                      //                 });
                      //               }
                      //             },
                      //             value: isSwitchedActs4_1_9,
                      //             activeColor: AppStyles.greenColor,
                      //             activeTrackColor: AppStyles.grey400Color,
                      //             inactiveThumbColor: AppStyles.white,
                      //             inactiveTrackColor: AppStyles.grey400Color,
                      //           )),
                      //     ),
                      //   ],
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),
                      // Column(
                      //   children: [
                      //     Row(
                      //       children: [
                      //         Align(
                      //           alignment: Alignment.topCenter,
                      //           child: Text(
                      //             "4.1.10",
                      //             style: AppStyles.textInputStyle,
                      //           ),
                      //         ),
                      //         const SizedBox(
                      //           width: 20,
                      //         ),
                      //         Expanded(
                      //           flex: 2,
                      //           child: Align(
                      //             alignment: Alignment.topLeft,
                      //             child: Text(
                      //               "Breach of Rule 81(2) as a copy of the above notices was not sent to the local inspector.",
                      //               style: AppStyles.textInputStyle,
                      //             ),
                      //           ),
                      //         ),
                      //       ],
                      //     ),
                      //     Align(
                      //       alignment: Alignment.centerRight,
                      //       child: Transform.scale(
                      //           scale: 1,
                      //           child: Switch(
                      //             onChanged: (bool) {
                      //               if (isSwitchedActs4_1_10 == false) {
                      //                 setState(() {
                      //                   isSwitchedActs4_1_10 = true;
                      //                 });
                      //               } else {
                      //                 setState(() {
                      //                   isSwitchedActs4_1_10 = false;
                      //                 });
                      //               }
                      //             },
                      //             value: isSwitchedActs4_1_10,
                      //             activeColor: AppStyles.greenColor,
                      //             activeTrackColor: AppStyles.grey400Color,
                      //             inactiveThumbColor: AppStyles.white,
                      //             inactiveTrackColor: AppStyles.grey400Color,
                      //           )),
                      //     ),
                      //   ],
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.1.8",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_1_8'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_1_11 == false) {
                                        setState(() {
                                          isSwitchedActs4_1_11 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_1_11 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_1_11,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs4_1_11,
                              child: Column(
                                children: [
                                  const SizedBox(
                                    height: AppConstants.PADDING_8,
                                  ),
                                  AppTextField(
                                    readOnly: Type == "view" ? true : false,
                                    textInputAction: TextInputAction.next,
                                    controller: changeDetailsController,
                                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                    title: Text(translate('changeDetails')),
                                    textInputType: TextInputType.text,
                                  ),
                                  const SizedBox(
                                    height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                  ),
                                  AppTextField(
                                    textInputAction: TextInputAction.next,
                                    controller: dateModificationController,
                                    readOnly: true,
                                    suffixIcon: IconButton(
                                      onPressed: Type == "view"
                                          ? null
                                          : () async {
                                              final DateTime? pickedDate = await showDatePicker(
                                                context: context,
                                                initialDate: current_dateModificationController,
                                                firstDate: DateTime(1900),
                                                lastDate: DateTime(2100),
                                                initialDatePickerMode: DatePickerMode.day,
                                              );
                                              if (pickedDate != null && pickedDate != current_dateModificationController) {
                                                setState(() {
                                                  current_dateModificationController = pickedDate;
                                                  // Format the date in the local time zone
                                                  String formattedDate = DateFormat("dd-MM-yyyy").format(pickedDate.toLocal());
                                                  dateModificationController.text = formattedDate;
                                                });
                                              }
                                            },
                                      icon: Icon(
                                        Icons.calendar_today,
                                      ),
                                    ),
                                    onTap: Type == "view"
                                        ? null
                                        : () async {
                                            final DateTime? pickedDate = await showDatePicker(
                                              context: context,
                                              initialDate: current_dateModificationController,
                                              firstDate: DateTime(1900),
                                              lastDate: DateTime(2100),
                                              initialDatePickerMode: DatePickerMode.day,
                                            );
                                            if (pickedDate != null && pickedDate != current_dateModificationController) {
                                              setState(() {
                                                current_dateModificationController = pickedDate;
                                                // Format the date in the local time zone
                                                String formattedDate = DateFormat("dd-MM-yyyy").format(pickedDate.toLocal());
                                                dateModificationController.text = formattedDate;
                                              });
                                            }
                                          },
                                    titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                    title: Text(translate('dateModification')),
                                    textInputType: TextInputType.text,
                                  ),
                                  const SizedBox(
                                    height: AppConstants.PADDING_8,
                                  ),
                                ],
                              )),
                        ],
                      ),
                      const SizedBox(
                        height: AppConstants.DEFAULT_CONTAINER_PADDING,
                      ),
                      AppTextField(
                        readOnly: Type == "view" ? true : false,
                        textInputAction: TextInputAction.next,
                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                        title: Text(translate('remarks')),
                        controller: _Act4_principalRemarksController,
                        textInputType: TextInputType.text,
                      ),
                      const SizedBox(
                        height: AppConstants.PADDING_8,
                      ),
                      Container(
                        padding: EdgeInsets.all(5),
                        width: double.maxFinite,
                        decoration: BoxDecoration(
                          color: AppStyles.primary500Color,
                        ),
                        child: Text(
                          style: TextStyle(color: AppStyles.white),
                          translate('forContractor'),
                          textAlign: TextAlign.center,
                        ),
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.1",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_1'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_1 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_1 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_1 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_1,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.2",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_2'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_2 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_2 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_2 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_2,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.3",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_3'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_3 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_3 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_3 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_3,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.4",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_4'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_4 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_4 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_4 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_4,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act4_2_5key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.5",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act4_2_5_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyS211R65,
                                                controller: _ActS211R65Controller,
                                                maxLines: null,
                                                validator: (text) {
                                                  if (isSwitchedActs4_2_5 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act4_2_5_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      setState(() {
                                        if (isSwitchedActs4_2_5 == false) {
                                          isSwitchedActs4_2_5 = true;
                                          isreadOnlyS211R65 = false;
                                          if (Act4_2_5Widgets.length == 0) {
                                            createAct4_2_5();
                                          }
                                        } else {
                                          isSwitchedActs4_2_5 = false;
                                          isreadOnlyS211R65 = true;
                                          _ActS211R65Controller.text = "";

                                          if (Type == "edit") {
                                            for (int i = 0; i < Act4_2_5Widgets.length; i++) {
                                              deleteAct4_2_5(i);
                                              convertXML4_2_5();
                                            }
                                            Act4_2_5Widgets.clear();
                                          } else {
                                            Act4_2_5Widgets.clear();
                                          }
                                        }
                                      });
                                    }
                                  },
                                  value: isSwitchedActs4_2_5,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs4_2_5,
                              child: Column(
                                children: [
                                  Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      translate('contractorInfo'),
                                      style: AppStyles.textInputStyle,
                                    ),
                                  ),
                                  Container(
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        child: Column(
                                          children: [
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            // AppTextField(
                                            //   textInputAction:
                                            //       TextInputAction.next,
                                            //   titleTextStyle: AppStyles
                                            //       .normalTextStyle
                                            //       .copyWith(fontSize: 16),
                                            //   title: Text(translate('srNo')),
                                            //   controller:
                                            //       _Act4_2_5SrNoController,
                                            //   readOnly: true,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('nameOfContractor')),
                                            //   controller: _Act4_2_5NameContractorController,
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //     return null;
                                            //   },
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants.PADDING_8,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerRight,
                                            //   child: AppCustomButton(
                                            //     loaderColor:
                                            //         AppStyles.naturalWhiteColor,
                                            //     width: 100,
                                            //     height: 44,
                                            //     endIcon: Icon(Icons.delete),
                                            //     background:
                                            //         AppStyles.primary500Color,
                                            //     text: translate('delete'),
                                            //     textColor: AppStyles.white,
                                            //     fontWeight: FontWeight.normal,
                                            //     fontSize: 14,
                                            //     onClicked: Type == "view"
                                            //         ? null
                                            //         : () {
                                            //             setState(() {
                                            //               Act4_2_5Widgets.removeAt(Act4_2_5Widgets.length - 1);
                                            //             });
                                            //           },
                                            //   ),
                                            // ),
                                            Form(
                                              key: _form4_2_5Key,
                                              child: ListView.builder(
                                                shrinkWrap: true,
                                                physics: NeverScrollableScrollPhysics(),
                                                itemCount: Act4_2_5Widgets.length,
                                                itemBuilder: (context, index) {
                                                  // Dynamically added widgets
                                                  return Act4_2_5Widgets[index];
                                                },
                                              ),
                                            ),

                                            const SizedBox(
                                              height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            ),
                                            Visibility(
                                                visible: Type == "view" ? false : true,
                                                child: Row(children: [
                                                  Expanded(
                                                    child: AppCustomButton(
                                                      loaderColor: AppStyles.naturalWhiteColor,
                                                      width: 100,
                                                      height: 44,
                                                      background: AppStyles.primary500Color,
                                                      text: translate('addMoreDetails'),
                                                      textColor: AppStyles.white,
                                                      fontWeight: FontWeight.normal,
                                                      fontSize: 14,
                                                      onClicked: Type == "view"
                                                          ? null
                                                          : () {
                                                              act4_2_5ACTIsBreakRuleS211k65DNo.add(0);
                                                              act4_2_5RuleIds.add(0);
                                                              act4_2_5Ids.add(0);
                                                              _Act4_2_5SrNoControllers.add(TextEditingController());
                                                              _Act4_2_5NameContractorControllers.add(TextEditingController());
                                                              int newIndex = Act4_2_5Widgets.length;
                                                              Act4_2_5(newIndex, _Act4_2_5SrNoControllers[newIndex], _Act4_2_5NameContractorControllers[newIndex]);
                                                            },
                                                    ),
                                                  ),
                                                  // SizedBox(width: 10),
                                                  // Expanded(
                                                  //   child: AppCustomButton(
                                                  //     loaderColor: AppStyles.naturalWhiteColor,
                                                  //     width: 100,
                                                  //     height: 44,
                                                  //     background: AppStyles.primary500Color,
                                                  //     text: translate('save'),
                                                  //     textColor: AppStyles.white,
                                                  //     fontWeight: FontWeight.normal,
                                                  //     fontSize: 14,
                                                  //     onClicked: Type == "view"
                                                  //         ? null
                                                  //         : () {
                                                  //             final _form = _form4_2_5Key.currentState!;
                                                  //             if (_form.validate()) {
                                                  //               convertXML4_2_5();
                                                  //             }
                                                  //           },
                                                  //   ),
                                                  // ),
                                                ]))
                                          ],
                                        ),
                                      )),
                                ],
                              )),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.6",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_6'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_6 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_6 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_6 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_6,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.7",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_7'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_7 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_7 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_7 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_7,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.8",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_8'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_8 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_8 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_8 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_8,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.9",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_9'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_9 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_9 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_9 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_9,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        key: act4_2_10key,
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.10",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        style: AppStyles.textInputStyle,
                                        children: [
                                          TextSpan(
                                            text: translate('act4_2_10_1'),
                                          ),
                                          WidgetSpan(
                                            child: SizedBox(
                                              width: 100,
                                              child: TextFormField(
                                                readOnly: isreadOnlyS122R25,
                                                controller: _ActS122R25Controller,
                                                maxLines: null,
                                                keyboardType: TextInputType.text,
                                                validator: (text) {
                                                  if (isSwitchedActs4_2_10 == true) {
                                                    if (!(AppUtils.checkRequired(text))) {
                                                      return translate('dataValidation');
                                                    }
                                                  }

                                                  return null;
                                                },
                                                decoration: InputDecoration(
                                                  contentPadding: EdgeInsets.all(5.0),
                                                ),
                                                style: AppStyles.textInputStyle,
                                              ),
                                            ),
                                            alignment: PlaceholderAlignment.middle,
                                          ),
                                          TextSpan(
                                            text: translate('act4_2_10_2'),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_10 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_10 = true;
                                          isreadOnlyS122R25 = false;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_10 = false;
                                          isreadOnlyS122R25 = true;
                                          _ActS122R25Controller.text = "";
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_10,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      // Column(
                      //   children: [
                      //     Row(
                      //       children: [
                      //         Align(
                      //           alignment: Alignment.topCenter,
                      //           child: Text(
                      //             "4.2.11",
                      //             style: AppStyles.textInputStyle,
                      //           ),
                      //         ),
                      //         const SizedBox(
                      //           width: 20,
                      //         ),
                      //         Expanded(
                      //           flex: 2,
                      //           child: Align(
                      //             alignment: Alignment.topLeft,
                      //             child: Text(
                      //               "The license obtained under this Act was not renewed after the expiry of the prescribed period, thereby Breach of Rule-29 read with Section 13(1) read with Rule-29(1).",
                      //               style: AppStyles.textInputStyle,
                      //             ),
                      //           ),
                      //         ),
                      //       ],
                      //     ),
                      //     Align(
                      //       alignment: Alignment.centerRight,
                      //       child: Transform.scale(
                      //           scale: 1,
                      //           child: Switch(
                      //             onChanged: (bool) {
                      //               if (isSwitchedActs4_2_11 == false) {
                      //                 setState(() {
                      //                   isSwitchedActs4_2_11 = true;
                      //                 });
                      //               } else {
                      //                 setState(() {
                      //                   isSwitchedActs4_2_11 = false;
                      //                 });
                      //               }
                      //             },
                      //             value: isSwitchedActs4_2_11,
                      //             activeColor: AppStyles.greenColor,
                      //             activeTrackColor: AppStyles.grey400Color,
                      //             inactiveThumbColor: AppStyles.white,
                      //             inactiveTrackColor: AppStyles.grey400Color,
                      //           )),
                      //     ),
                      //   ],
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.11",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_11'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_12 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_12 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_12 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_12,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.12",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_12'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_13 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_13 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_13 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_13,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.13",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_13'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_14 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_14 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_14 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_14,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.14",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_14'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_15 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_15 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_15 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_15,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      // Column(
                      //   children: [
                      //     Row(
                      //       children: [
                      //         Align(
                      //           alignment: Alignment.topCenter,
                      //           child: Text(
                      //             "4.2.16",
                      //             style: AppStyles.textInputStyle,
                      //           ),
                      //         ),
                      //         const SizedBox(
                      //           width: 20,
                      //         ),
                      //         Expanded(
                      //           flex: 2,
                      //           child: Column(
                      //             crossAxisAlignment: CrossAxisAlignment.start,
                      //             children: [
                      //               RichText(
                      //                 text: TextSpan(
                      //                   style: AppStyles.textInputStyle,
                      //                   children: [
                      //                     TextSpan(
                      //                       text: 'As per half-yearly form sample-24 dated 30/06/ ',
                      //                     ),
                      //                     WidgetSpan(
                      //                       child: SizedBox(
                      //                         width: 100,
                      //                         child: TextFormField(
                      //                           readOnly: isreadOnlyR812,
                      //                           controller: _ActR821YearController,
                      //                           keyboardType: TextInputType.number,
                      //                           validator: (text) {
                      //                             if (isSwitchedActs4_2_16 == true) {
                      //                               if (!(AppUtils.checkRequired(text))) {
                      //                                 return translate('dataValidation');
                      //                               }
                      //                             }
                      //
                      //                             return null;
                      //                           },
                      //                           decoration: InputDecoration(
                      //                             contentPadding: EdgeInsets.all(5.0),
                      //                           ),
                      //                           style: AppStyles.textInputStyle,
                      //                         ),
                      //                       ),
                      //                       alignment: PlaceholderAlignment.middle,
                      //                     ),
                      //                     TextSpan(
                      //                       text: ' To 31/12/ ',
                      //                     ),
                      //                     WidgetSpan(
                      //                       child: SizedBox(
                      //                         width: 100,
                      //                         child: TextFormField(
                      //                           readOnly: isreadOnlyR812,
                      //                           controller: _ActR821Year1Controller,
                      //                           keyboardType: TextInputType.number,
                      //                           validator: (text) {
                      //                             if (isSwitchedActs4_2_16 == true) {
                      //                               if (!(AppUtils.checkRequired(text))) {
                      //                                 return translate('dataValidation');
                      //                               }
                      //                             }
                      //
                      //                             return null;
                      //                           },
                      //                           decoration: InputDecoration(
                      //                             contentPadding: EdgeInsets.all(5.0),
                      //                           ),
                      //                           style: AppStyles.textInputStyle,
                      //                         ),
                      //                       ),
                      //                       alignment: PlaceholderAlignment.middle,
                      //                     ),
                      //                     TextSpan(
                      //                       text: ' has not been filled and sent to the licensing officer on day-30, hence Breach of Rule-82(1).',
                      //                     ),
                      //                   ],
                      //                 ),
                      //               ),
                      //             ],
                      //           ),
                      //         ),
                      //       ],
                      //     ),
                      //     Align(
                      //       alignment: Alignment.centerRight,
                      //       child: Transform.scale(
                      //           scale: 1,
                      //           child: Switch(
                      //             onChanged: (bool) {
                      //               if (isSwitchedActs4_2_16 == false) {
                      //                 setState(() {
                      //                   isSwitchedActs4_2_16 = true;
                      //                   isreadOnlyR812 = false;
                      //                 });
                      //               } else {
                      //                 setState(() {
                      //                   isSwitchedActs4_2_16 = false;
                      //                   isreadOnlyR812 = true;
                      //                   _ActR821YearController.text = "";
                      //                   _ActR821Year1Controller.text = "";
                      //                 });
                      //               }
                      //             },
                      //             value: isSwitchedActs4_2_10,
                      //             activeColor: AppStyles.greenColor,
                      //             activeTrackColor: AppStyles.grey400Color,
                      //             inactiveThumbColor: AppStyles.white,
                      //             inactiveTrackColor: AppStyles.grey400Color,
                      //           )),
                      //     ),
                      //   ],
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.15",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_15'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_17 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_17 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_17 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_17,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.16",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_16'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_18 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_18 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_18 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_18,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      // Column(
                      //   children: [
                      //     Row(
                      //       children: [
                      //         Align(
                      //           alignment: Alignment.topCenter,
                      //           child: Text(
                      //             "4.2.19",
                      //             style: AppStyles.textInputStyle,
                      //           ),
                      //         ),
                      //         const SizedBox(
                      //           width: 20,
                      //         ),
                      //         Expanded(
                      //           flex: 2,
                      //           child: Align(
                      //             alignment: Alignment.topLeft,
                      //             child: Text(
                      //               "A copy of the notice stating rate of pay, hours of work, date of pay, name of the inspector, and address etc. was not sent to the inspector, thereby Breach of Rule-81(2).",
                      //               style: AppStyles.textInputStyle,
                      //             ),
                      //           ),
                      //         ),
                      //       ],
                      //     ),
                      //     Align(
                      //       alignment: Alignment.centerRight,
                      //       child: Transform.scale(
                      //           scale: 1,
                      //           child: Switch(
                      //             onChanged: (bool) {
                      //               if (isSwitchedActs4_2_19 == false) {
                      //                 setState(() {
                      //                   isSwitchedActs4_2_19 = true;
                      //                 });
                      //               } else {
                      //                 setState(() {
                      //                   isSwitchedActs4_2_19 = false;
                      //                 });
                      //               }
                      //             },
                      //             value: isSwitchedActs4_2_19,
                      //             activeColor: AppStyles.greenColor,
                      //             activeTrackColor: AppStyles.grey400Color,
                      //             inactiveThumbColor: AppStyles.white,
                      //             inactiveTrackColor: AppStyles.grey400Color,
                      //           )),
                      //     ),
                      //   ],
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "4.2.17",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act4_2_17'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs4_2_20 == false) {
                                        setState(() {
                                          isSwitchedActs4_2_20 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs4_2_20 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs4_2_20,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      AppTextField(
                        readOnly: Type == "view" ? true : false,
                        textInputAction: TextInputAction.next,
                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                        title: Text(translate('remarks')),
                        controller: _Act4_contractorRemarksController,
                        textInputType: TextInputType.text,
                      ),
                      const SizedBox(
                        height: AppConstants.PADDING_8,
                      ),
                      Container(
                        decoration: ShapeDecoration(
                          color: AppStyles.NotesColor,
                          shape: RoundedRectangleBorder(
                            side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                            borderRadius: BorderRadius.all(Radius.circular(12.0)),
                          ),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Text(
                            translate('act4Note'),
                          ),
                        ),
                      ),
                    ],
                  ))
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "5. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act5'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs5 == false) {
                            setState(() {
                              isSwitchedActs5 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs5 = false;
                              isSwitchedActs5_1 = false;
                              isSwitchedActs5_2 = false;
                              isSwitchedActs5_3 = false;
                              isSwitchedActs5_4 = false;
                              _Act5RemarksController.text = "";
                            });
                          }
                        }
                      },
                      value: isSwitchedActs5,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs5,
                  child: Column(children: [
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "5.1",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act5_1'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs5_1 == false) {
                                      setState(() {
                                        isSwitchedActs5_1 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs5_1 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs5_1,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "5.2",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act5_2'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs5_2 == false) {
                                      setState(() {
                                        isSwitchedActs5_2 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs5_2 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs5_2,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "5.3",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act5_3'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs5_3 == false) {
                                      setState(() {
                                        isSwitchedActs5_3 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs5_3 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs5_3,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "5.4",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act5_4'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs5_4 == false) {
                                      setState(() {
                                        if (Act5_4Widgets.length == 0) {
                                          createAct5_4();
                                        }
                                        isSwitchedActs5_4 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs5_4 = false;

                                        if (Type == "edit") {
                                          for (int i = 0; i < Act5_4Widgets.length; i++) {
                                            deleteAct5_4(i);
                                            convertXML5_4();
                                          }
                                          Act5_4Widgets.clear();
                                        } else {
                                          Act5_4Widgets.clear();
                                        }
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs5_4,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                        Visibility(
                            visible: isSwitchedActs5_4,
                            child: Column(
                              children: [
                                const SizedBox(
                                  height: AppConstants.PADDING_8,
                                ),
                                // AppTextField(
                                //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                //   title: Text(translate('srNo')),
                                //   controller: _Act5_4SrNoController,
                                //   readOnly: true,
                                //   textInputType: TextInputType.text,
                                // ),
                                // const SizedBox(
                                //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                // ),
                                // AppTextField(
                                //   readOnly: Type == "view" ? true : false,
                                //   textInputAction: TextInputAction.next,
                                //   titleTextStyle: AppStyles.normalTextStyle
                                //       .copyWith(fontSize: 16),
                                //   title: Text(translate('maleWorkerName')),
                                //   controller: _Act5_4MaleWorkersController,
                                //   validator: (text) {
                                //     if (!(AppUtils.checkRequired(text))) {
                                //       return translate('dataValidation');
                                //     }
                                //
                                //     return null;
                                //   },
                                //   textInputType: TextInputType.text,
                                // ),
                                // const SizedBox(
                                //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                // ),
                                // AppTextField(
                                //   readOnly: Type == "view" ? true : false,
                                //   textInputAction: TextInputAction.next,
                                //   titleTextStyle: AppStyles.normalTextStyle
                                //       .copyWith(fontSize: 16),
                                //   title: Text(translate('desg')),
                                //   validator: (text) {
                                //     if (!(AppUtils.checkRequired(text))) {
                                //       return translate('dataValidation');
                                //     }
                                //
                                //     return null;
                                //   },
                                //   controller: _Act5_4MDesgController,
                                //   textInputType: TextInputType.text,
                                // ),
                                // const SizedBox(
                                //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                // ),
                                // AppTextField(
                                //   readOnly: Type == "view" ? true : false,
                                //   textInputAction: TextInputAction.next,
                                //   titleTextStyle: AppStyles.normalTextStyle
                                //       .copyWith(fontSize: 16),
                                //   title: Text(translate('salaryPaid')),
                                //   validator: (text) {
                                //     if (!(AppUtils.checkRequired(text))) {
                                //       return translate('dataValidation');
                                //     }
                                //
                                //     return null;
                                //   },
                                //   controller: _Act5_4MSalaryPaidController,
                                //   textInputType: TextInputType.text,
                                // ),
                                // const SizedBox(
                                //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                // ),
                                // AppTextField(
                                //   readOnly: Type == "view" ? true : false,
                                //   textInputAction: TextInputAction.next,
                                //   titleTextStyle: AppStyles.normalTextStyle
                                //       .copyWith(fontSize: 16),
                                //   validator: (text) {
                                //     if (!(AppUtils.checkRequired(text))) {
                                //       return translate('dataValidation');
                                //     }
                                //
                                //     return null;
                                //   },
                                //   title: Text(translate('femaleWorkerName')),
                                //   controller: _Act5_4FemaleWorkersController,
                                //   textInputType: TextInputType.text,
                                // ),
                                // const SizedBox(
                                //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                // ),
                                // AppTextField(
                                //   readOnly: Type == "view" ? true : false,
                                //   textInputAction: TextInputAction.next,
                                //   titleTextStyle: AppStyles.normalTextStyle
                                //       .copyWith(fontSize: 16),
                                //   title: Text(translate('desg')),
                                //   validator: (text) {
                                //     if (!(AppUtils.checkRequired(text))) {
                                //       return translate('dataValidation');
                                //     }
                                //
                                //     return null;
                                //   },
                                //   controller: _Act5_4FDesgController,
                                //   textInputType: TextInputType.text,
                                // ),
                                // const SizedBox(
                                //   height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                // ),
                                // AppTextField(
                                //   readOnly: Type == "view" ? true : false,
                                //   textInputAction: TextInputAction.next,
                                //   titleTextStyle: AppStyles.normalTextStyle
                                //       .copyWith(fontSize: 16),
                                //   title: Text(translate('salaryPaid')),
                                //   validator: (text) {
                                //     if (!(AppUtils.checkRequired(text))) {
                                //       return translate('dataValidation');
                                //     }
                                //
                                //     return null;
                                //   },
                                //   controller: _Act5_4FSalaryPaidController,
                                //   textInputType: TextInputType.text,
                                // ),
                                // const SizedBox(
                                //   height: AppConstants.PADDING_8,
                                // ),
                                // Align(
                                //   alignment: Alignment.centerRight,
                                //   child: AppCustomButton(
                                //     loaderColor: AppStyles.naturalWhiteColor,
                                //     width: 100,
                                //     height: 44,
                                //     endIcon: Icon(Icons.delete),
                                //     background: AppStyles.primary500Color,
                                //     text: translate('delete'),
                                //     textColor: AppStyles.white,
                                //     fontWeight: FontWeight.normal,
                                //     fontSize: 14,
                                //     onClicked: Type == "view"
                                //         ? null
                                //         : () {
                                //             setState(() {
                                //               Act5_4Widgets.removeAt(Act5_4Widgets.length - 1);
                                //             });
                                //           },
                                //   ),
                                // ),
                                Form(
                                  key: _form5_4Key,
                                  child: ListView.builder(
                                    shrinkWrap: true,
                                    physics: NeverScrollableScrollPhysics(),
                                    itemCount: Act5_4Widgets.length,
                                    itemBuilder: (context, index) {
                                      // Dynamically added widgets
                                      return Act5_4Widgets[index];
                                    },
                                  ),
                                ),

                                const SizedBox(
                                  height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                ),
                                Visibility(
                                    visible: Type == "view" ? false : true,
                                    child: Row(children: [
                                      Expanded(
                                        child: AppCustomButton(
                                          loaderColor: AppStyles.naturalWhiteColor,
                                          width: 100,
                                          height: 44,
                                          background: AppStyles.primary500Color,
                                          text: translate('addMoreDetails'),
                                          textColor: AppStyles.white,
                                          fontWeight: FontWeight.normal,
                                          fontSize: 14,
                                          onClicked: Type == "view"
                                              ? null
                                              : () {
                                                  FocusScope.of(context).unfocus();
                                                  int newIndex = Act5_4Widgets.length;
                                                  act5_4RuleIds.add(0);
                                                  act5_4Ids.add(0);
                                                  _Act5_4SrNoControllers.add(TextEditingController());
                                                  _Act5_4MaleWorkersControllers.add(TextEditingController());
                                                  _Act5_4MDesgControllers.add(TextEditingController());
                                                  _Act5_4MSalaryPaidControllers.add(TextEditingController());
                                                  _Act5_4FemaleWorkersControllers.add(TextEditingController());
                                                  _Act5_4FDesgControllers.add(TextEditingController());
                                                  _Act5_4FSalaryPaidControllers.add(TextEditingController());
                                                  Act5_4(
                                                      newIndex,
                                                      _Act5_4SrNoControllers[newIndex],
                                                      _Act5_4MaleWorkersControllers[newIndex],
                                                      _Act5_4MDesgControllers[newIndex],
                                                      _Act5_4MSalaryPaidControllers[newIndex],
                                                      _Act5_4FemaleWorkersControllers[newIndex],
                                                      _Act5_4FDesgControllers[newIndex],
                                                      _Act5_4FSalaryPaidControllers[newIndex]);
                                                },
                                        ),
                                      ),
                                      // SizedBox(width: 10),
                                      // Expanded(
                                      //   child: AppCustomButton(
                                      //     loaderColor: AppStyles.naturalWhiteColor,
                                      //     width: 100,
                                      //     height: 44,
                                      //     background: AppStyles.primary500Color,
                                      //     text: translate('save'),
                                      //     textColor: AppStyles.white,
                                      //     fontWeight: FontWeight.normal,
                                      //     fontSize: 14,
                                      //     onClicked: Type == "view"
                                      //         ? null
                                      //         : () {
                                      //             FocusScope.of(context).unfocus();
                                      //             final _form = _form5_4Key.currentState!;
                                      //             if (_form.validate()) {
                                      //               convertXML5_4();
                                      //             }
                                      //           },
                                      //   ),
                                      // ),
                                    ]))
                              ],
                            )),
                      ],
                    ),
                    const SizedBox(
                      height: AppConstants.DEFAULT_CONTAINER_PADDING,
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: Text(translate('remarks')),
                      controller: _Act5RemarksController,
                      textInputType: TextInputType.text,
                    ),
                    const SizedBox(
                      height: AppConstants.PADDING_8,
                    ),
                    Container(
                      decoration: ShapeDecoration(
                        color: AppStyles.NotesColor,
                        shape: RoundedRectangleBorder(
                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                        ),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          translate('act5Note'),
                        ),
                      ),
                    ),
                  ])),
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "6. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act6'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs6 == false) {
                            if (Act6Widgets.length == 0) {
                              createAct6();
                            }
                            setState(() {
                              isSwitchedActs6 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs6 = false;
                              isSwitchedActs6_1_1 = false;
                              isSwitchedActs6_1_2 = false;
                              isSwitchedActs6_1_3 = false;
                              isSwitchedActs6_1_4 = false;
                              isSwitchedActs6_1_5 = false;
                              isSwitchedActs6_1_6 = false;
                              isSwitchedActs6_1_7 = false;
                              isSwitchedActs6_2_1 = false;
                              isSwitchedActs6_2_2 = false;
                              isSwitchedActs6_2_3 = false;
                              _ActR6Controller.text = "";
                              _ActS172R34Controller.text = "";
                              _Act6RemarksController.text = "";

                              if (Type == "edit") {
                                for (int i = 0; i < Act6Widgets.length; i++) {
                                  deleteAct_6(i);
                                  convertXML6();
                                }
                                Act6Widgets.clear();
                              } else {
                                Act6Widgets.clear();
                              }
                            });
                          }
                        }
                      },
                      value: isSwitchedActs6,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs6,
                  child: Column(children: [
                    Container(
                      padding: EdgeInsets.all(5),
                      width: double.maxFinite,
                      decoration: BoxDecoration(
                        color: AppStyles.primary500Color,
                      ),
                      child: Text(
                        style: TextStyle(color: AppStyles.white),
                        translate('forPrincipalEmp'),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    Column(
                      children: [
                        Align(
                          alignment: Alignment.centerLeft,
                          child: Text(
                            translate('contractorsPersonDetails'),
                            style: AppStyles.textInputStyle,
                          ),
                        ),
                        const SizedBox(
                          height: AppConstants.TEXT_FORM_FIELD_PADDING,
                        ),
                        Container(
                            decoration: ShapeDecoration(
                              shape: RoundedRectangleBorder(
                                side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                borderRadius: BorderRadius.all(Radius.circular(12.0)),
                              ),
                            ),
                            child: Padding(
                              padding: EdgeInsets.all(AppConstants.PADDING_8),
                              child: Column(
                                children: [
                                  const SizedBox(
                                    height: AppConstants.PADDING_8,
                                  ),
                                  // AppTextField(
                                  //   textInputAction: TextInputAction.next,
                                  //   titleTextStyle: AppStyles.normalTextStyle
                                  //       .copyWith(fontSize: 16),
                                  //   title: Text(translate('srNo')),
                                  //   controller: _Act6SrNoController,
                                  //   readOnly: true,
                                  //   textInputType: TextInputType.text,
                                  // ),
                                  // const SizedBox(
                                  //   height:
                                  //       AppConstants.TEXT_FORM_FIELD_PADDING,
                                  // ),
                                  // AppTextField(
                                  //   readOnly: Type == "view" ? true : false,
                                  //   textInputAction: TextInputAction.next,
                                  //   titleTextStyle: AppStyles.normalTextStyle
                                  //       .copyWith(fontSize: 16),
                                  //   title: Text(translate('nameOfContractor')),
                                  //   validator: (text) {
                                  //     if (!(AppUtils.checkRequired(text))) {
                                  //       return translate('dataValidation');
                                  //     }
                                  //
                                  //     return null;
                                  //   },
                                  //   controller: _Act6NameContractorController,
                                  //   textInputType: TextInputType.text,
                                  // ),
                                  // const SizedBox(
                                  //   height:
                                  //       AppConstants.TEXT_FORM_FIELD_PADDING,
                                  // ),
                                  // AppTextField(
                                  //   readOnly: Type == "view" ? true : false,
                                  //   textInputAction: TextInputAction.next,
                                  //   titleTextStyle: AppStyles.normalTextStyle
                                  //       .copyWith(fontSize: 16),
                                  //   title: Text(translate('permanentAddress')),
                                  //   controller: _Act6AddressController,
                                  //   validator: (text) {
                                  //     if (!(AppUtils.checkRequired(text))) {
                                  //       return translate('dataValidation');
                                  //     }
                                  //
                                  //     return null;
                                  //   },
                                  //   textInputType: TextInputType.text,
                                  // ),
                                  // const SizedBox(
                                  //   height:
                                  //       AppConstants.TEXT_FORM_FIELD_PADDING,
                                  // ),
                                  // AppTextField(
                                  //   readOnly: Type == "view" ? true : false,
                                  //   textInputAction: TextInputAction.next,
                                  //   titleTextStyle: AppStyles.normalTextStyle
                                  //       .copyWith(fontSize: 16),
                                  //   title: Text(translate('detailsOfWork')),
                                  //   controller: _Act6DetailsWorkController,
                                  //   validator: (text) {
                                  //     if (!(AppUtils.checkRequired(text))) {
                                  //       return translate('dataValidation');
                                  //     }
                                  //
                                  //     return null;
                                  //   },
                                  //   textInputType: TextInputType.text,
                                  // ),
                                  //
                                  // const SizedBox(
                                  //   height:
                                  //       AppConstants.TEXT_FORM_FIELD_PADDING,
                                  // ),
                                  // AppTextField(
                                  //   textInputAction: TextInputAction.next,
                                  //   titleTextStyle: AppStyles.normalTextStyle
                                  //       .copyWith(fontSize: 16),
                                  //   title: RichText(
                                  //     text: TextSpan(
                                  //       children: [
                                  //         TextSpan(
                                  //           text: translate('TimeSinceWork'),
                                  //           style: TextStyle(
                                  //             color: Colors.black,
                                  //             // Customize the title text color
                                  //             fontSize: 16, // Customize the title text size
                                  //           ),
                                  //         ),
                                  //         TextSpan(
                                  //           text: ' *', // Suffix text
                                  //           style: TextStyle(
                                  //             color: Colors
                                  //                 .red, // Customize the suffix text color
                                  //           ),
                                  //         ),
                                  //       ],
                                  //     ),
                                  //   ),
                                  //   textInputType: TextInputType.text,
                                  //   readOnly: true,
                                  //   suffixIcon: IconButton(
                                  //     onPressed: () async {
                                  //       final DateTime? pickedDate =
                                  //           await showDatePicker(
                                  //         context: context,
                                  //         initialDate: currentTimeSinceDate,
                                  //         firstDate: DateTime(1900),
                                  //         // Set a very distant past date
                                  //         lastDate: DateTime(2100),
                                  //         // Set a very distant future date
                                  //         initialDatePickerMode:
                                  //             DatePickerMode.day,
                                  //       );
                                  //       if (pickedDate != null &&
                                  //           pickedDate !=
                                  //               currentTimeSinceDate) {
                                  //         setState(() {
                                  //           currentTimeSinceDate = pickedDate;
                                  //           String formDate =
                                  //               DateFormat("dd-MM-yyyy")
                                  //                   .format(pickedDate);
                                  //           _Act6TimeSinceController.text =
                                  //               formDate;
                                  //         });
                                  //       }
                                  //     },
                                  //     icon: Icon(
                                  //       Icons.calendar_today,
                                  //     ),
                                  //   ),
                                  //   onTap: () async {
                                  //     final DateTime? pickedDate =
                                  //         await showDatePicker(
                                  //       context: context,
                                  //       initialDate: currentTimeSinceDate,
                                  //       firstDate: DateTime(1900),
                                  //       // Set a very distant past date
                                  //       lastDate: DateTime(2100),
                                  //       // Set a very distant future date
                                  //       initialDatePickerMode:
                                  //           DatePickerMode.day,
                                  //     );
                                  //     if (pickedDate != null &&
                                  //         pickedDate != currentTimeSinceDate) {
                                  //       setState(() {
                                  //         currentTimeSinceDate = pickedDate;
                                  //         String formDate =
                                  //             DateFormat("dd-MM-yyyy")
                                  //                 .format(pickedDate);
                                  //         _Act6TimeSinceController.text =
                                  //             formDate;
                                  //       });
                                  //     }
                                  //   },
                                  //   controller: _Act6TimeSinceController,
                                  //   validator: (text) {
                                  //     if (!(AppUtils.checkRequired(text))) {
                                  //       return translate(
                                  //           'commencementDateValidation');
                                  //     }
                                  //     return null;
                                  //   },
                                  // ),
                                  //
                                  // const SizedBox(
                                  //   height:
                                  //       AppConstants.TEXT_FORM_FIELD_PADDING,
                                  // ),
                                  // AppTextField(
                                  //   readOnly: Type == "view" ? true : false,
                                  //   textInputAction: TextInputAction.next,
                                  //   titleTextStyle: AppStyles.normalTextStyle
                                  //       .copyWith(fontSize: 16),
                                  //   title: Text(translate('noOfWorkersEmp')),
                                  //   validator: (text) {
                                  //     if (!(AppUtils.checkRequired(text))) {
                                  //       return translate('dataValidation');
                                  //     }
                                  //
                                  //     return null;
                                  //   },
                                  //   controller: _Act6NoWorkersController,
                                  //   textInputType: TextInputType.text,
                                  // ),
                                  //
                                  // const SizedBox(
                                  //   height:
                                  //       AppConstants.TEXT_FORM_FIELD_PADDING,
                                  // ),
                                  // AppTextField(
                                  //   readOnly: Type == "view" ? true : false,
                                  //   textInputAction: TextInputAction.next,
                                  //   titleTextStyle: AppStyles.normalTextStyle
                                  //       .copyWith(fontSize: 16),
                                  //   title: Text(translate('totalNoOfWorkers')),
                                  //   validator: (text) {
                                  //     if (!(AppUtils.checkRequired(text))) {
                                  //       return translate('dataValidation');
                                  //     }
                                  //
                                  //     return null;
                                  //   },
                                  //   controller: _Act6TotalNoWorkersController,
                                  //   textInputType: TextInputType.text,
                                  // ),
                                  //
                                  // const SizedBox(
                                  //   height: AppConstants.PADDING_8,
                                  // ),
                                  // Align(
                                  //   alignment: Alignment.centerRight,
                                  //   child: AppCustomButton(
                                  //     loaderColor: AppStyles.naturalWhiteColor,
                                  //     width: 100,
                                  //     height: 44,
                                  //     endIcon: Icon(Icons.delete),
                                  //     background: AppStyles.primary500Color,
                                  //     text: translate('delete'),
                                  //     textColor: AppStyles.white,
                                  //     fontWeight: FontWeight.normal,
                                  //     fontSize: 14,
                                  //     onClicked: Type == "view"
                                  //         ? null
                                  //         : () {
                                  //             setState(() {
                                  //               Act6Widgets.removeAt(Act6Widgets.length - 1);
                                  //             });
                                  //           },
                                  //   ),
                                  // ),
                                  Form(
                                    key: _form6Key,
                                    child: ListView.builder(
                                      shrinkWrap: true,
                                      physics: NeverScrollableScrollPhysics(),
                                      itemCount: Act6Widgets.length,
                                      itemBuilder: (context, index) {
                                        // Dynamically added widgets
                                        return Act6Widgets[index];
                                      },
                                    ),
                                  ),

                                  const SizedBox(
                                    height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                  ),
                                  Visibility(
                                      visible: Type == "view" ? false : true,
                                      child: Row(children: [
                                        Expanded(
                                          child: AppCustomButton(
                                            loaderColor: AppStyles.naturalWhiteColor,
                                            width: 100,
                                            height: 44,
                                            background: AppStyles.primary500Color,
                                            text: translate('addMoreDetails'),
                                            textColor: AppStyles.white,
                                            fontWeight: FontWeight.normal,
                                            fontSize: 14,
                                            onClicked: Type == "view"
                                                ? null
                                                : () {
                                                    FocusScope.of(context).unfocus();
                                                    int newIndex = Act6Widgets.length;
                                                    act6Ids.add(0);
                                                    act6ContractorPersonDetailsDetailDNo.add(0);
                                                    act6RuleIds.add(0);
                                                    _Act6SrNoControllers.add(TextEditingController());
                                                    _Act6NameContractorControllers.add(TextEditingController());
                                                    _Act6AddressControllers.add(TextEditingController());
                                                    _Act6DetailsWorkControllers.add(TextEditingController());
                                                    currentTimeSinceDates.add(DateTime.now());
                                                    _Act6TimeSinceControllers.add(TextEditingController());
                                                    _Act6NoWorkersControllers.add(TextEditingController());
                                                    _Act6TotalNoWorkersControllers.add(TextEditingController());
                                                    Act6(
                                                      newIndex,
                                                      _Act6SrNoControllers[newIndex],
                                                      _Act6NameContractorControllers[newIndex],
                                                      _Act6AddressControllers[newIndex],
                                                      _Act6DetailsWorkControllers[newIndex],
                                                      currentTimeSinceDates[newIndex],
                                                      _Act6TimeSinceControllers[newIndex],
                                                      _Act6NoWorkersControllers[newIndex],
                                                      _Act6TotalNoWorkersControllers[newIndex],
                                                    );
                                                  },
                                          ),
                                        ),
                                        // SizedBox(width: 10),
                                        // Expanded(
                                        //   child: AppCustomButton(
                                        //     loaderColor: AppStyles.naturalWhiteColor,
                                        //     width: 100,
                                        //     height: 44,
                                        //     background: AppStyles.primary500Color,
                                        //     text: translate('save'),
                                        //     textColor: AppStyles.white,
                                        //     fontWeight: FontWeight.normal,
                                        //     fontSize: 14,
                                        //     onClicked: () {
                                        //       FocusScope.of(context).unfocus();
                                        //       final _form = _form6Key.currentState!;
                                        //       if (_form.validate()) {
                                        //         convertXML6();
                                        //       }
                                        //     },
                                        //   ),
                                        // ),
                                      ]))

                                  // Add the widgets for employer details here
                                  // (e.g., TextFields, Buttons, etc.)
                                ],
                              ),
                            )),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.1.1",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act6_1_1'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (isSwitchedActs6_1_1 == false) {
                                    setState(() {
                                      isSwitchedActs6_1_1 = true;
                                    });
                                  } else {
                                    setState(() {
                                      isSwitchedActs6_1_1 = false;
                                    });
                                  }
                                },
                                value: isSwitchedActs6_1_1,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.1.2",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act6_1_2'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_1_2 == false) {
                                      setState(() {
                                        isSwitchedActs6_1_2 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_1_2 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_1_2,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      key: act6_1_3key,
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.1.3",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  RichText(
                                    text: TextSpan(
                                      style: AppStyles.textInputStyle,
                                      children: [
                                        TextSpan(
                                          text: translate('act6_1_3_1'),
                                        ),
                                        WidgetSpan(
                                          child: SizedBox(
                                            width: 100,
                                            child: TextFormField(
                                              readOnly: isreadOnlyR6,
                                              controller: _ActR6Controller,
                                              maxLines: null,
                                              keyboardType: TextInputType.text,
                                              validator: (text) {
                                                if (isSwitchedActs6_1_3 == true) {
                                                  if (!(AppUtils.checkRequired(text))) {
                                                    return translate('dataValidation');
                                                  }
                                                }

                                                return null;
                                              },
                                              decoration: InputDecoration(
                                                contentPadding: EdgeInsets.all(5.0),
                                              ),
                                              style: AppStyles.textInputStyle,
                                            ),
                                          ),
                                          alignment: PlaceholderAlignment.middle,
                                        ),
                                        TextSpan(
                                          text: translate('act6_1_3_2'),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_1_3 == false) {
                                      setState(() {
                                        isSwitchedActs6_1_3 = true;
                                        isreadOnlyR6 = false;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_1_3 = false;
                                        isreadOnlyR6 = true;
                                        _ActR6Controller.text = "";
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_1_3,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      key: act6_1_4key,
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.1.4",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  RichText(
                                    text: TextSpan(
                                      style: AppStyles.textInputStyle,
                                      children: [
                                        TextSpan(
                                          text: translate('act6_1_4_1'),
                                        ),
                                        WidgetSpan(
                                          child: SizedBox(
                                            width: 100,
                                            child: TextFormField(
                                              readOnly: isreadOnlyS172R34,
                                              controller: _ActS172R34Controller,
                                              maxLines: null,
                                              validator: (text) {
                                                if (isSwitchedActs6_1_4 == true) {
                                                  if (!(AppUtils.checkRequired(text))) {
                                                    return translate('dataValidation');
                                                  }
                                                }

                                                return null;
                                              },
                                              keyboardType: TextInputType.text,
                                              decoration: InputDecoration(
                                                contentPadding: EdgeInsets.all(5.0),
                                              ),
                                              style: AppStyles.textInputStyle,
                                            ),
                                          ),
                                          alignment: PlaceholderAlignment.middle,
                                        ),
                                        TextSpan(
                                          text: translate('act6_1_4_2'),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_1_4 == false) {
                                      setState(() {
                                        isSwitchedActs6_1_4 = true;
                                        isreadOnlyS172R34 = false;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_1_4 = false;
                                        isreadOnlyS172R34 = true;
                                        _ActS172R34Controller.text = "";
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_1_4,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.1.5",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act6_1_5'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_1_5 == false) {
                                      setState(() {
                                        isSwitchedActs6_1_5 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_1_5 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_1_5,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.1.6",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act6_1_5'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_1_6 == false) {
                                      setState(() {
                                        isSwitchedActs6_1_6 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_1_6 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_1_6,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.1.7",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act6_1_7'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_1_7 == false) {
                                      setState(() {
                                        isSwitchedActs6_1_7 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_1_7 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_1_7,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: Text(translate('remarks')),
                      controller: _Act6RemarksController,
                      textInputType: TextInputType.text,
                    ),
                    const SizedBox(
                      height: AppConstants.PADDING_8,
                    ),
                    Container(
                      padding: EdgeInsets.all(5),
                      width: double.maxFinite,
                      decoration: BoxDecoration(
                        color: AppStyles.primary500Color,
                      ),
                      child: Text(
                        'For Contractor',
                        style: TextStyle(color: AppStyles.white),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.2.1",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act6_2_1'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_2_1 == false) {
                                      setState(() {
                                        isSwitchedActs6_2_1 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_2_1 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_2_1,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.2.2",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act6_2_2'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_2_2 == false) {
                                      setState(() {
                                        isSwitchedActs6_2_2 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_2_2 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_2_2,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "6.2.3",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act6_2_3'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs6_2_3 == false) {
                                      setState(() {
                                        isSwitchedActs6_2_3 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs6_2_3 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs6_2_3,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: Text(translate('remarks')),
                      controller: _Act6_conRemarksController,
                      textInputType: TextInputType.text,
                    ),
                    const SizedBox(
                      height: AppConstants.PADDING_8,
                    ),
                    Container(
                      decoration: ShapeDecoration(
                        color: AppStyles.NotesColor,
                        shape: RoundedRectangleBorder(
                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                        ),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          translate('act6Note'),
                        ),
                      ),
                    ),
                  ])),
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "7. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act7'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs7 == false) {
                            setState(() {
                              isSwitchedActs7 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs7 = false;
                              isSwitchedActs7_1_1 = false;
                              isSwitchedActs7_1_2 = false;
                              isSwitchedActs7_1_3 = false;
                              isSwitchedActs7_2_1 = false;
                              isSwitchedActs7_2_2 = false;
                              isSwitchedActs7_2_3 = false;
                              isSwitchedActs7_2_4 = false;
                              _Act7RemarksController.text = "";
                            });
                            setState(() {});
                          }
                        }
                      },
                      value: isSwitchedActs7,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs7,
                  child: Column(
                    children: [
                      // Container(
                      //   padding: EdgeInsets.all(5),
                      //   width: double.maxFinite,
                      //   decoration: BoxDecoration(
                      //     color: Colors.deepPurpleAccent[100],
                      //   ),
                      //   child: Text(
                      //     'Part 1 Prohibition',
                      //     textAlign: TextAlign.center,
                      //   ),
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),
                      // Column(
                      //   children: [
                      //     Row(
                      //       children: [
                      //         Align(
                      //           alignment: Alignment.topCenter,
                      //           child: Text(
                      //             "7.1.1",
                      //             style: AppStyles.textInputStyle,
                      //           ),
                      //         ),
                      //         const SizedBox(
                      //           width: 20,
                      //         ),
                      //         Expanded(
                      //           flex: 2,
                      //           child: Align(
                      //             alignment: Alignment.topLeft,
                      //             child: Text(
                      //               "Children below the age of 14 years have been employed by the employer in the occupations and processes, which are prohibited under section 3 of the Act. Breach of Section-3.",
                      //               style: AppStyles.textInputStyle,
                      //             ),
                      //           ),
                      //         ),
                      //       ],
                      //     ),
                      //     Align(
                      //       alignment: Alignment.centerRight,
                      //       child: Transform.scale(
                      //           scale: 1,
                      //           child: Switch(
                      //             onChanged: (bool) {
                      //               if (isSwitchedActs7_1_1 == false) {
                      //                 setState(() {
                      //                   isSwitchedActs7_1_1 = true;
                      //                 });
                      //               } else {
                      //                 setState(() {
                      //                   isSwitchedActs7_1_1 = false;
                      //                 });
                      //               }
                      //             },
                      //             value: isSwitchedActs7_1_1,
                      //             activeColor: AppStyles.greenColor,
                      //             activeTrackColor: AppStyles.grey400Color,
                      //             inactiveThumbColor: AppStyles.white,
                      //             inactiveTrackColor: AppStyles.grey400Color,
                      //           )),
                      //     ),
                      //     Visibility(
                      //         visible: isSwitchedActs7_1_1,
                      //         child: Column(
                      //           children: [
                      //             Align(
                      //               alignment: Alignment.centerLeft,
                      //               child: Text(
                      //                 translate('childLabourInfo'),
                      //                 style: AppStyles.textInputStyle,
                      //               ),
                      //             ),
                      //             Container(
                      //                 decoration: ShapeDecoration(
                      //                   shape: RoundedRectangleBorder(
                      //                     side: BorderSide(
                      //                         color: AppStyles.greyIconColor,
                      //                         width: 1.0,
                      //                         style: BorderStyle.solid),
                      //                     borderRadius: BorderRadius.all(
                      //                         Radius.circular(12.0)),
                      //                   ),
                      //                 ),
                      //                 child: Padding(
                      //                   padding: EdgeInsets.all(
                      //                       AppConstants.PADDING_8),
                      //                   child: Column(
                      //                     children: [
                      //                       const SizedBox(
                      //                         height: AppConstants.PADDING_8,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate('srNo'),
                      //                         controller:
                      //                             _Act7_1_1SrNoController,
                      //                         readOnly: true,
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate(
                      //                             'nameOfChildLabour'),
                      //                         controller:
                      //                             _Act7_1_1NameChildLabourController,
                      //                         validator: (text) {
                      //                           if (!(AppUtils.checkRequired(
                      //                               text))) {
                      //                             return translate(
                      //                                 'dataValidation');
                      //                           }
                      //
                      //                           return null;
                      //                         },
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate('address'),
                      //                         controller:
                      //                             _Act7_1_1AddressController,
                      //                         validator: (text) {
                      //                           if (!(AppUtils.checkRequired(
                      //                               text))) {
                      //                             return translate(
                      //                                 'dataValidation');
                      //                           }
                      //
                      //                           return null;
                      //                         },
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate('ageChild'),
                      //                         validator: (text) {
                      //                           if (!(AppUtils.checkRequired(
                      //                               text))) {
                      //                             return translate(
                      //                                 'dataValidation');
                      //                           }
                      //
                      //                           return null;
                      //                         },
                      //                         controller:
                      //                             _Act7_1_1AgeController,
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate('imageOfChild'),
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title:
                      //                             translate('documentOfchild'),
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants.PADDING_8,
                      //                       ),
                      //                       Align(
                      //                         alignment: Alignment.centerRight,
                      //                         child: AppCustomButton(
                      //                           loaderColor:
                      //                               AppStyles.naturalWhiteColor,
                      //                           width: 100,
                      //                           height: 44,
                      //                           endIcon: Icon(Icons.delete),
                      //                           background:
                      //                               AppStyles.primary500Color,
                      //                           text: translate('delete'),
                      //                           textColor: AppStyles.white,
                      //                           fontWeight: FontWeight.normal,
                      //                           fontSize: 14,
                      //                           onClicked: () {
                      //                             setState(() {
                      //                               Act7_1_1Widgets.removeAt(
                      //                                   Act7_1_1Widgets.length -
                      //                                       1);
                      //                             });
                      //                           },
                      //                         ),
                      //                       ),
                      //                       ListView.builder(
                      //                         shrinkWrap: true,
                      //                         physics:
                      //                             NeverScrollableScrollPhysics(),
                      //                         itemCount: Act7_1_1Widgets.length,
                      //                         itemBuilder: (context, index) {
                      //                           // Dynamically added widgets
                      //                           return Act7_1_1Widgets[index];
                      //                         },
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .DEFAULT_CONTAINER_PADDING,
                      //                       ),
                      //                       Row(children: [
                      //                         Expanded(
                      //                           child: AppCustomButton(
                      //                             loaderColor: AppStyles
                      //                                 .naturalWhiteColor,
                      //                             width: 100,
                      //                             height: 44,
                      //                             background:
                      //                                 AppStyles.primary500Color,
                      //                             text: translate(
                      //                                 'addMoreDetails'),
                      //                             textColor: AppStyles.white,
                      //                             fontWeight: FontWeight.normal,
                      //                             fontSize: 14,
                      //                             onClicked: () {
                      //                               int newIndex =
                      //                                   Act7_1_1Widgets.length;
                      //                               Act7_1_1(
                      //                                 newIndex,
                      //                                 _Act7_1_1SrNoControllers[
                      //                                     newIndex],
                      //                                 _Act7_1_1NameChildLabourControllers[
                      //                                     newIndex],
                      //                                 _Act7_1_1AddressControllers[
                      //                                     newIndex],
                      //                                 _Act7_1_1AgeControllers[
                      //                                     newIndex],
                      //                               );
                      //                             },
                      //                           ),
                      //                         ),
                      //                         SizedBox(width: 10),
                      //                         Expanded(
                      //                           child: AppCustomButton(
                      //                             loaderColor: AppStyles
                      //                                 .naturalWhiteColor,
                      //                             width: 100,
                      //                             height: 44,
                      //                             background:
                      //                                 AppStyles.primary500Color,
                      //                             text: translate('save'),
                      //                             textColor: AppStyles.white,
                      //                             fontWeight: FontWeight.normal,
                      //                             fontSize: 14,
                      //                             onClicked: () {
                      //                               setState(() {
                      //                                 convertXML7_1_1();
                      //                               });
                      //                             },
                      //                           ),
                      //                         ),
                      //                       ])
                      //                     ],
                      //                   ),
                      //                 )),
                      //           ],
                      //         )),
                      //   ],
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),
                      // Column(
                      //   children: [
                      //     Row(
                      //       children: [
                      //         Align(
                      //           alignment: Alignment.topCenter,
                      //           child: Text(
                      //             "7.1.2",
                      //             style: AppStyles.textInputStyle,
                      //           ),
                      //         ),
                      //         const SizedBox(
                      //           width: 20,
                      //         ),
                      //         Expanded(
                      //           flex: 2,
                      //           child: Align(
                      //             alignment: Alignment.topLeft,
                      //             child: Text(
                      //               "Adolescents (has completed 14 year of age but not completed 18 year) have been employed by the employer in certain hazardous occupations and processes which is prohibited. [Breach of Section 3A of the act]",
                      //               style: AppStyles.textInputStyle,
                      //             ),
                      //           ),
                      //         ),
                      //       ],
                      //     ),
                      //     Align(
                      //       alignment: Alignment.centerRight,
                      //       child: Transform.scale(
                      //           scale: 1,
                      //           child: Switch(
                      //             onChanged: (bool) {
                      //               if (isSwitchedActs7_1_2 == false) {
                      //                 setState(() {
                      //                   isSwitchedActs7_1_2 = true;
                      //                 });
                      //               } else {
                      //                 setState(() {
                      //                   isSwitchedActs7_1_2 = false;
                      //                 });
                      //               }
                      //             },
                      //             value: isSwitchedActs7_1_2,
                      //             activeColor: AppStyles.greenColor,
                      //             activeTrackColor: AppStyles.grey400Color,
                      //             inactiveThumbColor: AppStyles.white,
                      //             inactiveTrackColor: AppStyles.grey400Color,
                      //           )),
                      //     ),
                      //     Visibility(
                      //         visible: isSwitchedActs7_1_2,
                      //         child: Column(
                      //           children: [
                      //             Align(
                      //               alignment: Alignment.centerLeft,
                      //               child: Text(
                      //                 translate('adolescentLabourInfo'),
                      //                 style: AppStyles.textInputStyle,
                      //               ),
                      //             ),
                      //             Container(
                      //                 decoration: ShapeDecoration(
                      //                   shape: RoundedRectangleBorder(
                      //                     side: BorderSide(
                      //                         color: AppStyles.greyIconColor,
                      //                         width: 1.0,
                      //                         style: BorderStyle.solid),
                      //                     borderRadius: BorderRadius.all(
                      //                         Radius.circular(12.0)),
                      //                   ),
                      //                 ),
                      //                 child: Padding(
                      //                   padding: EdgeInsets.all(
                      //                       AppConstants.PADDING_8),
                      //                   child: Column(
                      //                     children: [
                      //                       const SizedBox(
                      //                         height: AppConstants.PADDING_8,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate('srNo'),
                      //                         controller:
                      //                             _Act7_1_2SrNoController,
                      //                         readOnly: true,
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate(
                      //                             'nameofAdolescentLabour'),
                      //                         validator: (text) {
                      //                           if (!(AppUtils.checkRequired(
                      //                               text))) {
                      //                             return translate(
                      //                                 'dataValidation');
                      //                           }
                      //
                      //                           return null;
                      //                         },
                      //                         controller:
                      //                             _Act7_1_2NameAdolescentLabourController,
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate('address'),
                      //                         validator: (text) {
                      //                           if (!(AppUtils.checkRequired(
                      //                               text))) {
                      //                             return translate(
                      //                                 'dataValidation');
                      //                           }
                      //
                      //                           return null;
                      //                         },
                      //                         controller:
                      //                             _Act7_1_2AddressController,
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       AppTextField(
                      //                         textInputAction:
                      //                             TextInputAction.next,
                      //                         titleTextStyle: AppStyles
                      //                             .normalTextStyle
                      //                             .copyWith(fontSize: 16),
                      //                         title: translate('ageChild'),
                      //                         controller:
                      //                             _Act7_1_2AgeController,
                      //                         validator: (text) {
                      //                           if (!(AppUtils.checkRequired(
                      //                               text))) {
                      //                             return translate(
                      //                                 'dataValidation');
                      //                           }
                      //
                      //                           return null;
                      //                         },
                      //                         textInputType: TextInputType.text,
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .TEXT_FORM_FIELD_PADDING,
                      //                       ),
                      //                       Align(
                      //                         alignment: Alignment.centerRight,
                      //                         child: AppCustomButton(
                      //                           loaderColor:
                      //                               AppStyles.naturalWhiteColor,
                      //                           width: 100,
                      //                           height: 44,
                      //                           endIcon: Icon(Icons.delete),
                      //                           background:
                      //                               AppStyles.primary500Color,
                      //                           text: translate('delete'),
                      //                           textColor: AppStyles.white,
                      //                           fontWeight: FontWeight.normal,
                      //                           fontSize: 14,
                      //                           onClicked: () {
                      //                             setState(() {
                      //                               Act7_1_2Widgets.removeAt(
                      //                                   Act7_1_2Widgets.length -
                      //                                       1);
                      //                             });
                      //                           },
                      //                         ),
                      //                       ),
                      //                       ListView.builder(
                      //                         shrinkWrap: true,
                      //                         physics:
                      //                             NeverScrollableScrollPhysics(),
                      //                         itemCount: Act7_1_2Widgets.length,
                      //                         itemBuilder: (context, index) {
                      //                           // Dynamically added widgets
                      //                           return Act7_1_2Widgets[index];
                      //                         },
                      //                       ),
                      //                       const SizedBox(
                      //                         height: AppConstants
                      //                             .DEFAULT_CONTAINER_PADDING,
                      //                       ),
                      //                       Row(children: [
                      //                         Expanded(
                      //                           child: AppCustomButton(
                      //                             loaderColor: AppStyles
                      //                                 .naturalWhiteColor,
                      //                             width: 100,
                      //                             height: 44,
                      //                             background:
                      //                                 AppStyles.primary500Color,
                      //                             text: translate(
                      //                                 'addMoreDetails'),
                      //                             textColor: AppStyles.white,
                      //                             fontWeight: FontWeight.normal,
                      //                             fontSize: 14,
                      //                             onClicked: () {
                      //                               int newIndex =
                      //                                   Act7_1_2Widgets.length;
                      //                               Act7_1_2(
                      //                                   newIndex,
                      //                                   _Act7_1_2SrNoControllers[
                      //                                       newIndex],
                      //                                   _Act7_1_2NameAdolescentLabourControllers[
                      //                                       newIndex],
                      //                                   _Act7_1_2AddressControllers[
                      //                                       newIndex],
                      //                                   _Act7_1_2AgeControllers[
                      //                                       newIndex]);
                      //                             },
                      //                           ),
                      //                         ),
                      //                         SizedBox(width: 10),
                      //                         Expanded(
                      //                           child: AppCustomButton(
                      //                             loaderColor: AppStyles
                      //                                 .naturalWhiteColor,
                      //                             width: 100,
                      //                             height: 44,
                      //                             background:
                      //                                 AppStyles.primary500Color,
                      //                             text: translate('save'),
                      //                             textColor: AppStyles.white,
                      //                             fontWeight: FontWeight.normal,
                      //                             fontSize: 14,
                      //                             onClicked: () {
                      //                               setState(() {
                      //                                 convertXML7_1_2();
                      //                               });
                      //                             },
                      //                           ),
                      //                         ),
                      //                       ])
                      //
                      //                       // Add the widgets for employer details here
                      //                       // (e.g., TextFields, Buttons, etc.)
                      //                     ],
                      //                   ),
                      //                 )),
                      //           ],
                      //         )),
                      //   ],
                      // ),
                      // Divider(
                      //   color: AppStyles.grey500Color,
                      // ),

                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "7.1",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act7_1'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs7_2_1 == false) {
                                        setState(() {
                                          isSwitchedActs7_2_1 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs7_2_1 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs7_2_1,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "7.2",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act7_2'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs7_2_2 == false) {
                                        setState(() {
                                          isSwitchedActs7_2_2 = true;
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs7_2_2 = false;
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs7_2_2,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "7.3",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act7_3'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs7_2_3 == false) {
                                        setState(() {
                                          isSwitchedActs7_2_3 = true;
                                          if (Act7_3Widgets.length == 0) {
                                            createAct7_3();
                                          }
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs7_2_3 = false;

                                          if (Type == "edit") {
                                            for (int i = 0; i < Act7_3Widgets.length; i++) {
                                              deleteAct7_3(i);
                                              convertXML7_3();
                                            }
                                            Act7_3Widgets.clear();
                                          } else {
                                            Act7_3Widgets.clear();
                                          }
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs7_2_3,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs7_2_3,
                              child: Column(
                                children: [
                                  Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      translate('adolescentLabourInfo'),
                                      style: AppStyles.textInputStyle,
                                    ),
                                  ),
                                  Container(
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        child: Column(
                                          children: [
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            // AppTextField(
                                            //   textInputAction:
                                            //       TextInputAction.next,
                                            //   titleTextStyle: AppStyles
                                            //       .normalTextStyle
                                            //       .copyWith(fontSize: 16),
                                            //   title: Text(translate('srNo')),
                                            //   controller: _Act7_3SrNoController,
                                            //   readOnly: true,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('nameofAdolescentLabour')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act7_3NameAdolescentLabourController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('address')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act7_3AddressController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('ageChild')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller: _Act7_3AgeController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerRight,
                                            //   child: AppCustomButton(
                                            //     loaderColor:
                                            //         AppStyles.naturalWhiteColor,
                                            //     width: 100,
                                            //     height: 44,
                                            //     endIcon: Icon(Icons.delete),
                                            //     background:
                                            //         AppStyles.primary500Color,
                                            //     text: translate('delete'),
                                            //     textColor: AppStyles.white,
                                            //     fontWeight: FontWeight.normal,
                                            //     fontSize: 14,
                                            //     onClicked: Type == "view"
                                            //         ? null
                                            //         : () {
                                            //             setState(() {
                                            //               Act7_3Widgets.removeAt(Act7_3Widgets.length - 1);
                                            //             });
                                            //           },
                                            //   ),
                                            // ),
                                            Form(
                                              key: _form7_3Key,
                                              child: ListView.builder(
                                                shrinkWrap: true,
                                                physics: NeverScrollableScrollPhysics(),
                                                itemCount: Act7_3Widgets.length,
                                                itemBuilder: (context, index) {
                                                  // Dynamically added widgets
                                                  return Act7_3Widgets[index];
                                                },
                                              ),
                                            ),

                                            const SizedBox(
                                              height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            ),
                                            Visibility(
                                                visible: Type == "view" ? false : true,
                                                child: Row(children: [
                                                  Expanded(
                                                    child: AppCustomButton(
                                                      loaderColor: AppStyles.naturalWhiteColor,
                                                      width: 100,
                                                      height: 44,
                                                      background: AppStyles.primary500Color,
                                                      text: translate('addMoreDetails'),
                                                      textColor: AppStyles.white,
                                                      fontWeight: FontWeight.normal,
                                                      fontSize: 14,
                                                      onClicked: Type == "view"
                                                          ? null
                                                          : () {
                                                              FocusScope.of(context).unfocus();
                                                              int newIndex = Act7_3Widgets.length;
                                                              act7_3Ids.add(0);
                                                              act7_3ACTIsBreakRule972DetailDNo.add(0);
                                                              act7_3RuleIds.add(0);
                                                              _Act7_3SrNoControllers.add(TextEditingController());
                                                              _Act7_3NameAdolescentLabourControllers.add(TextEditingController());
                                                              _Act7_3AddressControllers.add(TextEditingController());
                                                              _Act7_3AgeControllers.add(TextEditingController());
                                                              Act7_3(
                                                                newIndex,
                                                                _Act7_3SrNoControllers[newIndex],
                                                                _Act7_3NameAdolescentLabourControllers[newIndex],
                                                                _Act7_3AddressControllers[newIndex],
                                                                _Act7_3AgeControllers[newIndex],
                                                              );
                                                            },
                                                    ),
                                                  ),
                                                  // SizedBox(width: 10),
                                                  // Expanded(
                                                  //   child: AppCustomButton(
                                                  //     loaderColor: AppStyles.naturalWhiteColor,
                                                  //     width: 100,
                                                  //     height: 44,
                                                  //     background: AppStyles.primary500Color,
                                                  //     text: translate('save'),
                                                  //     textColor: AppStyles.white,
                                                  //     fontWeight: FontWeight.normal,
                                                  //     fontSize: 14,
                                                  //     onClicked: Type == "view"
                                                  //         ? null
                                                  //         : () {
                                                  //             FocusScope.of(context).unfocus();
                                                  //             final _form = _form7_3Key.currentState!;
                                                  //             if (_form.validate()) {
                                                  //               convertXML7_3();
                                                  //             }
                                                  //           },
                                                  //   ),
                                                  // ),
                                                ]))

                                            // Add the widgets for employer details here
                                            // (e.g., TextFields, Buttons, etc.)
                                          ],
                                        ),
                                      )),
                                ],
                              )),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "7.4",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act7_4'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs7_2_4 == false) {
                                        setState(() {
                                          isSwitchedActs7_2_4 = true;
                                          if (Act7_2_4Widgets.length == 0) {
                                            createAct7_2_4();
                                          }
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs7_2_4 = false;

                                          if (Type == "edit") {
                                            for (int i = 0; i < Act7_2_4Widgets.length; i++) {
                                              deleteAct7_4(i);
                                              convertXML7_2_4();
                                            }
                                            Act7_2_4Widgets.clear();
                                          } else {
                                            Act7_2_4Widgets.clear();
                                          }
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs7_2_4,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs7_2_4,
                              child: Column(
                                children: [
                                  Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      translate('adolescentLabourInfo'),
                                      style: AppStyles.textInputStyle,
                                    ),
                                  ),
                                  Container(
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        child: Column(
                                          children: [
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            // AppTextField(
                                            //   textInputAction:
                                            //       TextInputAction.next,
                                            //   titleTextStyle: AppStyles
                                            //       .normalTextStyle
                                            //       .copyWith(fontSize: 16),
                                            //   title: Text(translate('srNo')),
                                            //   controller:
                                            //       _Act7_2_4SrNoController,
                                            //   readOnly: true,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('nameofAdolescentLabour')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act7_2_4NameAdolescentLabourController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('address')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act7_2_4AddressController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('ageChild')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act7_2_4AgeController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerRight,
                                            //   child: AppCustomButton(
                                            //     loaderColor:
                                            //         AppStyles.naturalWhiteColor,
                                            //     width: 100,
                                            //     height: 44,
                                            //     endIcon: Icon(Icons.delete),
                                            //     background:
                                            //         AppStyles.primary500Color,
                                            //     text: translate('delete'),
                                            //     textColor: AppStyles.white,
                                            //     fontWeight: FontWeight.normal,
                                            //     fontSize: 14,
                                            //     onClicked: Type == "view"
                                            //         ? null
                                            //         : () {
                                            //             setState(() {
                                            //               Act7_2_4Widgets.removeAt(Act7_2_4Widgets.length - 1);
                                            //             });
                                            //           },
                                            //   ),
                                            // ),
                                            Form(
                                              key: _form7_4Key,
                                              child: ListView.builder(
                                                shrinkWrap: true,
                                                physics: NeverScrollableScrollPhysics(),
                                                itemCount: Act7_2_4Widgets.length,
                                                itemBuilder: (context, index) {
                                                  // Dynamically added widgets
                                                  return Act7_2_4Widgets[index];
                                                },
                                              ),
                                            ),

                                            const SizedBox(
                                              height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            ),
                                            Visibility(
                                                visible: Type == "view" ? false : true,
                                                child: Row(children: [
                                                  Expanded(
                                                    child: AppCustomButton(
                                                      loaderColor: AppStyles.naturalWhiteColor,
                                                      width: 100,
                                                      height: 44,
                                                      background: AppStyles.primary500Color,
                                                      text: translate('addMoreDetails'),
                                                      textColor: AppStyles.white,
                                                      fontWeight: FontWeight.normal,
                                                      fontSize: 14,
                                                      onClicked: Type == "view"
                                                          ? null
                                                          : () {
                                                              FocusScope.of(context).unfocus();
                                                              int newIndex = Act7_2_4Widgets.length;
                                                              act7_4Ids.add(0);
                                                              act7_4ACTIsBreakRule973DetailDNo.add(0);
                                                              act7_4RuleIds.add(0);
                                                              _Act7_2_4SrNoControllers.add(TextEditingController());
                                                              _Act7_2_4NameAdolescentLabourControllers.add(TextEditingController());
                                                              _Act7_2_4AddressControllers.add(TextEditingController());
                                                              _Act7_2_4AgeControllers.add(TextEditingController());
                                                              Act7_2_4(
                                                                newIndex,
                                                                _Act7_2_4SrNoControllers[newIndex],
                                                                _Act7_2_4NameAdolescentLabourControllers[newIndex],
                                                                _Act7_2_4AddressControllers[newIndex],
                                                                _Act7_2_4AgeControllers[newIndex],
                                                              );
                                                            },
                                                    ),
                                                  ),
                                                  // SizedBox(width: 10),
                                                  // Expanded(
                                                  //   child: AppCustomButton(
                                                  //     loaderColor: AppStyles.naturalWhiteColor,
                                                  //     width: 100,
                                                  //     height: 44,
                                                  //     background: AppStyles.primary500Color,
                                                  //     text: translate('save'),
                                                  //     textColor: AppStyles.white,
                                                  //     fontWeight: FontWeight.normal,
                                                  //     fontSize: 14,
                                                  //     onClicked: Type == "view"
                                                  //         ? null
                                                  //         : () {
                                                  //             FocusScope.of(context).unfocus();
                                                  //             final _form = _form7_4Key.currentState!;
                                                  //             if (_form.validate()) {
                                                  //               convertXML7_2_4();
                                                  //             }
                                                  //           },
                                                  //   ),
                                                  // ),
                                                ]))

                                            // Add the widgets for employer details here
                                            // (e.g., TextFields, Buttons, etc.)
                                          ],
                                        ),
                                      )),
                                ],
                              )),
                        ],
                      ),
                      Divider(
                        color: AppStyles.grey500Color,
                      ),
                      Column(
                        children: [
                          Row(
                            children: [
                              Align(
                                alignment: Alignment.topCenter,
                                child: Text(
                                  "7.5",
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                              const SizedBox(
                                width: 20,
                              ),
                              Expanded(
                                flex: 2,
                                child: Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    translate('act7_5'),
                                    style: AppStyles.textInputStyle,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: Transform.scale(
                                scale: 1,
                                child: Switch(
                                  onChanged: (bool) {
                                    if (Type == "view") {
                                    } else {
                                      if (isSwitchedActs7_1_3 == false) {
                                        setState(() {
                                          isSwitchedActs7_1_3 = true;
                                          if (Act7_1_3Widgets.length == 0) {
                                            createAct7_5();
                                          }
                                        });
                                      } else {
                                        setState(() {
                                          isSwitchedActs7_1_3 = false;

                                          if (Type == "edit") {
                                            for (int i = 0; i < Act7_1_3Widgets.length; i++) {
                                              deleteAct7_5(i);
                                              convertXML7_1_3();
                                            }
                                            Act7_1_3Widgets.clear();
                                          } else {
                                            Act7_1_3Widgets.clear();
                                          }
                                        });
                                      }
                                    }
                                  },
                                  value: isSwitchedActs7_1_3,
                                  activeColor: AppStyles.greenColor,
                                  activeTrackColor: AppStyles.grey400Color,
                                  inactiveThumbColor: AppStyles.white,
                                  inactiveTrackColor: AppStyles.grey400Color,
                                )),
                          ),
                          Visibility(
                              visible: isSwitchedActs7_1_3,
                              child: Column(
                                children: [
                                  Container(
                                      decoration: ShapeDecoration(
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(AppConstants.PADDING_8),
                                        child: Column(
                                          children: [
                                            const SizedBox(
                                              height: AppConstants.PADDING_8,
                                            ),
                                            // AppTextField(
                                            //   textInputAction:
                                            //       TextInputAction.next,
                                            //   titleTextStyle: AppStyles
                                            //       .normalTextStyle
                                            //       .copyWith(fontSize: 16),
                                            //   title: Text(translate('srNo')),
                                            //   controller:
                                            //       _Act7_1_3SrNoController,
                                            //   readOnly: true,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('childLabour')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act7_1_3NameChildLabourController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('address')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act7_1_3AddressController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // AppTextField(
                                            //   readOnly: Type == "view" ? true : false,
                                            //   textInputAction: TextInputAction.next,
                                            //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            //   title: Text(translate('ageChild')),
                                            //   validator: (text) {
                                            //     if (!(AppUtils.checkRequired(
                                            //         text))) {
                                            //       return translate(
                                            //           'dataValidation');
                                            //     }
                                            //
                                            //     return null;
                                            //   },
                                            //   controller:
                                            //       _Act7_1_3AgeController,
                                            //   textInputType: TextInputType.text,
                                            // ),
                                            // const SizedBox(
                                            //   height: AppConstants
                                            //       .TEXT_FORM_FIELD_PADDING,
                                            // ),
                                            // Align(
                                            //   alignment: Alignment.centerRight,
                                            //   child: AppCustomButton(
                                            //     loaderColor:
                                            //         AppStyles.naturalWhiteColor,
                                            //     width: 100,
                                            //     height: 44,
                                            //     endIcon: Icon(Icons.delete),
                                            //     background:
                                            //         AppStyles.primary500Color,
                                            //     text: translate('delete'),
                                            //     textColor: AppStyles.white,
                                            //     fontWeight: FontWeight.normal,
                                            //     fontSize: 14,
                                            //     onClicked: Type == "view"
                                            //         ? null
                                            //         : () {
                                            //             setState(() {
                                            //               Act7_1_3Widgets.removeAt(Act7_1_3Widgets.length - 1);
                                            //             });
                                            //           },
                                            //   ),
                                            // ),
                                            Form(
                                              key: _form7_5Key,
                                              child: ListView.builder(
                                                shrinkWrap: true,
                                                physics: NeverScrollableScrollPhysics(),
                                                itemCount: Act7_1_3Widgets.length,
                                                itemBuilder: (context, index) {
                                                  // Dynamically added widgets
                                                  return Act7_1_3Widgets[index];
                                                },
                                              ),
                                            ),

                                            const SizedBox(
                                              height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                            ),
                                            Visibility(
                                                visible: Type == "view" ? false : true,
                                                child: Row(children: [
                                                  Expanded(
                                                    child: AppCustomButton(
                                                      loaderColor: AppStyles.naturalWhiteColor,
                                                      width: 100,
                                                      height: 44,
                                                      background: AppStyles.primary500Color,
                                                      text: translate('addMoreDetails'),
                                                      textColor: AppStyles.white,
                                                      fontWeight: FontWeight.normal,
                                                      fontSize: 14,
                                                      onClicked: Type == "view"
                                                          ? null
                                                          : () {
                                                              FocusScope.of(context).unfocus();
                                                              int newIndex = Act7_1_3Widgets.length;
                                                              act7_5WorkemenSrNo.add(0);
                                                              act7_5Ids.add(0);
                                                              act7_5RuleIds.add(0);
                                                              _Act7_1_3SrNoControllers.add(TextEditingController());
                                                              _Act7_1_3NameChildLabourControllers.add(TextEditingController());
                                                              _Act7_1_3AddressControllers.add(TextEditingController());
                                                              _Act7_1_3AgeControllers.add(TextEditingController());
                                                              Act7_1_3(
                                                                newIndex,
                                                                _Act7_1_3SrNoControllers[newIndex],
                                                                _Act7_1_3NameChildLabourControllers[newIndex],
                                                                _Act7_1_3AddressControllers[newIndex],
                                                                _Act7_1_3AgeControllers[newIndex],
                                                              );
                                                            },
                                                    ),
                                                  ),
                                                  // SizedBox(width: 10),
                                                  // Expanded(
                                                  //   child: AppCustomButton(
                                                  //     loaderColor: AppStyles.naturalWhiteColor,
                                                  //     width: 100,
                                                  //     height: 44,
                                                  //     background: AppStyles.primary500Color,
                                                  //     text: translate('save'),
                                                  //     textColor: AppStyles.white,
                                                  //     fontWeight: FontWeight.normal,
                                                  //     fontSize: 14,
                                                  //     onClicked: Type == "view"
                                                  //         ? null
                                                  //         : () {
                                                  //             FocusScope.of(context).unfocus();
                                                  //             final _form = _form7_5Key.currentState!;
                                                  //             if (_form.validate()) {
                                                  //               convertXML7_1_3();
                                                  //             }
                                                  //           },
                                                  //   ),
                                                  // ),
                                                ]))

                                            // Add the widgets for employer details here
                                            // (e.g., TextFields, Buttons, etc.)
                                          ],
                                        ),
                                      )),
                                ],
                              )),
                        ],
                      ),
                      const SizedBox(
                        height: AppConstants.TEXT_FORM_FIELD_PADDING,
                      ),
                      AppTextField(
                        readOnly: Type == "view" ? true : false,
                        textInputAction: TextInputAction.next,
                        titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                        title: Text(translate('remarks')),
                        controller: _Act7RemarksController,
                        textInputType: TextInputType.text,
                      ),
                      const SizedBox(
                        height: AppConstants.PADDING_8,
                      ),
                      Container(
                        decoration: ShapeDecoration(
                          color: AppStyles.NotesColor,
                          shape: RoundedRectangleBorder(
                            side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                            borderRadius: BorderRadius.all(Radius.circular(12.0)),
                          ),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Text(
                            translate('act7_3'),
                          ),
                        ),
                      ),
                    ],
                  ))
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "8. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act8'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs8 == false) {
                            setState(() {
                              isSwitchedActs8 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs8 = false;
                              isSwitchedActs8_1 = false;
                              isSwitchedActs8_2 = false;
                              isSwitchedActs8_3 = false;
                              _Act8RemarksController.text = "";
                            });
                            setState(() {});
                          }
                        }
                      },
                      value: isSwitchedActs8,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs8,
                  child: Column(children: [
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "8.1",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act8_1'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs8_1 == false) {
                                      setState(() {
                                        isSwitchedActs8_1 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs8_1 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs8_1,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "8.2",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act8_2'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs8_2 == false) {
                                      setState(() {
                                        isSwitchedActs8_2 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs8_2 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs8_2,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "8.3",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act8_3'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs8_3 == false) {
                                      setState(() {
                                        isSwitchedActs8_3 = true;
                                        if (Act8_3Widgets.length == 0) {
                                          createAct8_3();
                                        }
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs8_3 = false;

                                        if (Type == "edit") {
                                          for (int i = 0; i < Act8_3Widgets.length; i++) {
                                            deleteAct8_3(i);
                                            convertXML8_3();
                                          }
                                          Act8_3Widgets.clear();
                                        } else {
                                          Act8_3Widgets.clear();
                                        }
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs8_3,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                        Visibility(
                            visible: isSwitchedActs8_3,
                            child: Column(
                              children: [
                                Container(
                                    decoration: ShapeDecoration(
                                      shape: RoundedRectangleBorder(
                                        side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                        borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                      ),
                                    ),
                                    child: Padding(
                                      padding: EdgeInsets.all(AppConstants.PADDING_8),
                                      child: Column(
                                        children: [
                                          const SizedBox(
                                            height: AppConstants.PADDING_8,
                                          ),
                                          // AppTextField(
                                          //   textInputAction:
                                          //       TextInputAction.next,
                                          //   titleTextStyle: AppStyles
                                          //       .normalTextStyle
                                          //       .copyWith(fontSize: 16),
                                          //   title: Text(translate('srNo')),
                                          //   controller: _Act8_3SrNoController,
                                          //   readOnly: true,
                                          //   textInputType: TextInputType.text,
                                          // ),
                                          // const SizedBox(
                                          //   height: AppConstants
                                          //       .TEXT_FORM_FIELD_PADDING,
                                          // ),
                                          // AppTextField(
                                          //   readOnly: Type == "view" ? true : false,
                                          //   textInputAction: TextInputAction.next,
                                          //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                          //   title: Text(translate('name')),
                                          //   validator: (text) {
                                          //     if (!(AppUtils.checkRequired(
                                          //         text))) {
                                          //       return translate(
                                          //           'dataValidation');
                                          //     }
                                          //
                                          //     return null;
                                          //   },
                                          //   controller: _Act8_3NameController,
                                          //   textInputType: TextInputType.text,
                                          // ),
                                          // const SizedBox(
                                          //   height: AppConstants
                                          //       .TEXT_FORM_FIELD_PADDING,
                                          // ),
                                          // AppTextField(
                                          //   readOnly: Type == "view" ? true : false,
                                          //   textInputAction: TextInputAction.next,
                                          //   titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                          //   title: Text(translate('desg')),
                                          //   validator: (text) {
                                          //     if (!(AppUtils.checkRequired(
                                          //         text))) {
                                          //       return translate(
                                          //           'dataValidation');
                                          //     }
                                          //
                                          //     return null;
                                          //   },
                                          //   controller: _Act8_3DesgController,
                                          //   textInputType: TextInputType.text,
                                          // ),
                                          // const SizedBox(
                                          //   height: AppConstants
                                          //       .TEXT_FORM_FIELD_PADDING,
                                          // ),
                                          // AppTextField(
                                          //   textInputAction:
                                          //       TextInputAction.next,
                                          //   titleTextStyle: AppStyles
                                          //       .normalTextStyle
                                          //       .copyWith(fontSize: 16),
                                          //   title: Text(
                                          //       translate('dateofSuspension')),
                                          //   suffixIcon: IconButton(
                                          //     onPressed: Type == "view" ? null : () => _select_DateSuspension(context),
                                          //     icon: Icon(
                                          //       Icons.calendar_today,
                                          //     ),
                                          //   ),
                                          //   controller:
                                          //       _Act8_3DateSuspensionController,
                                          //   readOnly: true,
                                          //   onTap: Type == "view" ? null : () => _select_DateSuspension(context),
                                          //   textInputType: TextInputType.text,
                                          //   validator: (text) {
                                          //     if (!(AppUtils.checkRequired(
                                          //         text))) {
                                          //       return translate(
                                          //           'dataValidation');
                                          //     }
                                          //     return null;
                                          //   },
                                          // ),
                                          // const SizedBox(
                                          //   height: AppConstants
                                          //       .TEXT_FORM_FIELD_PADDING,
                                          // ),
                                          // Align(
                                          //   alignment: Alignment.centerRight,
                                          //   child: AppCustomButton(
                                          //     loaderColor:
                                          //         AppStyles.naturalWhiteColor,
                                          //     width: 100,
                                          //     height: 44,
                                          //     endIcon: Icon(Icons.delete),
                                          //     background:
                                          //         AppStyles.primary500Color,
                                          //     text: translate('delete'),
                                          //     textColor: AppStyles.white,
                                          //     fontWeight: FontWeight.normal,
                                          //     fontSize: 14,
                                          //     onClicked: Type == "view"
                                          //         ? null
                                          //         : () {
                                          //             setState(() {
                                          //               Act8_3Widgets.removeAt(Act8_3Widgets.length - 1);
                                          //             });
                                          //           },
                                          //   ),
                                          // ),
                                          Form(
                                            key: _form8_3Key,
                                            child: ListView.builder(
                                              shrinkWrap: true,
                                              physics: NeverScrollableScrollPhysics(),
                                              itemCount: Act8_3Widgets.length,
                                              itemBuilder: (context, index) {
                                                // Dynamically added widgets
                                                return Act8_3Widgets[index];
                                              },
                                            ),
                                          ),

                                          const SizedBox(
                                            height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                          ),
                                          Visibility(
                                              visible: Type == "view" ? false : true,
                                              child: Row(children: [
                                                Expanded(
                                                  child: AppCustomButton(
                                                    loaderColor: AppStyles.naturalWhiteColor,
                                                    width: 100,
                                                    height: 44,
                                                    background: AppStyles.primary500Color,
                                                    text: translate('addMoreDetails'),
                                                    textColor: AppStyles.white,
                                                    fontWeight: FontWeight.normal,
                                                    fontSize: 14,
                                                    onClicked: Type == "view"
                                                        ? null
                                                        : () {
                                                            FocusScope.of(context).unfocus();
                                                            int newIndex = Act8_3Widgets.length;
                                                            act8_3dessrno.add(0);
                                                            act8_3Ids.add(0);
                                                            act8_3RuleIds.add(0);
                                                            _Act8_3SrNoControllers.add(TextEditingController());
                                                            _Act8_3NameControllers.add(TextEditingController());
                                                            _Act8_3DesgControllers.add(TextEditingController());
                                                            current_suspensionDates.add(DateTime.now());
                                                            _Act8_3DateSuspensionControllers.add(TextEditingController());
                                                            Act8_3(
                                                              newIndex,
                                                              _Act8_3SrNoControllers[newIndex],
                                                              _Act8_3NameControllers[newIndex],
                                                              _Act8_3DesgControllers[newIndex],
                                                              current_suspensionDates[newIndex],
                                                              _Act8_3DateSuspensionControllers[newIndex],
                                                            );
                                                          },
                                                  ),
                                                ),
                                                // SizedBox(width: 10),
                                                // Expanded(
                                                //   child: AppCustomButton(
                                                //     loaderColor: AppStyles.naturalWhiteColor,
                                                //     width: 100,
                                                //     height: 44,
                                                //     background: AppStyles.primary500Color,
                                                //     text: translate('save'),
                                                //     textColor: AppStyles.white,
                                                //     fontWeight: FontWeight.normal,
                                                //     fontSize: 14,
                                                //     onClicked: Type == "view"
                                                //         ? null
                                                //         : () {
                                                //             FocusScope.of(context).unfocus();
                                                //             final _form = _form8_3Key.currentState!;
                                                //             if (_form.validate()) {
                                                //               convertXML8_3();
                                                //             }
                                                //           },
                                                //   ),
                                                // ),
                                              ]))

                                          // Add the widgets for employer details here
                                          // (e.g., TextFields, Buttons, etc.)
                                        ],
                                      ),
                                    )),
                              ],
                            )),
                      ],
                    ),
                    const SizedBox(
                      height: AppConstants.TEXT_FORM_FIELD_PADDING,
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: Text(translate('remarks')),
                      controller: _Act8RemarksController,
                      textInputType: TextInputType.text,
                    ),
                    const SizedBox(
                      height: AppConstants.PADDING_8,
                    ),
                    Container(
                      decoration: ShapeDecoration(
                        color: AppStyles.NotesColor,
                        shape: RoundedRectangleBorder(
                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                        ),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          translate('act8Note'),
                        ),
                      ),
                    ),
                  ]))
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "9. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act9'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs9 == false) {
                            setState(() {
                              isSwitchedActs9 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs9 = false;
                              isSwitchedActs9_1 = false;
                              isSwitchedActs9_2 = false;
                              isSwitchedActs9_3 = false;
                              isSwitchedActs9_4 = false;
                              isSwitchedActs9_5 = false;
                              _Act9RemarksController.text = "";
                            });
                            setState(() {});
                          }
                        }
                      },
                      value: isSwitchedActs9,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs9,
                  child: Column(children: [
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "9.1",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act9_1'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs9_1 == false) {
                                      setState(() {
                                        isSwitchedActs9_1 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs9_1 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs9_1,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "9.2",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act9_2'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs9_2 == false) {
                                      setState(() {
                                        isSwitchedActs9_2 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs9_2 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs9_2,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "9.3",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act9_3'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs9_3 == false) {
                                      setState(() {
                                        isSwitchedActs9_3 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs9_3 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs9_3,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "9.4",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act9_4'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs9_4 == false) {
                                      setState(() {
                                        isSwitchedActs9_4 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs9_4 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs9_4,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "9.5",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act9_5'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs9_5 == false) {
                                      setState(() {
                                        isSwitchedActs9_5 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs9_5 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs9_5,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: Text(translate('remarks')),
                      controller: _Act9RemarksController,
                      textInputType: TextInputType.text,
                    ),
                    const SizedBox(
                      height: AppConstants.PADDING_8,
                    ),
                    Container(
                      decoration: ShapeDecoration(
                        color: AppStyles.NotesColor,
                        shape: RoundedRectangleBorder(
                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                        ),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          translate('act9Note'),
                        ),
                      ),
                    ),
                  ]))
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "10. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act10'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs10 == false) {
                            setState(() {
                              isSwitchedActs10 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs10 = false;
                              isSwitchedActs10_1 = false;
                              isSwitchedActs10_2 = false;
                              isSwitchedActs10_3 = false;
                              _ActR13_14_25S7NotController.text = "";
                              _ActR13_14_25S7Not1Controller.text = "";
                              _Act10RemarksController.text = "";
                            });
                            setState(() {});
                          }
                        }
                      },
                      value: isSwitchedActs10,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs10,
                  child: Column(children: [
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "10.1",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act10_1'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs10_1 == false) {
                                      setState(() {
                                        isSwitchedActs10_1 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs10_1 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs10_1,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "10.2",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act10_2'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs10_2 == false) {
                                      setState(() {
                                        isSwitchedActs10_2 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs10_2 = false;
                                        empFormD = false;
                                        serviceFormE = false;
                                        leaveRegFormF = false;
                                        musterRollFormG = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs10_2,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                        Visibility(
                          visible: isSwitchedActs10_2,
                          child: Column(
                            children: [
                              CheckboxListTile(
                                title: Text(translate('empForm-D')),
                                value: empFormD,
                                onChanged: (newValue) {
                                  setState(() {
                                    empFormD = newValue!;
                                  });
                                },
                                controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                              ),
                              CheckboxListTile(
                                title: Text(translate('serviceForm-E')),
                                value: serviceFormE,
                                onChanged: (newValue) {
                                  setState(() {
                                    serviceFormE = newValue!;
                                  });
                                },
                                controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                              ),
                              CheckboxListTile(
                                title: Text(translate('leaveRegForm-F')),
                                value: leaveRegFormF,
                                onChanged: (newValue) {
                                  setState(() {
                                    leaveRegFormF = newValue!;
                                  });
                                },
                                controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                              ),
                              CheckboxListTile(
                                title: Text(translate('musterRollFormG')),
                                value: musterRollFormG,
                                onChanged: (newValue) {
                                  setState(() {
                                    musterRollFormG = newValue!;
                                  });
                                },
                                controlAffinity: ListTileControlAffinity.leading, //  <-- leading Checkbox
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      key: act10_3key,
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "10.3",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  RichText(
                                    text: TextSpan(
                                      style: AppStyles.textInputStyle,
                                      children: [
                                        TextSpan(
                                          text: translate('act10_3_1'),
                                        ),
                                        WidgetSpan(
                                          child: SizedBox(
                                            width: 80,
                                            child: TextFormField(
                                              readOnly: isreadOnlyR13_14_25S7,
                                              controller: _ActR13_14_25S7NotController,
                                              maxLines: null,
                                              validator: (text) {
                                                if (isSwitchedActs10_3 == true) {
                                                  if (!(AppUtils.checkRequired(text))) {
                                                    return translate('dataValidation');
                                                  }
                                                }

                                                return null;
                                              },
                                              keyboardType: TextInputType.text,
                                              decoration: InputDecoration(
                                                contentPadding: EdgeInsets.all(5.0),
                                              ),
                                              style: AppStyles.textInputStyle,
                                            ),
                                          ),
                                          alignment: PlaceholderAlignment.middle,
                                        ),
                                        TextSpan(
                                          text: translate('act10_3_2'),
                                        ),
                                        WidgetSpan(
                                          child: SizedBox(
                                            width: 100,
                                            child: TextFormField(
                                              readOnly: isreadOnlyR13_14_25S7,
                                              controller: _ActR13_14_25S7Not1Controller,
                                              maxLines: null,
                                              keyboardType: TextInputType.text,
                                              validator: (text) {
                                                if (isSwitchedActs10_3 == true) {
                                                  if (!(AppUtils.checkRequired(text))) {
                                                    return translate('dataValidation');
                                                  }
                                                }

                                                return null;
                                              },
                                              decoration: InputDecoration(
                                                contentPadding: EdgeInsets.all(5.0),
                                              ),
                                              style: AppStyles.textInputStyle,
                                            ),
                                          ),
                                          alignment: PlaceholderAlignment.middle,
                                        ),
                                        TextSpan(
                                          text: translate('act10_3_3'),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs10_3 == false) {
                                      setState(() {
                                        isSwitchedActs10_3 = true;
                                        isreadOnlyR13_14_25S7 = false;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs10_3 = false;
                                        isreadOnlyR13_14_25S7 = true;
                                        _ActR13_14_25S7NotController.text = "";
                                        _ActR13_14_25S7Not1Controller.text = "";
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs10_3,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: Text(translate('remarks')),
                      controller: _Act10RemarksController,
                      textInputType: TextInputType.text,
                    ),
                    const SizedBox(
                      height: AppConstants.PADDING_8,
                    ),
                    Container(
                      decoration: ShapeDecoration(
                        color: AppStyles.NotesColor,
                        shape: RoundedRectangleBorder(
                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                        ),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          translate('act10Note'),
                        ),
                      ),
                    ),
                  ]))
            ]),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        Container(
          decoration: ShapeDecoration(
            shape: RoundedRectangleBorder(
              side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(AppConstants.PADDING_8),
            child: Column(children: [
              Row(
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "11. ",
                      style: AppStyles.textInputStyle,
                    ),
                  ),
                  const SizedBox(
                    width: 20,
                  ),
                  Expanded(
                    flex: 2,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        translate('act11'),
                        style: AppStyles.textInputStyle,
                      ),
                    ),
                  ),
                ],
              ),
              Align(
                alignment: Alignment.centerRight,
                child: Transform.scale(
                    scale: 1,
                    child: Switch(
                      onChanged: (bool) {
                        if (Type == "view") {
                        } else {
                          if (isSwitchedActs11 == false) {
                            setState(() {
                              isSwitchedActs11 = true;
                            });
                          } else {
                            setState(() {
                              isSwitchedActs11 = false;
                              isSwitchedActs11_1 = false;
                              isSwitchedActs11_2 = false;
                              isSwitchedActs11_3 = false;
                              isSwitchedActs11_4 = false;
                              _ActR14_15_16S4Controller.text = "";
                              _ActR143_144_145Controller.text = "";
                              _Act11RemarksController.text = "";
                            });
                            setState(() {});
                          }
                        }
                      },
                      value: isSwitchedActs11,
                      activeColor: AppStyles.greenColor,
                      activeTrackColor: AppStyles.grey400Color,
                      inactiveThumbColor: AppStyles.white,
                      inactiveTrackColor: AppStyles.grey400Color,
                    )),
              ),
              Visibility(
                  visible: isSwitchedActs11,
                  child: Column(children: [
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "11.1",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act11_1'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs11_1 == false) {
                                      setState(() {
                                        isSwitchedActs11_1 = true;
                                        if (Act11_1Widgets.length == 0) {
                                          createAct11_1();
                                        }
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs11_1 = false;

                                        if (Type == "edit") {
                                          for (int i = 0; i < Act11_1Widgets.length; i++) {
                                            deleteAct11_1(i);
                                            convertXML11_1();
                                          }
                                          Act11_1Widgets.clear();
                                        } else {
                                          Act11_1Widgets.clear();
                                        }
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs11_1,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                        Visibility(
                            visible: isSwitchedActs11_1,
                            child: Column(
                              children: [
                                Container(
                                    decoration: ShapeDecoration(
                                      shape: RoundedRectangleBorder(
                                        side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                                        borderRadius: BorderRadius.all(Radius.circular(12.0)),
                                      ),
                                    ),
                                    child: Padding(
                                      padding: EdgeInsets.all(AppConstants.PADDING_8),
                                      child: Column(
                                        children: [
                                          const SizedBox(
                                            height: AppConstants.PADDING_8,
                                          ),
                                          /* AppTextField(
                                            textInputAction:
                                                TextInputAction.next,
                                            titleTextStyle: AppStyles
                                                .normalTextStyle
                                                .copyWith(fontSize: 16),
                                            title: Text(translate('srNo')),
                                            controller: _Act11_1SrNoController,
                                            readOnly: true,
                                            textInputType: TextInputType.text,
                                          ),
                                          const SizedBox(
                                            height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                          ),
                                          AppTextField(
                                            textInputAction: TextInputAction.next,
                                            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            title: Text(translate('name')),
                                            validator: (text) {
                                              if (!(AppUtils.checkRequired(text))) {
                                                return translate('dataValidation');
                                              }

                                              return null;
                                            },
                                            controller: _Act11_1NameController,
                                            textInputType: TextInputType.text,
                                          ),
                                          const SizedBox(
                                            height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                          ),
                                          AppTextField(
                                            readOnly: Type == "view" ? true : false,
                                            textInputAction: TextInputAction.next,
                                            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            title: Text(translate('desg')),
                                            validator: (text) {
                                              if (!(AppUtils.checkRequired(text))) {
                                                return translate('dataValidation');
                                              }

                                              return null;
                                            },
                                            controller: _Act11_1DesgController,
                                            textInputType: TextInputType.text,
                                          ),
                                          const SizedBox(
                                            height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                          ),
                                          AppTextField(
                                            textInputAction: TextInputAction.next,
                                            titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                                            title: Text(translate('dateOfAppointment')),
                                            suffixIcon: IconButton(
                                              onPressed: Type == "view"
                                                  ? null
                                                  : () async {
                                                      final DateTime? pickedDate = await showDatePicker(
                                                        context: context,
                                                        initialDate: current_appointmentDate,
                                                        firstDate: DateTime(1900),
                                                        // Set a very distant past date
                                                        lastDate: DateTime.now(),
                                                        // Set a very distant future date
                                                        initialDatePickerMode: DatePickerMode.day,
                                                      );
                                                      if (pickedDate != null && pickedDate != current_appointmentDate) {
                                                        setState(() {
                                                          current_appointmentDate = pickedDate;
                                                          String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                                          _Act11_1DateAppointmentController.text = formDate;
                                                        });
                                                      }
                                                    },
                                              icon: Icon(
                                                Icons.calendar_today,
                                              ),
                                            ),
                                            controller: _Act11_1DateAppointmentController,
                                            readOnly: true,
                                            onTap: Type == "view"
                                                ? null
                                                : () async {
                                                    final DateTime? pickedDate = await showDatePicker(
                                                      context: context,
                                                      initialDate: current_appointmentDate,
                                                      firstDate: DateTime(1900),
                                                      // Set a very distant past date
                                                      lastDate: DateTime.now(),
                                                      // Set a very distant future date
                                                      initialDatePickerMode: DatePickerMode.day,
                                                    );
                                                    if (pickedDate != null && pickedDate != current_appointmentDate) {
                                                      setState(() {
                                                        current_appointmentDate = pickedDate;
                                                        String formDate = DateFormat("dd-MM-yyyy").format(pickedDate);
                                                        _Act11_1DateAppointmentController.text = formDate;
                                                      });
                                                    }
                                                  },
                                            textInputType: TextInputType.text,
                                            validator: (text) {
                                              if (!(AppUtils.checkRequired(text))) {
                                                return translate('dataValidation');
                                              }
                                              return null;
                                            },
                                          ),
                                          const SizedBox(
                                            height: AppConstants.TEXT_FORM_FIELD_PADDING,
                                          ),
                                          Align(
                                            alignment: Alignment.centerRight,
                                            child: AppCustomButton(
                                              loaderColor: AppStyles.naturalWhiteColor,
                                              width: 100,
                                              height: 44,
                                              endIcon: Icon(Icons.delete),
                                              background: AppStyles.primary500Color,
                                              text: translate('delete'),
                                              textColor: AppStyles.white,
                                              fontWeight: FontWeight.normal,
                                              fontSize: 14,
                                              onClicked: Type == "view"
                                                  ? null
                                                  : () {
                                                      setState(() {
                                                        Act11_1Widgets.removeAt(Act11_1Widgets.length - 1);
                                                      });
                                                    },
                                            ),
                                          ),*/
                                          Form(
                                            key: _form11_1Key,
                                            child: ListView.builder(
                                              shrinkWrap: true,
                                              physics: NeverScrollableScrollPhysics(),
                                              itemCount: Act11_1Widgets.length,
                                              itemBuilder: (context, index) {
                                                // Dynamically added widgets
                                                return Act11_1Widgets[index];
                                              },
                                            ),
                                          ),
                                          const SizedBox(
                                            height: AppConstants.DEFAULT_CONTAINER_PADDING,
                                          ),
                                          Visibility(
                                              visible: Type == "view" ? false : true,
                                              child: Row(children: [
                                                Expanded(
                                                  child: AppCustomButton(
                                                    loaderColor: AppStyles.naturalWhiteColor,
                                                    width: 100,
                                                    height: 44,
                                                    background: AppStyles.primary500Color,
                                                    text: translate('addMoreDetails'),
                                                    textColor: AppStyles.white,
                                                    fontWeight: FontWeight.normal,
                                                    fontSize: 14,
                                                    onClicked: Type == "view"
                                                        ? null
                                                        : () {
                                                            FocusScope.of(context).unfocus();
                                                            int newIndex = Act11_1Widgets.length;
                                                            act11_1EmployeesActNo.add(0);
                                                            act11_1Ids.add(0);
                                                            act11_1RuleIds.add(0);
                                                            _Act11_1SrNoControllers.add(TextEditingController());
                                                            _Act11_1NameControllers.add(TextEditingController());
                                                            _Act11_1DesgControllers.add(TextEditingController());
                                                            current_appointmentDates.add(DateTime.now());
                                                            _Act11_1DateAppointmentControllers.add(TextEditingController());
                                                            Act11_1(
                                                              newIndex,
                                                              _Act11_1SrNoControllers[newIndex],
                                                              _Act11_1NameControllers[newIndex],
                                                              _Act11_1DesgControllers[newIndex],
                                                              current_appointmentDates[newIndex],
                                                              _Act11_1DateAppointmentControllers[newIndex],
                                                            );
                                                          },
                                                  ),
                                                ),
                                                // SizedBox(width: 10),
                                                // Expanded(
                                                //   child: AppCustomButton(
                                                //     loaderColor: AppStyles.naturalWhiteColor,
                                                //     width: 100,
                                                //     height: 44,
                                                //     background: AppStyles.primary500Color,
                                                //     text: translate('save'),
                                                //     textColor: AppStyles.white,
                                                //     fontWeight: FontWeight.normal,
                                                //     fontSize: 14,
                                                //     onClicked: Type == "view"
                                                //         ? null
                                                //         : () {
                                                //             FocusScope.of(context).unfocus();
                                                //             final _form = _form11_1Key.currentState!;
                                                //             if (_form.validate()) {
                                                //               convertXML11_1();
                                                //             }
                                                //           },
                                                //   ),
                                                // ),
                                              ]))
                                        ],
                                      ),
                                    )),
                              ],
                            )),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "11.2",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Align(
                                alignment: Alignment.topLeft,
                                child: Text(
                                  translate('act11_2'),
                                  style: AppStyles.textInputStyle,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs11_2 == false) {
                                      setState(() {
                                        isSwitchedActs11_2 = true;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs11_2 = false;
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs11_2,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      key: act11_3key,
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "11.3",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  RichText(
                                    text: TextSpan(
                                      style: AppStyles.textInputStyle,
                                      children: [
                                        TextSpan(
                                          text: translate('act11_3_1'),
                                        ),
                                        WidgetSpan(
                                          child: SizedBox(
                                            width: 80,
                                            child: TextFormField(
                                              readOnly: isreadOnlyR14_15_16S4,
                                              controller: _ActR14_15_16S4Controller,
                                              maxLines: null,
                                              keyboardType: TextInputType.text,
                                              validator: (text) {
                                                if (isSwitchedActs11_3 == true) {
                                                  if (!(AppUtils.checkRequired(text))) {
                                                    return translate('dataValidation');
                                                  }
                                                }
                                                return null;
                                              },
                                              decoration: InputDecoration(
                                                contentPadding: EdgeInsets.all(5.0),
                                              ),
                                              style: AppStyles.textInputStyle,
                                            ),
                                          ),
                                          alignment: PlaceholderAlignment.middle,
                                        ),
                                        TextSpan(
                                          text: translate('act11_3_2'),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs11_3 == false) {
                                      setState(() {
                                        isSwitchedActs11_3 = true;
                                        isreadOnlyR14_15_16S4 = false;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs11_3 = false;
                                        isreadOnlyR14_15_16S4 = true;
                                        _ActR14_15_16S4Controller.text = "";
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs11_3,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    Divider(
                      color: AppStyles.grey500Color,
                    ),
                    Column(
                      key: act11_4key,
                      children: [
                        Row(
                          children: [
                            Align(
                              alignment: Alignment.topCenter,
                              child: Text(
                                "11.4",
                                style: AppStyles.textInputStyle,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            Expanded(
                              flex: 2,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  RichText(
                                    text: TextSpan(
                                      style: AppStyles.textInputStyle,
                                      children: [
                                        TextSpan(
                                          text: translate('act11_4_1'),
                                        ),
                                        WidgetSpan(
                                          child: SizedBox(
                                            width: 80,
                                            child: TextFormField(
                                              readOnly: isreadONOnly143_144_145,
                                              controller: _ActR143_144_145Controller,
                                              maxLines: null,
                                              keyboardType: TextInputType.text,
                                              validator: (text) {
                                                if (isSwitchedActs11_4 == true) {
                                                  if (!(AppUtils.checkRequired(text))) {
                                                    return translate('dataValidation');
                                                  }
                                                }
                                                return null;
                                              },
                                              decoration: InputDecoration(
                                                contentPadding: EdgeInsets.all(5.0),
                                              ),
                                              style: AppStyles.textInputStyle,
                                            ),
                                          ),
                                          alignment: PlaceholderAlignment.middle,
                                        ),
                                        TextSpan(
                                          text: translate('act11_4_2'),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: Transform.scale(
                              scale: 1,
                              child: Switch(
                                onChanged: (bool) {
                                  if (Type == "view") {
                                  } else {
                                    if (isSwitchedActs11_4 == false) {
                                      setState(() {
                                        isSwitchedActs11_4 = true;
                                        isreadONOnly143_144_145 = false;
                                      });
                                    } else {
                                      setState(() {
                                        isSwitchedActs11_4 = false;
                                        isreadONOnly143_144_145 = true;
                                        _ActR143_144_145Controller.text = "";
                                      });
                                    }
                                  }
                                },
                                value: isSwitchedActs11_4,
                                activeColor: AppStyles.greenColor,
                                activeTrackColor: AppStyles.grey400Color,
                                inactiveThumbColor: AppStyles.white,
                                inactiveTrackColor: AppStyles.grey400Color,
                              )),
                        ),
                      ],
                    ),
                    AppTextField(
                      readOnly: Type == "view" ? true : false,
                      textInputAction: TextInputAction.next,
                      titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
                      title: Text(translate('remarks')),
                      controller: _Act11RemarksController,
                      textInputType: TextInputType.text,
                    ),
                    const SizedBox(
                      height: AppConstants.PADDING_8,
                    ),
                    Container(
                      decoration: ShapeDecoration(
                        color: AppStyles.NotesColor,
                        shape: RoundedRectangleBorder(
                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                        ),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                            "Note: Any person / employer shall be punishable with fine upto Rs. One thousand for the above mentioned contravention under the Section-9 of the Sales Promotion Employees (Conditions of Service) Act"),
                      ),
                    ),
                  ]))
            ]),
          ),
        ),
      ],
    );
  }

  Widget _buildMapView() {
    if (IsOffline)
      return (isMapLoadedSuccessfully && _mapImageBytes != null) ? _buildMapFromBytes() : _buildMapBodyForOffline();
    else
      return FutureBuilder<bool>(
        future: checkConnectivity(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Padding(
              padding: const EdgeInsets.all(20.0),
              child: CircularProgressIndicator(),
            );
          } else {
            bool isConnected = snapshot.data ?? false;
            if (isConnected) {
              if (Type == "view") {
                return mapImageCIDBase64 != null ? _buildMapFromBase64() : SizedBox();
              } else {
                return (isMapLoadedSuccessfully && _mapImageBytes != null) ? _buildMapFromBytes() : _buildMapBody();
              }
            } else {
              getCurrentLatLong();
              return Container();
            }
          }
        },
      );
  }

  Widget _buildMapFromBytes() {
    return Container(width: double.infinity, height: 300, padding: const EdgeInsets.symmetric(vertical: 10), child: Image.memory(_mapImageBytes!));
  }

  Widget _buildMapFromBase64() {
    return Container(
      width: double.infinity,
      height: 300,
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: Image.memory(base64Decode(mapImageCIDBase64!)),
    );
  }

  void getCurrentLatLong() async {
    await Permission.location.request();

    final Position position = await Geolocator.getCurrentPosition(
      desiredAccuracy: LocationAccuracy.best,
    );
    latitude = position.latitude;
    longitude = position.longitude;
  }

  Widget _buildMapBodyForOffline() {
    // print('---mapLoaded');
    // print('---Latitude: $latitude');
    // print('---Longitude: $longitude');
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 6),
      child: SizedBox(
        width: double.infinity,
        height: 300,
        child: MapWidget(
          currentLatLng: LatLng(latitude!, longitude!),
          onMapEvent: (Uint8List mapBytes) async {
            _mapImageBytes = mapBytes;
            File convertedFile = await uint8ListToFile(mapBytes);
            uploadDocument(convertedFile, "MapImage");
          },
        ),
      ),
    );
  }

  Widget _buildMapBody() {
    // print('---mapLoaded');
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 6),
      child: SizedBox(
        width: double.infinity,
        height: 300,
        child: MapView(
          onMapEvent: (Uint8List mapBytes) async {
            _mapImageBytes = mapBytes;
            File convertedFile = await uint8ListToFile(mapBytes);

            uploadDocument(convertedFile, "MapImage");
          },
        ),
      ),
    );
  }

  Widget _buildOtherInfo() {
    return Column(
      children: [
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        StatefulBuilder(builder: (context, setState) {
          return Column(
            key: establishmentImageGlobalKey,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Align(
                alignment: Alignment.centerLeft,
                child: RichText(
                  text: TextSpan(
                    children: [
                      TextSpan(
                        text: translate('estImage'),
                        style: TextStyle(
                          color: Colors.black, // Customize the title text color
                          fontSize: 16, // Customize the title text size
                        ),
                      ),
                      TextSpan(
                        text: ' *', // Suffix text
                        style: TextStyle(
                          color: Colors.red, // Customize the suffix text color
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(
                height: AppConstants.PADDING_8,
              ),
              Container(
                decoration: ShapeDecoration(
                  shape: RoundedRectangleBorder(
                    side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                    borderRadius: BorderRadius.all(Radius.circular(12.0)),
                  ),
                ),
                child: Padding(
                  padding: EdgeInsets.all(AppConstants.PADDING_8),
                  child: Row(
                    children: [
                      Expanded(
                        flex: 1,
                        child: Align(
                          alignment: Alignment.centerLeft,
                          child: AppCustomButton(
                            loaderColor: AppStyles.naturalWhiteColor,
                            width: 110,
                            background: AppStyles.greyButtonColor,
                            text: translate('chooseFile'),
                            textColor: AppStyles.black,
                            fontWeight: FontWeight.normal,
                            fontSize: 12,
                            onClicked: () {
                              Type == "view"
                                  ? null
                                  : showModalBottomSheet<void>(
                                      context: context,
                                      builder: (BuildContext context) {
                                        return Container(
                                          child: Wrap(
                                            children: <Widget>[
                                              ListTile(
                                                leading: Icon(Icons.camera),
                                                title: Text('Open Camera'),
                                                onTap: () {
                                                  _openCamera("EstImage");
                                                  Navigator.of(context).pop();
                                                },
                                              ),
                                              ListTile(
                                                leading: Icon(Icons.photo),
                                                title: Text('Open Gallery'),
                                                onTap: () {
                                                  getImages("EstImage");
                                                  Navigator.of(context).pop();
                                                },
                                              ),
                                              // ListTile(
                                              //   leading: Icon(Icons.folder),
                                              //   title: Text('Open Document Picker'),
                                              //   onTap: () {
                                              //     _openDocumentPicker("EstImage");
                                              //     Navigator.of(context).pop();
                                              //   },
                                              // ),
                                            ],
                                          ),
                                        );
                                      },
                                    );
                            },
                          ),
                        ),
                      ),
                      // Expanded(
                      //   flex: 1,
                      //   child: Text(
                      //     selectedImageNames.join(', '),
                      //     style: AppStyles.textInputStyle,
                      //   ),
                      // ),
                    ],
                  ),
                ),
              ),
              Visibility(
                visible: !validateStep7() && isSubmitButtonClicked,
                child: Padding(
                  padding: const EdgeInsets.all(5.0),
                  child: Text(
                    translate('fileValidation'),
                    style: TextStyle(color: Colors.red, fontSize: 12),
                    textAlign: TextAlign.left,
                  ),
                ),
              ),
              const SizedBox(
                height: AppConstants.TEXT_FORM_FIELD_PADDING,
              ),
              // if (ImagesList.isNotEmpty)
              //   ListView.builder(
              //       shrinkWrap: true,
              //       physics: NeverScrollableScrollPhysics(),
              //       itemCount: ImagesList.length,
              //       itemBuilder: (BuildContext context, int index) {
              //         // return ListTile(
              //         //   trailing: IconButton(
              //         // icon: Icon(
              //         //   Icons.delete,
              //         //   color: AppStyles.primary500Color,
              //         // ),
              //         //     onPressed: () {
              //         // setState(() {
              //         //   ImagesList.removeAt(index);
              //         // });
              //         //     },
              //         //   ),
              //         //   title: Text(
              //         //     ImagesList[index].DocumentPath ?? '',
              //         //     style: TextStyle(color: Colors.black, fontSize: 15),
              //         //   ),
              //         // );
              //         return Padding(
              //           padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 4.0),
              //           child: Row(
              //             children: [
              //               Text(
              //                 ImagesList[index].DocumentPath ?? '',
              //                 style: TextStyle(color: Colors.black, fontSize: 15),
              //               ),
              //               Spacer(),
              //               IconButton(
              //                   padding: EdgeInsets.zero,
              //                   constraints: BoxConstraints(),
              //                   onPressed: () {
              //                     downloadFile(
              //                         ImagesList[index].DocumentPath ?? '', ImagesList[index].DocumentPathCID ?? '');
              //                   },
              //                   icon: Icon(
              //                     Icons.download,
              //                     color: AppStyles.primary500Color,
              //                   )),
              //               SizedBox(width: 8),
              //               IconButton(
              //                   padding: EdgeInsets.zero,
              //                   constraints: BoxConstraints(),
              //                   onPressed: () {
              //                     setState(() {
              //                       ImagesList.removeAt(index);
              //                     });
              //                   },
              //                   icon: Icon(
              //                     Icons.delete,
              //                     color: AppStyles.primary500Color,
              //                   )),
              //             ],
              //           ),
              //         );
              //       }),
            ],
          );
        }),
        if (inspectionOneSiteModel_EstImage.isNotEmpty)
          ListView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              itemCount: inspectionOneSiteModel_EstImage.length,
              itemBuilder: (BuildContext context, int index) {
                return Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 4.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      Flexible(
                        flex: 8,
                        child: Text(
                          inspectionOneSiteModel_EstImage[index].DocumentPath ?? '',
                          style: TextStyle(color: Colors.black, fontSize: 15),
                        ),
                      ),
                      Spacer(),
                      IconButton(
                          padding: EdgeInsets.zero,
                          constraints: BoxConstraints(),
                          onPressed: () {
                            downloadFile(inspectionOneSiteModel_EstImage[index].DocumentPath ?? '', inspectionOneSiteModel_EstImage[index].DocumentPathCID ?? '');
                          },
                          icon: Icon(
                            Icons.download,
                            color: AppStyles.primary500Color,
                          )),
                      SizedBox(width: 8),
                      IconButton(
                          padding: EdgeInsets.zero,
                          constraints: BoxConstraints(),
                          onPressed: Type == "view"
                              ? null
                              : () {
                                  setState(() {
                                    //deleteInspectionOneSite(index);
                                    authKey();
                                    deleteImageList(inspectionId, inspectionOneSiteModel_EstImage[index].DID ?? 0);
                                    inspectionOneSiteModel_EstImage.removeAt(index);
                                  });
                                },
                          icon: Icon(
                            Icons.delete,
                            color: AppStyles.primary500Color,
                          )),
                    ],
                  ),
                );
              }),
        if (filePathEstImageList.isNotEmpty && !isAppOnline)
          ListView.builder(
            shrinkWrap: true,
            physics: NeverScrollableScrollPhysics(),
            itemCount: filePathEstImageList.length,
            itemBuilder: (context, index) {
              return Padding(
                padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 4.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Flexible(
                      flex: 8,
                      child: Text(
                        filePathEstImageList[index].split('/').last,
                        style: TextStyle(color: Colors.black, fontSize: 15),
                      ),
                    ),
                    Spacer(),
                    IconButton(
                        padding: EdgeInsets.zero,
                        constraints: BoxConstraints(),
                        onPressed: () {
                          setState(() {
                            filePathEstImageList.removeAt(index);
                          });
                        },
                        icon: Icon(
                          Icons.delete,
                          color: AppStyles.primary500Color,
                        )),
                  ],
                ),
              );
            },
          ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        StatefulBuilder(builder: (context, setState) {
          return Column(
            children: [
              Align(
                alignment: Alignment.centerLeft,
                child: RichText(
                  text: TextSpan(
                    children: [
                      TextSpan(
                        text: translate('estDocument'),
                        style: TextStyle(
                          color: Colors.black, // Customize the title text color
                          fontSize: 16, // Customize the title text size
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(
                height: AppConstants.PADDING_8,
              ),
              Container(
                decoration: ShapeDecoration(
                  shape: RoundedRectangleBorder(
                    side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                    borderRadius: BorderRadius.all(Radius.circular(12.0)),
                  ),
                ),
                child: Padding(
                  padding: EdgeInsets.all(AppConstants.PADDING_8),
                  child: Row(
                    children: [
                      Expanded(
                        flex: 1,
                        child: Align(
                          alignment: Alignment.centerLeft,
                          child: AppCustomButton(
                            loaderColor: AppStyles.naturalWhiteColor,
                            width: 120,
                            background: AppStyles.greyButtonColor,
                            text: translate('chooseFile'),
                            textColor: AppStyles.black,
                            fontWeight: FontWeight.normal,
                            fontSize: 14,
                            onClicked: () {
                              Type == "view"
                                  ? null
                                  : showModalBottomSheet<void>(
                                      context: context,
                                      builder: (BuildContext context) {
                                        return Container(
                                          child: Wrap(
                                            children: <Widget>[
                                              ListTile(
                                                leading: Icon(Icons.camera),
                                                title: Text('Open Camera'),
                                                onTap: () {
                                                  _openCamera("EstDocument");
                                                  Navigator.of(context).pop();
                                                },
                                              ),
                                              ListTile(
                                                leading: Icon(Icons.photo),
                                                title: Text('Open Gallery'),
                                                onTap: () {
                                                  getImages("EstDocument");
                                                  Navigator.of(context).pop();
                                                },
                                              ),
                                              ListTile(
                                                leading: Icon(Icons.folder),
                                                title: Text('Open Document Picker'),
                                                onTap: () {
                                                  //_openDocumentPicker("EstDocument");
                                                  getMultipleFile("EstDocument");
                                                  Navigator.of(context).pop();
                                                },
                                              ),
                                            ],
                                          ),
                                        );
                                      },
                                    );
                            },
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(
                height: AppConstants.TEXT_FORM_FIELD_PADDING,
              ),
              if (filePathEstDocList.isNotEmpty && !isAppOnline)
                ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: filePathEstDocList.length,
                  itemBuilder: (context, index) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 4.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          Flexible(
                            flex: 8,
                            child: Text(
                              filePathEstDocList[index].split('/').last,
                              style: TextStyle(color: Colors.black, fontSize: 15),
                            ),
                          ),
                          Spacer(),
                          IconButton(
                              padding: EdgeInsets.zero,
                              constraints: BoxConstraints(),
                              onPressed: () {
                                setState(() {
                                  filePathEstDocList.removeAt(index);
                                });
                              },
                              icon: Icon(
                                Icons.delete,
                                color: AppStyles.primary500Color,
                              )),
                        ],
                      ),
                    );
                  },
                ),
              if (inspectionOneSiteModel_EstDoc.isNotEmpty)
                ListView.builder(
                    shrinkWrap: true,
                    physics: NeverScrollableScrollPhysics(),
                    itemCount: inspectionOneSiteModel_EstDoc.length,
                    itemBuilder: (BuildContext context, int index) {
                      return Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 4.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            Flexible(
                              flex: 8,
                              child: Text(
                                inspectionOneSiteModel_EstDoc[index].DocumentPath ?? '',
                                style: TextStyle(color: Colors.black, fontSize: 15),
                              ),
                            ),
                            Spacer(),
                            IconButton(
                                padding: EdgeInsets.zero,
                                constraints: BoxConstraints(),
                                onPressed: () {
                                  downloadFile(inspectionOneSiteModel_EstDoc[index].DocumentPath ?? '', inspectionOneSiteModel_EstDoc[index].DocumentPathCID ?? '');
                                },
                                icon: Icon(
                                  Icons.download,
                                  color: AppStyles.primary500Color,
                                )),
                            SizedBox(width: 8),
                            IconButton(
                                padding: EdgeInsets.zero,
                                constraints: BoxConstraints(),
                                onPressed: Type == "view"
                                    ? null
                                    : () {
                                        setState(() {
                                          //deleteInspectionOneSite(index);
                                          authKey();
                                          deleteImageList(inspectionId, inspectionOneSiteModel_EstDoc[index].DID ?? 0);
                                          inspectionOneSiteModel_EstDoc.removeAt(index);
                                        });
                                      },
                                icon: Icon(
                                  Icons.delete,
                                  color: AppStyles.primary500Color,
                                )),
                          ],
                        ),
                      );
                    }),
            ],
          );
        }),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('authSign'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        DropdownButtonFormField(
          hint: new Text(translate('select')),
          value: selectedAuthSign,
          onChanged: Type == "view"
              ? null
              : (dynamic newValue) {
                  setState(() {
                    selectedAuthSign = newValue!;
                    if (selectedAuthSign == 0) {
                      isAuthSign = false;
                    } else if (selectedAuthSign == 1) {
                      isAuthSign = true;
                    }
                  });
                },
          validator: (value) {
            if (value == null) {
              return 'authSign';
            } else {
              return null;
            }
          },
          isExpanded: true,
          decoration: InputDecoration(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: Colors.grey), // Customize the border color
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
            ),
          ),
          items: AllYesNoList.map(
            (map) {
              return DropdownMenuItem<int?>(
                value: map.DataValue,
                child: Text(
                  map.DisplayValue ?? "",
                ),
              );
            },
          ).toList(),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Visibility(
            visible: isAuthSign,
            child: Column(
              key: authPersonSignKey,
              children: [
                Align(
                  alignment: Alignment.centerLeft,
                  child: RichText(
                    text: TextSpan(
                      children: [
                        TextSpan(
                          text: translate('authSign'),
                          style: TextStyle(
                            color: Colors.black,
                            // Customize the title text color
                            fontSize: 16, // Customize the title text size
                          ),
                        ),
                        TextSpan(
                          text: ' *', // Suffix text
                          style: TextStyle(
                            color: Colors.red, // Customize the suffix text color
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                Visibility(
                  visible: Type == "view" || _signatureImageBytes != null ? false : true,
                  child: Column(children: [
                    Container(
                      decoration: ShapeDecoration(
                        shape: RoundedRectangleBorder(
                          side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                        ),
                      ),
                      child: SfSignaturePad(
                        key: _signaturePadKey,
                      ),
                      // child: GestureDetector(
                      //    onTap: Type == "edit"
                      //        ? () {
                      //      SfSignaturePad(
                      //        key: _signaturePadKey,
                      //        // Other properties for SfSignaturePad
                      //        onDrawEnd: () async {
                      //          final signatureImage = await _signaturePadKey.currentState?.toImage();
                      //          final byteData = await signatureImage?.toByteData(format: ImageByteFormat.png);
                      //
                      //          if (byteData != null) {
                      //            setState(() {
                      //              _signatureImageBytes = byteData.buffer.asUint8List();
                      //            });
                      //            // Your logic for handling the signature image goes here
                      //          }
                      //        },
                      //      );
                      //    } : null, // Set onTap to null to disable interaction when not editable
                      //
                      // ),
                      height: 200,
                      width: 300,
                    ),
                    Visibility(
                      visible: !validateAuthPersonSignature() && isSubmitButtonClicked && !isAuthSign,
                      child: Padding(
                        padding: const EdgeInsets.all(5.0),
                        child: Text(
                          translate('signatureValidation'),
                          style: TextStyle(color: Colors.red, fontSize: 12),
                          textAlign: TextAlign.left,
                        ),
                      ),
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Align(
                          alignment: Alignment.centerRight,
                          child: ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppStyles.primary500Color, // Background color
                            ),
                            onPressed: () async {
                              final signatureImage = await _signaturePadKey.currentState?.toImage();
                              final byteData = await signatureImage?.toByteData(format: ImageByteFormat.png);

                              if (byteData != null) {
                                setState(() {
                                  authorizedSignBase64 = null;
                                  _signatureImageBytes = byteData.buffer.asUint8List();
                                });

                                File convertedFile = await uint8ListToFile(_signatureImageBytes);
                                fileAuthorizedSign = convertedFile;

                                if (isAppOnline) {
                                  uploadDocument(convertedFile, "authSign");
                                }
                                setState(() {});
                              }
                            },
                            child: Text('Save Signature'),
                          ),
                        ),
                        const SizedBox(
                          width: AppConstants.DEFAULT_CONTAINER_PADDING,
                        ),
                        Align(
                          alignment: Alignment.centerRight,
                          child: ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppStyles.primary500Color, // Background color
                            ),
                            onPressed: () {
                              _signaturePadKey.currentState?.clear(); // Clear the signature
                              setState(() {
                                _signatureImageBytes = null;
                                authorizedSignBase64 = null;
                                AuthorizedSignPath = '';
                                AuthorizedSignCID = '';
                              });
                            },
                            child: Text('Clear Signature'),
                          ),
                        ),
                      ],
                    ),
                  ]),
                ),
                SizedBox(height: 20),
                if (authorizedSignBase64 != null)
                  Container(
                    width: 300,
                    height: 100,
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.black),
                    ),
                    child: Image.memory(base64Decode(authorizedSignBase64!)),
                  ),
                if (_signatureImageBytes != null)
                  Container(
                    width: 300,
                    height: 100,
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.black),
                    ),
                    child: Image.memory(_signatureImageBytes!),
                  ),
              ],
            )),
        _signatureImageBytes == null
            ? Container()
            : Align(
                alignment: Alignment.centerRight,
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppStyles.primary500Color, // Background color
                  ),
                  onPressed: () {
                    _signaturePadKey.currentState?.clear(); // Clear the signature
                    setState(() {
                      _signatureImageBytes = null;
                      authorizedSignBase64 = null;
                      AuthorizedSignPath = '';
                      AuthorizedSignCID = '';
                    });
                  },
                  child: Text('Edit Signature'),
                ),
              ),
        const SizedBox(
          height: AppConstants.DEFAULT_CONTAINER_PADDING,
        ),
        Visibility(
          visible: !isAuthSign,
          child: EnsureVisibleWhenFocused(
            focusNode: _textFormFieldFocusNode21,
            child: AppTextField(
              readOnly: Type == "view" ? true : false,
              focusNode: _textFormFieldFocusNode21,
              textInputAction: TextInputAction.next,
              titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
              title: RichText(
                text: TextSpan(
                  children: [
                    TextSpan(
                      text: translate('remarks'),
                      style: TextStyle(
                        color: Colors.black, // Customize the title text color
                        fontSize: 16, // Customize the title text size
                      ),
                    ),
                    TextSpan(
                      text: ' *', // Suffix text
                      style: TextStyle(
                        color: Colors.red, // Customize the suffix text color
                      ),
                    ),
                  ],
                ),
              ),
              textInputType: TextInputType.text,
              controller: _otherRemarksController,
              validator: (text) {
                if (!(AppUtils.checkRequired(text))) {
                  return translate('noteValidation');
                }
                return null;
              },
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('non-compliance'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        DropdownButtonFormField(
          hint: new Text(translate('select')),
          value: selectedNonCompliance,
          onChanged: Type == "view"
              ? null
              : (dynamic newValue) {
                  setState(() {
                    selectedNonCompliance = newValue!;
                    if (selectedNonCompliance == 0) {
                      isNonCompliance = false;
                    } else if (selectedNonCompliance == 1) {
                      isNonCompliance = true;
                    }
                  });
                },
          validator: (value) {
            if (value == null) {
              return 'non-compliance';
            } else {
              return null;
            }
          },
          isExpanded: true,
          decoration: InputDecoration(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: Colors.grey), // Customize the border color
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
            ),
          ),
          items: AllYesNoList.map(
            (map) {
              return DropdownMenuItem<int?>(
                value: map.DataValue,
                child: Text(
                  map.DisplayValue ?? "",
                ),
              );
            },
          ).toList(),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('inspectorName'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.text,
          controller: _inspectorName,
          readOnly: true,
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        AppTextField(
          textInputAction: TextInputAction.next,
          titleTextStyle: AppStyles.normalTextStyle.copyWith(fontSize: 16),
          title: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('inspectorEmail'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
          textInputType: TextInputType.text,
          controller: _inspectorEmail,
          readOnly: true,
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Column(
          key: inspectorSignKey,
          children: [
            Align(
              alignment: Alignment.centerLeft,
              child: RichText(
                text: TextSpan(
                  children: [
                    TextSpan(
                      text: translate('inspectorSign'),
                      style: TextStyle(
                        color: Colors.black, // Customize the title text color
                        fontSize: 16, // Customize the title text size
                      ),
                    ),
                    TextSpan(
                      text: ' *', // Suffix text
                      style: TextStyle(
                        color: Colors.red, // Customize the suffix text color
                      ),
                    ),
                  ],
                ),
              ),
            ),
            Visibility(
                visible: Type == "view" || _signatureInspectionBytes != null ? false : true,
                child: Column(children: [
                  Container(
                    decoration: ShapeDecoration(
                      shape: RoundedRectangleBorder(
                        side: BorderSide(color: AppStyles.greyIconColor, width: 1.0, style: BorderStyle.solid),
                        borderRadius: BorderRadius.all(Radius.circular(12.0)),
                      ),
                    ),
                    child: SfSignaturePad(
                      key: _signaturePadInspectionKey,
                    ),
                    height: 200,
                    width: 300,
                  ),
                  Visibility(
                    visible: !validateInspectorSignature() && isSubmitButtonClicked,
                    child: Padding(
                      padding: const EdgeInsets.all(5.0),
                      child: Text(
                        translate('signatureValidation'),
                        style: TextStyle(color: Colors.red, fontSize: 12),
                        textAlign: TextAlign.left,
                      ),
                    ),
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Align(
                        alignment: Alignment.centerRight,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppStyles.primary500Color, // Background color
                          ),
                          onPressed: () async {
                            final signatureImage = await _signaturePadInspectionKey.currentState?.toImage();
                            final byteData = await signatureImage?.toByteData(format: ImageByteFormat.png);

                            if (byteData != null) {
                              setState(() {
                                inspectorSignBase64 = null;
                                _signatureInspectionBytes = byteData.buffer.asUint8List();
                              });

                              File convertedFile = await uint8ListToFile(_signatureInspectionBytes);
                              fileInspectorSign = convertedFile;
                              if (isAppOnline) {
                                uploadDocument(convertedFile, "inspectorSign");
                              }

                              setState(() {});
                            }
                          },
                          child: Text('Save Signature'),
                        ),
                      ),
                      const SizedBox(
                        width: AppConstants.DEFAULT_CONTAINER_PADDING,
                      ),
                      Align(
                        alignment: Alignment.centerRight,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppStyles.primary500Color, // Background color
                          ),
                          onPressed: () {
                            _signaturePadInspectionKey.currentState?.clear(); // Clear the signature
                            setState(() {
                              _signatureInspectionBytes = null;
                              inspectorSignBase64 = null;
                              InspectorSignPath = '';
                              InspectionSignCID = '';
                            });
                          },
                          child: Text('Clear Signature'),
                        ),
                      ),
                    ],
                  ),
                ])),
            SizedBox(height: 20),
            if (inspectorSignBase64 != null)
              Container(
                width: 300,
                height: 100,
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.black),
                ),
                child: Image.memory(base64Decode(inspectorSignBase64!)),
              ),
            if (_signatureInspectionBytes != null)
              Container(
                width: 300,
                height: 100,
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.black),
                ),
                child: Image.memory(_signatureInspectionBytes!),
              ),
          ],
        ),
        _signatureInspectionBytes == null
            ? Container()
            : Align(
                alignment: Alignment.centerRight,
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppStyles.primary500Color, // Background color
                  ),
                  onPressed: () {
                    _signaturePadInspectionKey.currentState?.clear(); // Clear the signature
                    setState(() {
                      _signatureInspectionBytes = null;
                      inspectorSignBase64 = null;
                      InspectorSignPath = '';
                      InspectionSignCID = '';
                    });
                  },
                  child: Text('Edit Signature'),
                ),
              ),
        const SizedBox(
          height: AppConstants.DEFAULT_CONTAINER_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('stipulatedTimeLimit'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        DropdownButtonFormField(
          hint: new Text(translate('select')),
          value: selectedTimeLimit,
          onChanged: Type == "view"
              ? null
              : (dynamic newValue) {
                  setState(() {
                    selectedTimeLimit = newValue!;
                    print("Kiran--- $selectedTimeLimit");
                  });
                },
          validator: (value) {
            if (value == null) {
              return 'Stiplated Time Limit';
            } else {
              return null;
            }
          },
          isExpanded: true,
          decoration: InputDecoration(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: Colors.grey), // Customize the border color
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
            ),
          ),
          items: OtherStiplatedTimeLimitList.map(
            (map) {
              return DropdownMenuItem<int?>(
                value: map.DataValue,
                child: Text(
                  map.DisplayValue ?? "",
                ),
              );
            },
          ).toList(),
        ),
        const SizedBox(
          height: AppConstants.TEXT_FORM_FIELD_PADDING,
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: RichText(
            text: TextSpan(
              children: [
                TextSpan(
                  text: translate('reportingAuth'),
                  style: TextStyle(
                    color: Colors.black, // Customize the title text color
                    fontSize: 16, // Customize the title text size
                  ),
                ),
                TextSpan(
                  text: ' *', // Suffix text
                  style: TextStyle(
                    color: Colors.red, // Customize the suffix text color
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: AppConstants.PADDING_8,
        ),
        DropdownButtonFormField(
          selectedItemBuilder: (context) => ReportAuthorityList.map<Widget>((e) {
            return Row(
              children: [
                Text(
                  e.DisplayaclValue ?? "",
                ),
              ],
            );
          }).toList(),
          hint: new Text(translate('select')),
          value: selectedReportingAuth,
          onChanged: Type == "view"
              ? null
              : (dynamic newValue) {
                  setState(() {
                    selectedReportingAuth = newValue!;
                  });
                },
          validator: (value) {
            if (value == null) {
              return 'Please Enter Select Reporting Authority';
            } else {
              return null;
            }
          },
          isExpanded: true,
          decoration: InputDecoration(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: Colors.grey), // Customize the border color
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide(color: AppStyles.primary500Color), // Customize the focused border color
            ),
          ),
          items: ReportAuthorityList.map(
            (map) {
              return DropdownMenuItem<dynamic>(
                  value: map.DataValue,
                  child: Row(
                    children: [
                      Text(
                        map.DisplayValue ?? "",
                      ),
                      VerticalDivider(
                        color: Colors.black,
                        thickness: 2,
                      ),
                      Text(
                        map.DisplayaclValue ?? "",
                      ),
                    ],
                  ));
            },
          ).toList(),
        ),
      ],
    );
  }

  Future<void> insertLocalDb() async {
    Map<String, dynamic> row = {
      DatabaseHelper.ReportNo: _reportNoController.text.toString(),
      DatabaseHelper.InspectionDate: _inspectionDateController.text.toString(),
      DatabaseHelper.District: selectedReportDistrict,
      DatabaseHelper.Taluka: selectedReportTaluka,
      DatabaseHelper.PinCode: _pinCodeController.text.isEmpty ? 0 : _pinCodeController.text,
      DatabaseHelper.Area: _areaController.text,
      DatabaseHelper.InspectionType: dropdownValue,
      DatabaseHelper.IFSCNo: _IFSCNoBaseController.text,
      DatabaseHelper.NameComplainant: _nameOfComplain.text,
      DatabaseHelper.SubjectOfComplain: _subjectOfComplain.text,
      DatabaseHelper.DateOfComplain: _dateOfComplain.text,
      DatabaseHelper.EstType: selectedEstablishment,
      DatabaseHelper.EstName: _establishmentNameController.text,
      DatabaseHelper.EstPermanentAdd: _permanentAddressController.text,
      DatabaseHelper.EstDistrict: selectedDistrict,
      DatabaseHelper.EstTaluka: selectedTaluka,
      DatabaseHelper.EstArea: _est_area_Controller.text,
      DatabaseHelper.EstPinCode: _est_pincode_Controller.text.isEmpty ? 0 : _est_pincode_Controller.text,
      DatabaseHelper.IsFactoriesAct: IsFactoriesAct,
      DatabaseHelper.IsTrustAct: IsTrustAct,
      DatabaseHelper.IsEstablishmentAct: IsEstablishmentAct,
      DatabaseHelper.IsLabourAct: IsLabourAct,
      DatabaseHelper.IsSocietyAct: IsSocietyAct,
      DatabaseHelper.IsTMTWAct1961Grul1965: IsTMTWAct1961Grul1965,
      DatabaseHelper.IsRegistrationUnderGST: IsRegistrationUnderGST,
      DatabaseHelper.IsRegisteredUnder: registerUnder == 0 ? false : true,
      DatabaseHelper.EstRegUnderNoneOfAbove: _regUnderNoneOfAboveController.text,
      DatabaseHelper.EstRegNo: _regNo_Controller.text,
      DatabaseHelper.fileLicensePath: fileLicenseProof?.path,
      DatabaseHelper.fileRegPath: fileRegProof?.path,
      DatabaseHelper.LicenseDocName: LicenseFileName,
      DatabaseHelper.LicenseCID: LicenseFileCID,
      DatabaseHelper.RegDocName: RegFileName,
      DatabaseHelper.RegCID: RegFileCID,
      DatabaseHelper.EstRegDate: _registrationDateController.text.toString(),
      DatabaseHelper.EstTypeofIndustry: selectedIndustory,
      DatabaseHelper.EstMaleWorker: _maleWorkerController.text,
      DatabaseHelper.EstFeMaleWorker: _femaleWorkerController.text,
      DatabaseHelper.EstTransGenderWorker: _transgenderWorkerController.text,
      DatabaseHelper.EstTotalWorker: _totalWorkerController.text,
      DatabaseHelper.EstAuthorizedPerson: _authorizedPersonController.text,
      DatabaseHelper.EstAuthorizedPersonEmail: emails.join(","),
      DatabaseHelper.EstAuthorizedPersonNo: _authorizedPersonNoController.text,
      DatabaseHelper.EstAuthorizedPersonDesign: _authorizedPersonDesignController.text,
      DatabaseHelper.isSwitchedActs1: isSwitchedActs1,
      DatabaseHelper.isSwitchedActs1_1: isSwitchedActs1_1,
      DatabaseHelper.isSwitchedActs1_2: isSwitchedActs1_2,
      DatabaseHelper.isSwitchedActs1_3: isSwitchedActs1_3,
      DatabaseHelper.isSwitchedActs1_4: isSwitchedActs1_4,
      DatabaseHelper.isSwitchedActs1_5: isSwitchedActs1_5,
      DatabaseHelper.isSwitchedActs1_6: isSwitchedActs1_6,
      DatabaseHelper.isSwitchedActs1_7: isSwitchedActs1_7,
      DatabaseHelper.isSwitchedActs1_8: isSwitchedActs1_8,
      DatabaseHelper.isSwitchedActs1_9: isSwitchedActs1_9,
      DatabaseHelper.isSwitchedActs1_10: isSwitchedActs1_10,
      DatabaseHelper.isSwitchedActs1_11: isSwitchedActs1_11,
      DatabaseHelper.isSwitchedActs1_12: isSwitchedActs1_12,
      DatabaseHelper.isSwitchedActs1_13: isSwitchedActs1_13,
      DatabaseHelper.isSwitchedActs1_14: isSwitchedActs1_14,
      DatabaseHelper.isSwitchedActs1_15: isSwitchedActs1_15,
      DatabaseHelper.isSwitchedActs1_16: isSwitchedActs1_16,
      DatabaseHelper.isSwitchedActs1_17: isSwitchedActs1_17,
      DatabaseHelper.isSwitchedActs1_18: isSwitchedActs1_18,
      DatabaseHelper.isSwitchedActs1_19: isSwitchedActs1_19,
      DatabaseHelper.isSwitchedActs2: isSwitchedActs2,
      DatabaseHelper.isSwitchedActs2_1: isSwitchedActs2_1,
      DatabaseHelper.isSwitchedActs2_2: isSwitchedActs2_2,
      DatabaseHelper.isSwitchedActs2_3: isSwitchedActs2_3,
      DatabaseHelper.isSwitchedActs2_4: isSwitchedActs2_4,
      DatabaseHelper.isSwitchedActs2_5: isSwitchedActs2_5,
      DatabaseHelper.isSwitchedActs2_6: isSwitchedActs2_6,
      DatabaseHelper.isSwitchedActs3: isSwitchedActs3,
      DatabaseHelper.isSwitchedActs3_1: isSwitchedActs3_1,
      DatabaseHelper.isSwitchedActs3_2: isSwitchedActs3_2,
      DatabaseHelper.isSwitchedActs3_3: isSwitchedActs3_3,
      DatabaseHelper.isSwitchedActs3_4: isSwitchedActs3_4,
      DatabaseHelper.isSwitchedActs4: isSwitchedActs4,
      DatabaseHelper.isSwitchedActs4_1_1: isSwitchedActs4_1_1,
      DatabaseHelper.isSwitchedActs4_1_2: isSwitchedActs4_1_2,
      DatabaseHelper.isSwitchedActs4_1_3: isSwitchedActs4_1_3,
      DatabaseHelper.isSwitchedActs4_1_4: isSwitchedActs4_1_4,
      DatabaseHelper.isSwitchedActs4_1_5: isSwitchedActs4_1_5,
      DatabaseHelper.isSwitchedActs4_1_6: isSwitchedActs4_1_6,
      DatabaseHelper.isSwitchedActs4_1_7: isSwitchedActs4_1_7,
      DatabaseHelper.isSwitchedActs4_1_8: isSwitchedActs4_1_8,
      DatabaseHelper.isSwitchedActs4_1_9: isSwitchedActs4_1_9,
      DatabaseHelper.isSwitchedActs4_1_10: isSwitchedActs4_1_10,
      DatabaseHelper.isSwitchedActs4_1_11: isSwitchedActs4_1_11,
      DatabaseHelper.isSwitchedActs4_1_12: isSwitchedActs4_1_12,
      DatabaseHelper.isSwitchedActs4_2_1: isSwitchedActs4_2_1,
      DatabaseHelper.isSwitchedActs4_2_2: isSwitchedActs4_2_2,
      DatabaseHelper.isSwitchedActs4_2_3: isSwitchedActs4_2_3,
      DatabaseHelper.isSwitchedActs4_2_4: isSwitchedActs4_2_4,
      DatabaseHelper.isSwitchedActs4_2_5: isSwitchedActs4_2_5,
      DatabaseHelper.isSwitchedActs4_2_6: isSwitchedActs4_2_6,
      DatabaseHelper.isSwitchedActs4_2_7: isSwitchedActs4_2_7,
      DatabaseHelper.isSwitchedActs4_2_8: isSwitchedActs4_2_8,
      DatabaseHelper.isSwitchedActs4_2_9: isSwitchedActs4_2_9,
      DatabaseHelper.isSwitchedActs4_2_10: isSwitchedActs4_2_10,
      DatabaseHelper.isSwitchedActs4_2_11: isSwitchedActs4_2_11,
      DatabaseHelper.isSwitchedActs4_2_12: isSwitchedActs4_2_12,
      DatabaseHelper.isSwitchedActs4_2_13: isSwitchedActs4_2_13,
      DatabaseHelper.isSwitchedActs4_2_14: isSwitchedActs4_2_14,
      DatabaseHelper.isSwitchedActs4_2_15: isSwitchedActs4_2_15,
      DatabaseHelper.isSwitchedActs4_2_16: isSwitchedActs4_2_16,
      DatabaseHelper.isSwitchedActs4_2_17: isSwitchedActs4_2_17,
      DatabaseHelper.isSwitchedActs4_2_18: isSwitchedActs4_2_18,
      DatabaseHelper.isSwitchedActs4_2_19: isSwitchedActs4_2_19,
      DatabaseHelper.isSwitchedActs4_2_20: isSwitchedActs4_2_20,
      DatabaseHelper.isSwitchedActs5: isSwitchedActs5,
      DatabaseHelper.isSwitchedActs5_1: isSwitchedActs5_1,
      DatabaseHelper.isSwitchedActs5_2: isSwitchedActs5_2,
      DatabaseHelper.isSwitchedActs5_3: isSwitchedActs5_3,
      DatabaseHelper.isSwitchedActs5_4: isSwitchedActs5_4,
      DatabaseHelper.isSwitchedActs6: isSwitchedActs6,
      DatabaseHelper.isSwitchedActs6_1_1: isSwitchedActs6_1_1,
      DatabaseHelper.isSwitchedActs6_1_2: isSwitchedActs6_1_2,
      DatabaseHelper.isSwitchedActs6_1_3: isSwitchedActs6_1_3,
      DatabaseHelper.isSwitchedActs6_1_4: isSwitchedActs6_1_4,
      DatabaseHelper.isSwitchedActs6_1_5: isSwitchedActs6_1_5,
      DatabaseHelper.isSwitchedActs6_1_6: isSwitchedActs6_1_6,
      DatabaseHelper.isSwitchedActs6_1_7: isSwitchedActs6_1_7,
      DatabaseHelper.isSwitchedActs6_2_1: isSwitchedActs6_2_1,
      DatabaseHelper.isSwitchedActs6_2_2: isSwitchedActs6_2_2,
      DatabaseHelper.isSwitchedActs6_2_3: isSwitchedActs6_2_3,
      DatabaseHelper.isSwitchedActs7: isSwitchedActs7,
      DatabaseHelper.isSwitchedActs7_1_1: isSwitchedActs7_1_1,
      DatabaseHelper.isSwitchedActs7_1_2: isSwitchedActs7_1_2,
      DatabaseHelper.isSwitchedActs7_1_3: isSwitchedActs7_1_3,
      DatabaseHelper.isSwitchedActs7_2_1: isSwitchedActs7_2_1,
      DatabaseHelper.isSwitchedActs7_2_2: isSwitchedActs7_2_2,
      DatabaseHelper.isSwitchedActs7_2_3: isSwitchedActs7_2_3,
      DatabaseHelper.isSwitchedActs7_2_4: isSwitchedActs7_2_4,
      DatabaseHelper.isSwitchedActs8: isSwitchedActs8,
      DatabaseHelper.isSwitchedActs8_1: isSwitchedActs8_1,
      DatabaseHelper.isSwitchedActs8_2: isSwitchedActs8_2,
      DatabaseHelper.isSwitchedActs8_3: isSwitchedActs8_3,
      DatabaseHelper.isSwitchedActs9: isSwitchedActs9,
      DatabaseHelper.isSwitchedActs9_1: isSwitchedActs9_1,
      DatabaseHelper.isSwitchedActs9_2: isSwitchedActs9_2,
      DatabaseHelper.isSwitchedActs9_3: isSwitchedActs9_3,
      DatabaseHelper.isSwitchedActs9_4: isSwitchedActs9_4,
      DatabaseHelper.isSwitchedActs9_5: isSwitchedActs9_5,
      DatabaseHelper.isSwitchedActs10: isSwitchedActs10,
      DatabaseHelper.isSwitchedActs10_1: isSwitchedActs10_1,
      DatabaseHelper.isSwitchedActs10_2: isSwitchedActs10_2,
      DatabaseHelper.isSwitchedActs10_3: isSwitchedActs10_3,
      DatabaseHelper.isSwitchedActs11: isSwitchedActs11,
      DatabaseHelper.isSwitchedActs11_1: isSwitchedActs11_1,
      DatabaseHelper.isSwitchedActs11_2: isSwitchedActs11_2,
      DatabaseHelper.isSwitchedActs11_3: isSwitchedActs11_3,
      DatabaseHelper.isSwitchedActs11_4: isSwitchedActs11_4,
      DatabaseHelper.BreakRule26d1Note: _ActSection26dController.text,
      DatabaseHelper.BreakRule214FormCNote: _ActSection214Controller.text,
      DatabaseHelper.BreakRule26b2Year: _ActRule2bYearController.text,
      DatabaseHelper.BreakRule26b2Year1: _ActRule2bYear1Controller.text,
      DatabaseHelper.BreakRule274Year1: _Act2_1FinancialYearController.text,
      DatabaseHelper.BreakRule274Year2: _Act2_1FinancialYearController.text,
      DatabaseHelper.FromA: isFromA,
      DatabaseHelper.FromB: isFromB,
      DatabaseHelper.FromC: isFromC,
      DatabaseHelper.FromD: isFromD,
      DatabaseHelper.BreakRule4aYear: _ActR4aController.text,
      DatabaseHelper.BreakRule4bYear: _ActR4bController.text,
      DatabaseHelper.BreakRule4cYear: _ActR4cController.text,
      DatabaseHelper.BreakRule5Year: _ActS26R5Controller.text,
      DatabaseHelper.BreakRule32note: _ActR32Controller.text,
      DatabaseHelper.EngagesContractExtraWorkUser: _ActISNoController.text,
      DatabaseHelper.BreakRule9kUser: _ActS9aLaborersController.text,
      DatabaseHelper.BreakRule9kTotalUser: _ActS9aSnoController.text,
      DatabaseHelper.BreakRule72User: _ActR72Controller.text,
      DatabaseHelper.BreakRule73User: _ActS212SnoController.text,
      DatabaseHelper.BreakRule822Year1: _ActR822YearController.text.isNotEmpty ? int.tryParse(_ActR822YearController.text) : 0,
      DatabaseHelper.BreakRule822Year2: _ActR822Year1Controller.text.isNotEmpty ? int.tryParse(_ActR822Year1Controller.text) : 0,
      DatabaseHelper.BreakRule811User: _ActS292R811Controller.text,
      DatabaseHelper.ContractLabourChangeDetails: changeDetailsController.text,
      DatabaseHelper.ContractLabourDateofModification: dateModificationController.text,
      DatabaseHelper.BreakRuleS211k65Year: _ActS211R65Controller.text,
      DatabaseHelper.IsBreakRuleS122k25LicNo: _ActS122R25Controller.text,
      DatabaseHelper.BreakRule821Year1: _ActR821Year1Controller.text.isNotEmpty ? int.tryParse(_ActR821Year1Controller.text) ?? 0 : 0,
      DatabaseHelper.BreakRule821Year2: _ActR821Year1Controller.text.isNotEmpty ? int.tryParse(_ActR821Year1Controller.text) ?? 0 : 0,
      DatabaseHelper.IsBreakRuleK6Not1: _ActR6Controller.text,
      DatabaseHelper.IsBreakRule35Not1: _ActS172R34Controller.text,
      DatabaseHelper.IsBreakRulek17a94checkbox1: empFormD,
      DatabaseHelper.IsBreakRulek17a94checkbox2: serviceFormE,
      DatabaseHelper.IsBreakRulek17a94checkbox3: leaveRegFormF,
      DatabaseHelper.IsBreakRulek17a94checkbox4: musterRollFormG,
      DatabaseHelper.IsBreakRule131425Not: _ActR13_14_25S7NotController.text,
      DatabaseHelper.IsBreakRule131425Not1: _ActR13_14_25S7Not1Controller.text,
      DatabaseHelper.IsBreakRuleS4Not: _ActR14_15_16S4Controller.text,
      DatabaseHelper.IsBreakRuleSK4Not: _ActR143_144_145Controller.text,
      DatabaseHelper.estImage: filePathEstImageList.join(","),
      DatabaseHelper.estDocument: filePathEstDocList.join(","),
      DatabaseHelper.authSign: selectedAuthSign,
      DatabaseHelper.fileAuthorizedSign: fileAuthorizedSign?.path,
      DatabaseHelper.fileInspectorSign: fileInspectorSign?.path,
      DatabaseHelper.remarks: _otherRemarksController.text,
      DatabaseHelper.non_compliance: selectedNonCompliance,
      DatabaseHelper.inspectorName: _inspectorName.text,
      DatabaseHelper.inspectorEmail: _inspectorEmail.text,
      DatabaseHelper.stipulatedTimeLimit: selectedTimeLimit,
      DatabaseHelper.reportingAuth: selectedReportingAuth,
      DatabaseHelper.EmployerXMLString: EmployeeDetailsXMLString,
      DatabaseHelper.ContractorXMLString: ContractorDetailsXMLString,
      DatabaseHelper.Act1Remark: _Act1RemarksController.text,
      DatabaseHelper.Act2Remark: _Act2RemarksController.text,
      DatabaseHelper.Act3Remark: _Act3RemarksController.text,
      DatabaseHelper.Act4Remark: _Act4_principalRemarksController.text,
      DatabaseHelper.Act4_2Remark: _Act4_contractorRemarksController.text,
      DatabaseHelper.Act5Remark: _Act5RemarksController.text,
      DatabaseHelper.Act6Remark: _Act6RemarksController.text,
      DatabaseHelper.Act6_2Remark: _Act6_conRemarksController.text,
      DatabaseHelper.Act7Remark: _Act7RemarksController.text,
      DatabaseHelper.Act8Remark: _Act8RemarksController.text,
      DatabaseHelper.Act9Remark: _Act9RemarksController.text,
      DatabaseHelper.Act10Remark: _Act10RemarksController.text,
      DatabaseHelper.Act11Remark: _Act11RemarksController.text,
      DatabaseHelper.InspectionOnsitePictureXMLString: InspectionOnsitePictureXMLString,
      DatabaseHelper.IsSubmit: false,
      DatabaseHelper.MainDivACT1WorkerDetailsXMLString: MainDivACT1WorkerDetailsXMLString,
      DatabaseHelper.MainDivACT18WorkersDetailsXMLString: MainDivACT18WorkersDetailsXMLString,
      DatabaseHelper.ActFinancial12ListXMLString: ActFinancial12ListXMLString,
      DatabaseHelper.ACTRuleNotPaidWorkerXMLString: ACTRuleNotPaidWorkerXMLString,
      DatabaseHelper.ACTContractorDetailXMLString: ACTContractorDetailXMLString,
      DatabaseHelper.ACTSharamk214DetailsXMLString: ACTSharamk214DetailsXMLString,
      DatabaseHelper.ACTRuleS211k65DetailsXMLString: ACTRuleS211k65DetailsXMLString,
      DatabaseHelper.ACTWorkerDetailsXMLString: ACTWorkerDetailsXMLString,
      DatabaseHelper.ACTContractPersonDetailsXMLString: ACTContractPersonDetailsXMLString,
      DatabaseHelper.ACTRulek3DetailsXMLString: ACTRulek3DetailsXMLString,
      DatabaseHelper.ACTRule3aDetailsXMLString: ACTRule3aDetailsXMLString,
      DatabaseHelper.ACTRuleWorkmen17XMLString: ACTRuleWorkmen17XMLString,
      DatabaseHelper.ACTRule972DetailsRecordXMLString: ACTRule972DetailsRecordXMLString,
      DatabaseHelper.ACTRule973DetailsXMLString: ACTRule973DetailsXMLString,
      DatabaseHelper.ACTRuleDesignationXMLString: ACTRuleDesignationXMLString,
      DatabaseHelper.ACTRuleMainDivEmployeesXMLString: ACTRuleMainDivEmployeesXMLString,
      DatabaseHelper.NoPaidBonusPersonyear: _Act2_2FinancialYearController.text,
      DatabaseHelper.latitude: latitude,
      DatabaseHelper.longitude: longitude,
      DatabaseHelper.IsextraworkDoc: IsextraworkDoc,
      DatabaseHelper.EmailDetailsRecordXML: EmailXMLString,
    };

    bool isEntryExist = await dbHelper.isEntryExist(_reportNoController.text.toString());
    if (isFromOffline) {
      final id = await dbHelper.update(row, dbID!);
    } else if (!isEntryExist) {
      final id = await dbHelper.insert(row);
    }

    AppUtils.showSnackBar(context, 'Offline Application Save Successfully');
    Future.delayed(Duration(seconds: 2), () {
      Navigator.pop(context);
    });
    // print('inserted row id:$id');
  }

  List<dynamic> xmlToList(String xmlString) {
    List<dynamic> dataList = [];
    if (xmlString.isEmpty) {
      return dataList;
    }
    // final document = XmlDocument.parse(xmlString);
    final document = xml.XmlDocument.parse(xmlString);

    for (var dataRow in document.findAllElements('DataRow')) {
      Map<String, dynamic> rowData = {};
      dataRow.children.whereType<xml.XmlElement>().forEach((element) {
        rowData[element.name.local] = element.text;
      });
      dataList.add(rowData);
    }
    return dataList;
  }

  String buildXml(List<dynamic> dataList) {
    if (dataList.isEmpty) {
      return "";
    }
    // Create XML builder
    final builder = xml.XmlBuilder();

    builder.element('DataTable', nest: () {
      for (var data in dataList) {
        builder.element('DataRow', nest: () {
          data.forEach((key, value) {
            builder.element(key, nest: value.toString());
          });
        });
      }
    });
    // Build XML document
    final bookshelfXml = builder.buildDocument();
    // Convert XML document to string
    return bookshelfXml.toXmlString(pretty: true);
  }

  Future<void> uploadFile(File data) async {
    if (!isAppOnline) {
      return;
    }
    final formData = FormData.fromMap({
      'MyUploader': await MultipartFile.fromFile(data.path, filename: data.path.split('/').last),
    });
    final response = await _dio.post('/MobileAppAPI/UploadDocumentOnCDB', data: formData);
    if (response.statusCode == 200) {
      Map<String, dynamic> responseMap = json.decode(response.data);
      fileName = responseMap['FileName'];
      print(fileName);
      fileCID = responseMap["FileCID"];
      print(fileCID);
      return response.data;
    } else {
      throw Exception('Failed to load inspection list');
    }
  }

  Future<void> uploadDocument(File data, String variableName, {String? newFileName, int? index}) async {
    if (!isAppOnline) {
      return;
    }
    if (variableName != 'MapImage') {
      CircularLoader().show(context);
    }
    final fileName = (newFileName == null || newFileName == "") ? data.path.split('/').last : newFileName;
    final formData = FormData.fromMap({
      'MyUploader': await MultipartFile.fromFile(data.path, filename: fileName),
    });
    final response = await _dio.post('/MobileAppAPI/UploadDocumentOnCDB', data: formData);

    if (variableName != 'MapImage') {
      CircularLoader().hide(context);
    }
    if (response.statusCode == 200) {
      Map<String, dynamic> responseMap = json.decode(response.data);
      InspectionOneSiteModel data = InspectionOneSiteModel.fromJson(responseMap);
      // InspectionOneSiteDocModel docData =
      //     InspectionOneSiteDocModel(DID: 0, DocumentPath: data.DocumentPath, DocumentPathCID: data.DocumentPathCID);
      InspectionOneSiteDocModel docData = InspectionOneSiteDocModel.fromJson(responseMap);
      if (variableName == 'LicenseProofDoc') {
        LicensepProofDoc = responseMap['FileName'];
        print(LicensepProofDoc);
        LicensepProofCID = responseMap["FileCID"];
        print(LicensepProofCID);
        setState(() {});
      } else if (variableName == 'RegProofDoc') {
        RegistrationDoc = responseMap['FileName'];
        print(RegistrationDoc);
        RegistrationCID = responseMap["FileCID"];
        print(RegistrationCID);
        setState(() {});
      } else if (variableName == 'FileUpload') {
        ContractorFileName = responseMap['FileName'];
        print(ContractorFileName);
        ContractorFileCID = responseMap["FileCID"];
        print(ContractorFileCID);
      } else if (variableName == 'EstImage') {
        inspectionOneSiteModel.add(docData);
        inspectionOneSiteModel_EstImage.add(docData);
        setState(() {});
        print("inspectionOneSiteModel---$inspectionOneSiteModel");
      } else if (variableName == 'EstDocument') {
        inspectionOneSiteModel.add(docData);
        inspectionOneSiteModel_EstDoc.add(docData);
        setState(() {});
        print("inspectionOneSiteModel---$inspectionOneSiteModel");
      } else if (variableName == 'authSign') {
        AuthorizedSignPath = responseMap['FileName'];
        print(AuthorizedSignPath);
        AuthorizedSignCID = responseMap["FileCID"];
        print(ESTDocCID);
      } else if (variableName == 'inspectorSign') {
        InspectorSignPath = responseMap['FileName'];
        print(InspectorSignPath);
        InspectionSignCID = responseMap["FileCID"];
        print(InspectionSignCID);
      } else if (variableName == 'Worker1_8') {
        if (Act1_8Widgets.length > 1) {
          WorkerUploadStatement.add(data);
          print("WorkerUploadStatement---$WorkerUploadStatement");
        }
        WorkerFileUploadName = responseMap['FileName'];
        print(WorkerFileUploadName);
        WorkerFileUploadCID = responseMap["FileCID"];
        print(WorkerFileUploadCID);

        var file_name = responseMap['FileName'];
        print(file_name);
        var FileCID = responseMap["FileCID"];
        print(FileCID);
        if (index != null) {
          updateWorkerInformationByImageUpload(file_name, FileCID, index);
        }
      } else if (variableName == "Principal_4") {
        IsextraworkDoc = responseMap['FileName'];
        print(IsextraworkDoc);
        IsextraworkDocCID = responseMap["FileCID"];
        print(IsextraworkDocCID);
        setState(() {});
      } else if (variableName == "FileUploads") {
        FileUpList.add(data);
        if (index != null) {
          var file_name = responseMap['FileName'];
          print(file_name);
          var FileCID = responseMap["FileCID"];
          print(FileCID);
          updateContractoreByImageUpload(file_name, FileCID, index);
        }

        print("FileUpList---$FileUpList");
        print(contractorImages[index!].DocumentPath);
      } else if (variableName == "MapImage") {
        MapImagefilename = responseMap['FileName'];
        MapImageCID = responseMap["FileCID"];
        print("MapImageCID---$MapImageCID");
        if (MapImagefilename.isNotEmpty && MapImageCID.isNotEmpty) {
          isMapLoadedSuccessfully = true;
        }
      }

      return response.data;
    } else {
      // CircularLoader().hide(context);
      if (variableName != 'MapImage') {
        CircularLoader().hide(context);
      }
      throw Exception('Failed to load inspection list');
    }
  }

  void deleteInspectionOneSite(int i) {
    InspectionOnsitePictureXML = {
      'DID': inspectionOneSiteModel[i].DID ?? 0,
      'InspectionID': inspectionId,
      'DocumentPath': inspectionOneSiteModel[i].DocumentPath,
      'DocumentPathCID': inspectionOneSiteModel[i].DocumentPathCID,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    deletedInspectionOnsitePictureXMLList.add(InspectionOnsitePictureXML);
  }

  // void convertXMLINspectionOneSite() async {
  //   InspectionOnsitePictureXMLList.clear();
  //   for (int i = 0; i < inspectionOneSiteModel.length; i++) {
  //     InspectionOnsitePictureXML = {
  //       'DID': inspectionOneSiteModel[i].DID ?? 0,
  //       'InspectionID': inspectionId,
  //       'DocumentPath': inspectionOneSiteModel[i].DocumentPath,
  //       'DocumentPathCID': inspectionOneSiteModel[i].DocumentPathCID,
  //       'URL': 'MobileApp',
  //       'IP_Address': '',
  //       'IsActive': '1',
  //     };
  //     InspectionOnsitePictureXMLList.add(InspectionOnsitePictureXML);
  //   }
  //   InspectionOnsitePictureXMLList.addAll(deletedInspectionOnsitePictureXMLList);
  //   // Convert data to XML
  //   InspectionOnsitePictureXMLString = buildXml(InspectionOnsitePictureXMLList);
  //   print(InspectionOnsitePictureXMLString); // Display the generated XML string
  //   InspectionOnsitePictureXMLList.clear();
  // }

  void convertXMLINspectionOneSite() {
    InspectionOnsitePictureXMLString = '';
    InspectionOnsitePictureXMLList.clear();

    // Combine the two lists
    List<InspectionOneSiteDocModel> combinedList = [];
    combinedList.addAll(inspectionOneSiteModel_EstImage);
    combinedList.addAll(inspectionOneSiteModel_EstDoc);

    for (int i = 0; i < combinedList.length; i++) {
      InspectionOnsitePictureXML = {
        'DID': combinedList[i].DID ?? 0,
        'InspectionID': inspectionId,
        'DocumentPath': combinedList[i].DocumentPath,
        'DocumentPathCID': combinedList[i].DocumentPathCID,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      InspectionOnsitePictureXMLList.add(InspectionOnsitePictureXML);
    }

    //InspectionOnsitePictureXMLList.addAll(deletedInspectionOnsitePictureXMLList);

    // Convert data to XML
    if (InspectionOnsitePictureXMLList.isNotEmpty) {
      InspectionOnsitePictureXMLString = buildXml(InspectionOnsitePictureXMLList);
    }

    print(InspectionOnsitePictureXMLString); // Display the generated XML string
  }

  void EmailXMLConvert() async {
    EmailXMLString = '';
    EmailList.clear();
    for (int i = 0; i < emails.length; i++) {
      EmailXML = {
        'InspectionID': inspectionId,
        'CmpID': 0,
        'ReportNo': _reportNoController.text,
        'InspectionEmail': emails[i],
        'InspectionDate': DateFormat('yyyy-MM-dd').format(currentDate),
        'IP_Address': ''
      };
      EmailList.add(EmailXML);
    }
    // Convert data to XML
    if (EmailList.isNotEmpty) {
      EmailXMLString = buildXml(EmailList);
    }

    print(EmailXMLString); // Display the generated XML string
  }

  Future<void> convertXML1_6() async {
    MainDivACT1WorkerDetailsXMLString = '';
    MainDivACT1WorkerDetailsList.clear();
    for (int i = 0; i < Act1_6Widgets.length; i++) {
      MainDivACT1WorkerDetailsXML = {
        'InspectionID': inspectionId,
        'ACTID': act1_6Ids[i],
        // 'ACTRuleID': ACTRuleID == null ? 0 : ACTRuleID,
        'ACTRuleID': act1_6RuleIds[i],
        'ACT1MinWorkerID': act1_6WorkerIds[i],
        'WorkerAct1FirstName': _Act1NameControllers[i].text,
        'IsBreakRule211a': isSwitchedActs1_6 ? 1 : 0,
        'MainContraventionsWagesAct': isSwitchedActs1 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      MainDivACT1WorkerDetailsList.add(MainDivACT1WorkerDetailsXML);
    }
    MainDivACT1WorkerDetailsList.addAll(deletedAct1_6List);
    // Convert data to XML
    MainDivACT1WorkerDetailsXMLString = buildXml(MainDivACT1WorkerDetailsList);
    print(MainDivACT1WorkerDetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML1_8() async {
    MainDivACT18WorkersDetailsXMLString = "";
    MainDivACT18WorkersDetailsList.clear();
    for (int i = 0; i < _ListHolderWorkInformationModel.length; i++) {
      MainDivACT18WorkersDetailsXML = {
        'InspectionID': widget.inspectionID,
        'WorkerAct1Rule8UploadStatement': _ListHolderWorkInformationModel[i].file_name,
        'WorkerAct1Rule8UploadStatementCID': _ListHolderWorkInformationModel[i].file_path,
        'ACTID': act1_8Ids[i],
        'ACTRuleID': act1_8RuleIds[i],
        'ACT1Rule8MinWorkerID': act1_8Rule8MinWorkerIds[i],
        'SrNo': _ListSerialNoTextEditingController[i].text,
        'WorkerAct1Rule8FirstName': _ListWorkersNameTextEditingController[i].text,
        'WorkerAct1Rule8Designation': _ListDesginationEditingController[i].text,
        'WorkerAct1Rule8LengthofService': _ListWorkersLenghtOfServiceEditingController[i].text,
        'WorkerAct1Rule8DailyWorkingHours': _ListWorkersDailyWorkingHouseEditingController[i].text.isEmpty ? 0 : int.tryParse(_ListWorkersDailyWorkingHouseEditingController[i].text),
        'WorkerAct1Rule8WagesPaidPerDay': _ListWorkerSwagesPaidPerDayEditingController[i].text.isEmpty ? 0 : _ListWorkerSwagesPaidPerDayEditingController[i].text,
        'WorkerAct1Rule8WagesPaidPerMonth': _ListWorkerSwagesPaidPerMonthEditingController[i].text.isEmpty ? 0 : _ListWorkerSwagesPaidPerMonthEditingController[i].text,
        'WorkerAct1Rule8WagesEntitledfromDate': _ListWorkersWagesEntitledFormDateEditingController[i].text,
        'WorkerAct1Rule8WagesAmount': _ListWorkersWagesPayableEditingController[i].text,
        'WorkerAct1Rule8WagesPaid': _ListWorkersWagesPaidEditingController[i].text.isEmpty ? 0 : _ListWorkersWagesPaidEditingController[i].text,
        'WorkerAct1Rule8DifferenceWagesAmount': _ListWorkersDiffrenceWagesAmountEditingController[i].text.isEmpty ? 0 : _ListWorkersDiffrenceWagesAmountEditingController[i].text,
        'WorkerAct1Rule8Remarks': _ListWorkersRemarksAmountEditingController[i].text,
        'Isdaymonth': _ListWorkersDayMonth[i],
        'IsBreakRuleK12': isSwitchedActs1_8 ? 1 : 0,
        'MainContraventionsWagesAct': isSwitchedActs1 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      MainDivACT18WorkersDetailsList.add(MainDivACT18WorkersDetailsXML);
    }
    MainDivACT18WorkersDetailsList.addAll(deletedAct1_8List);

    MainDivACT18WorkersDetailsXMLString = buildXml(MainDivACT18WorkersDetailsList);
    print("MainDivACT18WorkersDetailsXMLString----- $MainDivACT18WorkersDetailsXMLString"); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML2_1() async {
    ActFinancial12ListXMLString = '';
    ActFinancial12ListXMLList.clear();
    for (int i = 0; i < Act2_1Widgets.length; i++) {
      ActFinancial12ListXML = {
        'InspectionID': inspectionId,
        'ACTRuleID': act2_1RuleIds[i],
        'ACTID': act2_1Ids[i],
        'ActFinancial12ListDNo': act2_1FinancialLIstIds[i],
        'ActFinancial12ListYear': _Act2_1FinancialYearControllers[i].text,
        'IsBreakRule274': isSwitchedActs2_1 ? 1 : 0,
        'MainContraventionsPayBounus1965Act': isSwitchedActs2 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
        'ISActFinancial12ListFormA': IsFromA[i] ? 1 : 0,
        'IsActFinancial12ListFormB': IsFromB[i] ? 1 : 0,
        'IsActFinancial12ListFormC': IsFromC[i] ? 1 : 0,
        'IsActFinancial12ListFormD': IsFromD[i] ? 1 : 0,
      };
      ActFinancial12ListXMLList.add(ActFinancial12ListXML);
    }
    ActFinancial12ListXMLList.addAll(deletedAct2_1List);
    // Convert data to XML
    ActFinancial12ListXMLString = buildXml(ActFinancial12ListXMLList);
    print(ActFinancial12ListXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML2_2() async {
    ACTRuleNotPaidWorkerXMLString = '';
    ACTRuleNotPaidWorkerXMLList.clear();
    for (int i = 0; i < Act2_2Widgets.length; i++) {
      ACTRuleNotPaidWorkerXML = {
        'InspectionID': inspectionId,
        'ACTRuleID': act2_2RuleIds[i],
        'ACTID': act2_2Ids[i],
        'ACTRuleNotPaidWorkerDetailDNo': act2_2NotPaidWorkerDetailDNoIds[i],
        'NoPaidBonusPersonName': _Act2_2WorkerNameControllers[i].text,
        'IsBreakRule219b': isSwitchedActs2_2 ? 1 : 0,
        'MainContraventionsPayBounus1965Act': isSwitchedActs2 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRuleNotPaidWorkerXMLList.add(ACTRuleNotPaidWorkerXML);
    }
    ACTRuleNotPaidWorkerXMLList.addAll(deletedAct2_2List);
    // Convert data to XML
    ACTRuleNotPaidWorkerXMLString = buildXml(ACTRuleNotPaidWorkerXMLList);
    print(ACTRuleNotPaidWorkerXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML4_1_1() async {
    ACTContractorDetailXML = {
      'InspectionID': inspectionId,
      'ACTID': ACTID,
      'ACTRuleID': ACTRuleID == null ? 0 : ACTRuleID,
      'ACTRuleIsEngagesSNo': _Act4_1_1SrNoController.text,
      'NameOfContractor': _Act4_1_1NameContractorController.text,
      'DetailsOfWork': _Act4_1_1DetailsWorkController.text,
      'InitiationOfWork': _Act4_1_1TimeSinceController.text,
      'NumberOfWorkers': _Act4_1_1NoWorkersController.text,
      'IsEngagesContractExtraWork': '',
      'MainContraventionsContractLabour1972Act': isSwitchedActs4 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '0',
    };
    ACTContractorDetailXMLList.add(ACTContractorDetailXML);
    for (int i = 0; i < Act4_1_1Widgets.length; i++) {
      ACTContractorDetailXML = {
        'InspectionID': inspectionId,
        'ACTID': ACTID,
        'ACTRuleID': ACTRuleID == null ? 0 : ACTRuleID,
        'ACTRuleIsEngagesSNo': _Act4_1_1SrNoControllers[i].text,
        'NameOfContractor': _Act4_1_1NameContractorControllers[i].text,
        'DetailsOfWork': _Act4_1_1DetailsWorkControllers[i].text,
        'InitiationOfWork': _Act4_1_1TimeSinceControllers[i].text,
        'NumberOfWorkers': _Act4_1_1NoWorkersControllers[i].text,
        'IsEngagesContractExtraWork': 0,
        'MainContraventionsObservedUnderContractLabour1972Act': isSwitchedActs4 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '0',
      };
      ACTContractorDetailXMLList.add(ACTContractorDetailXML);
    }
    // Convert data to XML
    ACTContractorDetailXMLString = buildXml(ACTContractorDetailXMLList);
    print(ACTContractorDetailXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML4_1_5() async {
    ACTSharamk214DetailsXMLString = '';
    ACTSharamk214DetailsXMLList.clear();
    for (int i = 0; i < Act4_1_5Widgets.length; i++) {
      ACTSharamk214DetailsXML = {
        'InspectionID': inspectionId,
        'ACTID': act4_1_5Ids[i],
        'ACTRuleID': act4_1_5RuleIds[i],
        'Sharamk214DNo': act4_1_5Sharamk214DNo[i],
        'Sharamk214NameofContractor': _Act4_1_5NameContractorControllers[i].text,
        'Sharamk214NameofContractLabour': _Act4_1_5NameContractorLabourControllers[i].text,
        'IsSharamk214PaidWages': WagesToPaid[i] == 0 ? 0 : WagesToPaid[i],
        'Sharamk214Wagestobepaid': _Act4_1_5WagesTobePaidControllers[i].text == '' ? 0 : _Act4_1_5WagesTobePaidControllers[i].text,
        'Sharamk214DifferentialAmounttobepaid': _Act4_1_5DifferAmountControllers[i].text == '' ? 0 : _Act4_1_5DifferAmountControllers[i].text,
        'IsBreakRule214': isSwitchedActs4_1_4 ? 1 : 0,
        'MainContraventionsContractLabour1972Act': isSwitchedActs4 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTSharamk214DetailsXMLList.add(ACTSharamk214DetailsXML);
    }
    ACTSharamk214DetailsXMLList.addAll(deletedAct4_1_5List);
    // Convert data to XML
    ACTSharamk214DetailsXMLString = buildXml(ACTSharamk214DetailsXMLList);
    print(ACTSharamk214DetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML4_2_5() async {
    ACTRuleS211k65DetailsXMLString = '';
    ACTRuleS211k65DetailsXMLList.clear();
    for (int i = 0; i < Act4_2_5Widgets.length; i++) {
      ACTRuleS211k65DetailsXML = {
        'InspectionID': inspectionId,
        'ACTID': act4_2_5Ids[i],
        'ACTRuleID': act4_2_5RuleIds[i],
        'ACTIsBreakRuleS211k65DNo': act4_2_5ACTIsBreakRuleS211k65DNo[i],
        'ACTIsBreakRuleS211k65Contractorname': _Act4_2_5NameContractorControllers[i].text,
        'IsBreakRuleS211k65': isSwitchedActs4_2_5 ? 1 : 0,
        'MainContraventionsObservedUnderContractLabour1972Act': isSwitchedActs4 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRuleS211k65DetailsXMLList.add(ACTRuleS211k65DetailsXML);
    }
    ACTRuleS211k65DetailsXMLList.addAll(deletedAct4_2_5List);
    // Convert data to XML
    ACTRuleS211k65DetailsXMLString = buildXml(ACTRuleS211k65DetailsXMLList);
    print(ACTRuleS211k65DetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML5_4() async {
    ACTWorkerDetailsXMLString = '';
    ACTWorkerDetailsXMLList.clear();
    for (int i = 0; i < Act5_4Widgets.length; i++) {
      ACTWorkerDetailsXML = {
        'InspectionID': inspectionId,
        'ACTRuleID': act5_4RuleIds[i],
        'ACTID': act5_4Ids[i],
        'WorkerSrNo': _Act5_4SrNoControllers[i].text,
        'MaleWorkerName': _Act5_4MaleWorkersControllers[i].text,
        'MDesignation': _Act5_4MDesgControllers[i].text,
        'MSalarypaid': _Act5_4MSalaryPaidControllers[i].text == '' ? 0 : _Act5_4MSalaryPaidControllers[i].text,
        'FemaleWorkerName': _Act5_4FemaleWorkersControllers[i].text,
        'FDesignation': _Act5_4FDesgControllers[i].text,
        'FSalarypaid': _Act5_4FSalaryPaidControllers[i].text == '' ? 0 : _Act5_4FSalaryPaidControllers[i].text,
        'MainContraventionsObservedUnderRemuneration1976Act': isSwitchedActs5 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTWorkerDetailsXMLList.add(ACTWorkerDetailsXML);
    }
    ACTWorkerDetailsXMLList.addAll(deletedAct5_4List);
    // Convert data to XML
    ACTWorkerDetailsXMLString = buildXml(ACTWorkerDetailsXMLList);
    print(ACTWorkerDetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML6() async {
    ACTContractPersonDetailsXMLString = '';
    ACTContractPersonDetailsXMLList.clear();
    for (int i = 0; i < Act6Widgets.length; i++) {
      ACTContractPersonDetailsXML = {
        'InspectionID': inspectionId,
        'ACTRuleID': act6RuleIds[i],
        'ACTID': act6Ids[i],
        'ContractorPersonDetailsDetailDNo': act6ContractorPersonDetailsDetailDNo[i],
        'ContractPersonName': _Act6NameContractorControllers[i].text,
        'ContractPersonDetailsPAddress': _Act6AddressControllers[i].text,
        'Detailswork': _Act6DetailsWorkControllers[i].text,
        'initiationwork': _Act6TimeSinceControllers[i].text,
        'Noofworkersemployed': _Act6NoWorkersControllers[i].text == '' ? 0 : _Act6NoWorkersControllers[i].text,
        'Totalnumberofworkers': _Act6TotalNoWorkersControllers[i].text == '' ? 0 : _Act6TotalNoWorkersControllers[i].text,
        'MainContraventionsObservedUnderInterStateMigrantWorkmen1979Act': isSwitchedActs6 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTContractPersonDetailsXMLList.add(ACTContractPersonDetailsXML);
    }
    ACTContractPersonDetailsXMLList.addAll(deletedAct6List);
    // Convert data to XML
    ACTContractPersonDetailsXMLString = buildXml(ACTContractPersonDetailsXMLList);
    print(ACTContractPersonDetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML7_1_1() async {
    ACTRulek3DetailsXML = {
      'InspectionID': inspectionId,
      'ACTRulek3DetailDocumentofchild': '',
      'ACTRulek3DetailDocumentofchildCID': '',
      'ACTRulek3DetailImageofChild': '',
      'ACTRulek3DetailImageofChildCID': '',
      'ACTID': ACTID,
      'ACTRuleID': ACTRuleID == null ? 0 : ACTRuleID,
      'ACTRulek3DetailDNo': _Act7_1_1SrNoController.text,
      'ACTRulek3DetailNameofChildLabour': _Act7_1_1NameChildLabourController.text,
      'ACTRulek3DetailAddress': _Act7_1_1AddressController.text,
      'ACTRulek3DetailAge': _Act7_1_1AgeController.text,
      'IsBreakRulek3': isSwitchedActs7_1_1 ? 1 : 0,
      'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '1',
    };
    ACTRulek3DetailsXMLList.add(ACTRulek3DetailsXML);
    for (int i = 0; i < Act7_1_1Widgets.length; i++) {
      ACTRulek3DetailsXML = {
        'InspectionID': inspectionId,
        'ACTRulek3DetailDocumentofchild': '',
        'ACTRulek3DetailDocumentofchildCID': '',
        'ACTRulek3DetailImageofChild': '',
        'ACTRulek3DetailImageofChildCID': '',
        'ACTID': ACTID,
        'ACTRuleID': ACTRuleID == null ? 0 : ACTRuleID,
        'ACTRulek3DetailDNo': _Act7_1_1SrNoControllers[i].text,
        'ACTRulek3DetailNameofChildLabour': _Act7_1_1NameChildLabourControllers[i].text,
        'ACTRulek3DetailAddress': _Act7_1_1AddressControllers[i].text,
        'ACTRulek3DetailAge': _Act7_1_1AgeControllers[i].text,
        'IsBreakRulek3': isSwitchedActs7_1_1 ? 1 : 0,
        'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRulek3DetailsXMLList.add(ACTRulek3DetailsXML);
    }
    // Convert data to XML
    ACTRulek3DetailsXMLString = buildXml(ACTRulek3DetailsXMLList);
    print(ACTRulek3DetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML7_1_2() async {
    ACTRule3aDetailsXML = {
      'InspectionID': inspectionId,
      'ACTID': ACTID,
      'ACTRuleID': ACTRuleID == null ? 0 : ACTRuleID,
      'ACTRule3aDetailDNo': _Act7_1_2SrNoController.text,
      'ACTRule3aDetailNameofAdolescentLabour': _Act7_1_2NameAdolescentLabourController.text,
      'ACTRule3aDetailAddress': _Act7_1_2AddressController.text,
      'ACTRule3aDetailAge': _Act7_1_2AgeController.text,
      'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
      'URL': 'MobileApp',
      'IP_Address': '',
      'IsActive': '1',
    };
    ACTRule3aDetailsXMLList.add(ACTRule3aDetailsXML);
    for (int i = 0; i < Act7_1_2Widgets.length; i++) {
      ACTRule3aDetailsXML = {
        'InspectionID': inspectionId,
        'ACTID': ACTID,
        'ACTRuleID': ACTRuleID == null ? 0 : ACTRuleID,
        'ACTRule3aDetailDNo': _Act7_1_2SrNoControllers[i].text,
        'ACTRule3aDetailNameofAdolescentLabour': _Act7_1_2NameAdolescentLabourControllers[i].text,
        'ACTRule3aDetailAddress': _Act7_1_2AddressControllers[i].text,
        'ACTRule3aDetailAge': _Act7_1_2AgeControllers[i].text,
        'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRule3aDetailsXMLList.add(ACTRule3aDetailsXML);
    }
    // Convert data to XML
    ACTRule3aDetailsXMLString = buildXml(ACTRule3aDetailsXMLList);
    print(ACTRule3aDetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML7_1_3() async {
    ACTRuleWorkmen17XMLString = '';
    ACTRuleWorkmen17XMLList.clear();
    for (int i = 0; i < Act7_1_3Widgets.length; i++) {
      ACTRuleWorkmen17XML = {
        'InspectionID': inspectionId,
        'ACTRuleID': act7_5RuleIds[i],
        'ACTID': act7_5Ids[i],
        'WorkemenSrNo': act7_5WorkemenSrNo[i],
        'NameofChildLabour': _Act7_1_3NameChildLabourControllers[i].text,
        'ChildPAddress': _Act7_1_3AddressControllers[i].text,
        'DistrictID': 0,
        'TalukaID': 0,
        'ZoneID': 0,
        'AreaID': 0,
        'childAge': _Act7_1_3AgeControllers[i].text == '' ? 0 : _Act7_1_3AgeControllers[i].text,
        'IsBreakRule17': isSwitchedActs7_1_3 ? 1 : 0,
        'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRuleWorkmen17XMLList.add(ACTRuleWorkmen17XML);
    }
    ACTRuleWorkmen17XMLList.addAll(deletedAct7_5List);
    // Convert data to XML
    ACTRuleWorkmen17XMLString = buildXml(ACTRuleWorkmen17XMLList);
    print(ACTRuleWorkmen17XMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML7_2_4() async {
    ACTRule973DetailsXMLString = '';
    ACTRule973DetailsXMLList.clear();
    for (int i = 0; i < Act7_2_4Widgets.length; i++) {
      ACTRule973DetailsXML = {
        'InspectionID': inspectionId,
        'ACTID': act7_4Ids[i],
        'ACTRuleID': act7_4RuleIds[i],
        'ACTIsBreakRule973DetailDNo': act7_4ACTIsBreakRule973DetailDNo[i],
        'ACTIsBreakRule973NameofAdolescentLabour': _Act7_2_4NameAdolescentLabourControllers[i].text,
        'ACTIsBreakRule973DetailAddress': _Act7_2_4AddressControllers[i].text,
        'ACTIsBreakRule973DetailAge': _Act7_2_4AgeControllers[i].text == '' ? 0 : _Act7_2_4AgeControllers[i].text,
        'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRule973DetailsXMLList.add(ACTRule973DetailsXML);
    }
    ACTRule973DetailsXMLList.addAll(deletedAct7_4List);
    // Convert data to XML
    ACTRule973DetailsXMLString = buildXml(ACTRule973DetailsXMLList);
    print(ACTRule973DetailsXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML7_3() async {
    ACTRule972DetailsRecordXMLString = '';
    ACTRule972DetailsRecordXMLList.clear();
    for (int i = 0; i < Act7_3Widgets.length; i++) {
      ACTRule972DetailsRecordXML = {
        'InspectionID': inspectionId,
        'ACTID': act7_3Ids[i],
        'ACTRuleID': act7_3RuleIds[i],
        'ACTIsBreakRule972DetailDNo': act7_3ACTIsBreakRule972DetailDNo[i],
        'ACTIsBreakRule972NameofAdolescentLabour': _Act7_3NameAdolescentLabourControllers[i].text,
        'ACTIsBreakRule972DetailAddress': _Act7_3AddressControllers[i].text,
        'ACTIsBreakRule972DetailAge': _Act7_3AgeControllers[i].text == '' ? 0 : _Act7_3AgeControllers[i].text,
        'MainContObsInterStateWorkmen1986Act': isSwitchedActs7 ? 1 : 0,
        'IsBreakRule972': isSwitchedActs7_2_3 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRule972DetailsRecordXMLList.add(ACTRule972DetailsRecordXML);
    }
    ACTRule972DetailsRecordXMLList.addAll(deletedAct7_3List);
    // Convert data to XML
    ACTRule972DetailsRecordXMLString = buildXml(ACTRule972DetailsRecordXMLList);
    print(ACTRule972DetailsRecordXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML8_3() async {
    ACTRuleDesignationXMLString = '';
    ACTRuleDesignationXMLList.clear();
    for (int i = 0; i < Act8_3Widgets.length; i++) {
      ACTRuleDesignationXML = {
        'InspectionID': inspectionId,
        'ACTRuleID': act8_3RuleIds[i],
        'ACTID': act8_3Ids[i],
        'dessrno': act8_3dessrno[i],
        'DegprofileName': _Act8_3NameControllers[i].text,
        'DesignationName': _Act8_3DesgControllers[i].text,
        'Dateofsuspension': _Act8_3DateSuspensionControllers[i].text,
        'MainContObsInterStateWorkmen1946Act': isSwitchedActs8 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRuleDesignationXMLList.add(ACTRuleDesignationXML);
    }
    ACTRuleDesignationXMLList.addAll(deletedAct8_3List);
    // Convert data to XML
    ACTRuleDesignationXMLString = buildXml(ACTRuleDesignationXMLList);
    print(ACTRuleDesignationXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> convertXML11_1() async {
    ACTRuleMainDivEmployeesXMLString = '';
    ACTRuleMainDivEmployeesXMLList.clear();
    for (int i = 0; i < Act11_1Widgets.length; i++) {
      ACTRuleMainDivEmployeesXML = {
        'InspectionID': inspectionId,
        'ACTID': act11_1Ids[i],
        'ACTRuleID': act11_1RuleIds[i],
        'EmployeesActNo': act11_1EmployeesActNo[i],
        'EmployeesActName': _Act11_1NameControllers[i].text,
        'EmployeesActDesignation': _Act11_1DesgControllers[i].text,
        'EmployeesActDateofappointment': _Act11_1DateAppointmentControllers[i].text,
        'MainInspectionSalesEmployeesAct': isSwitchedActs11 ? 1 : 0,
        'URL': 'MobileApp',
        'IP_Address': '',
        'IsActive': '1',
      };
      ACTRuleMainDivEmployeesXMLList.add(ACTRuleMainDivEmployeesXML);
    }
    ACTRuleMainDivEmployeesXMLList.addAll(deletedAct11_1List);
    // Convert data to XML
    ACTRuleMainDivEmployeesXMLString = buildXml(ACTRuleMainDivEmployeesXMLList);
    print(ACTRuleMainDivEmployeesXMLString); // Display the generated XML string
    AppUtils.showSnackBar(context, "Save Successfully...");
  }

  Future<void> SingleSave() async {
    CircularLoader().show(context);

    print("MapImageCID----$MapImageCID");
    print("Switch10----$isSwitchedActs10");
    print("Switch10_1----$isSwitchedActs10_1");
    print("Switch10_2----$isSwitchedActs10_2");
    print("Switch10_3----$isSwitchedActs10_3");
    // Convert the list to a string
    String emailString = emails.toString();

    // Remove the square brackets
    emailString = emailString.replaceAll('[', '').replaceAll(']', '').replaceAll(', ', ',');

    final requestData = jsonEncode({
      "UserID": userID,
      "UserMode": 1,
      "IsComplinDoc": false,
      "InspectionID": inspectionId,
      "InspectionDatee": _inspectionDateController.text,
      "ReportNo": _reportNoController.text.toString(),
      "DistrictID": 0,
      "TalukaID": 0,
      "Pincode": _pinCodeController.text.isNotEmpty ? int.tryParse(_pinCodeController.text) : 0,
      "AreaName": _areaController.text,
      "URL": "MobielApp",
      "IP_Address": "",
      "IFPApplicationNo": _IFSCNoBaseController.text,
      "ComplainName": _nameOfComplain.text,
      "ComplainSubject": _subjectOfComplain.text,
      "ComplainDate": _dateOfComplain.text.isEmpty ? null : _dateOfComplain.text,
      "InspectionType": dropdownValue == null ? 0 : dropdownValue,
      "EstablishmentName": _establishmentNameController.text,
      "PAddress": _permanentAddressController.text,
      "EstDistrictID": selectedDistrict,
      "EstTalukaID": selectedTaluka == null ? 0 : selectedTaluka,
      "EstPincode": _est_pincode_Controller.text.isNotEmpty ? int.tryParse(_est_pincode_Controller.text) : 0,
      "InspectEstAreaName": _est_area_Controller.text,
      "RegisteredUnder": _regUnderNoneOfAboveController.text,
      "RegistrationNumber": _regNo_Controller.text,
      "RegistrationDate": _registrationDateController.text.isEmpty ? null : _registrationDateController.text,
      "IndustrytypeID": selectedIndustory == null ? 0 : selectedIndustory,
      "Mentionbelow": _EstOtherController.text,
      "MaleCount": _maleWorkerController.text.isNotEmpty ? int.tryParse(_maleWorkerController.text) : 0,
      "FemaleCount": _femaleWorkerController.text.isNotEmpty ? int.tryParse(_femaleWorkerController.text) : 0,
      "TransgenderCount": _transgenderWorkerController.text.isNotEmpty ? int.tryParse(_transgenderWorkerController.text) : 0,
      "TotalEmployees": _totalWorkerController.text.isNotEmpty ? int.tryParse(_totalWorkerController.text) : 0,
      "IsFactoriesAct": IsFactoriesAct,
      "IsTrustAct": IsTrustAct,
      "IsEstablishmentAct": IsEstablishmentAct,
      "IsLabourAct": IsLabourAct,
      "IsSocietyAct": IsSocietyAct,
      "IsTMTWAct1961Grul1965": IsTMTWAct1961Grul1965,
      "IsRegistrationunderGST": IsRegistrationUnderGST,
      "IsMinimumWagesAct1948": isSwitchedActs1,
      "IsThepaymentofBonusAct1965": isSwitchedActs2,
      "IsThepaymentofGratuityAct1972": isSwitchedActs3,
      "IsTheCLAct1970GRules1972": isSwitchedActs4,
      "IsTheEqualremunerationAct1976": isSwitchedActs5,
      "IsTheISMWRECSAct1979Grules1981": isSwitchedActs6,
      "IsTheChildLabourAct1986rules": isSwitchedActs7,
      "IsTheIESOA1946GRul1959": isSwitchedActs8,
      "MainContObsInterStateWorkmen1961Act": isSwitchedActs9,
      "IsTheWJNpaperEmployees": false,
      "IsTheSPECofServiceAct1976": isSwitchedActs11,
      "IsRegisteredUnder": registerUnder,
      "EID": EID,
      "EstablishmenttypeID": selectedIndustory == null ? 0 : selectedIndustory,
      "AuthorizedPersonName": _authorizedPersonController.text,
      "AuthorizedPersonEmail": emailString,
      "AuthorizedPersonContactNo": _authorizedPersonNoController.text,
      "AuthorizedPersonDesignation": _authorizedPersonDesignController.text,
      "LicensepProofDoc": LicensepProofDoc,
      "LicensepProofCID": LicensepProofCID,
      "RegistrationDoc": RegistrationDoc,
      "RegistrationCID": RegistrationCID,
      // "EmailDetailsRecordXML": '',
      // "DID": 0,
      "EmployeeDetailsXMLString": EmployeeDetailsXMLString,
      "ContractorDetailsXMLString": ContractorDetailsXMLString,
      "MainDivACT1WorkerDetailsXMLString": MainDivACT1WorkerDetailsXMLString,
      "MainDivACT18WorkersDetailsXMLString": MainDivACT18WorkersDetailsXMLString,
      "ActFinancial12ListXMLString": ActFinancial12ListXMLString,
      "ACTRuleNotPaidWorkerXMLString": ACTRuleNotPaidWorkerXMLString,
      "NoPaidBonusPersonyear": _Act2_2FinancialYearController.text,
      "ACTContractorDetailXMLString": ACTContractorDetailXMLString,
      "IsextraworkDoc": IsextraworkDoc,
      "IsextraworkDocCID": IsextraworkDocCID,
      "ACTSharamk214DetailsXMLString": ACTSharamk214DetailsXMLString,
      "ACTRuleS211k65DetailsXMLString": ACTRuleS211k65DetailsXMLString,
      "ACTWorkerDetailsXMLString": ACTWorkerDetailsXMLString,
      "ACTContractPersonDetailsXMLString": ACTContractPersonDetailsXMLString,
      "ACTRulek3DetailsXMLString": ACTRulek3DetailsXMLString,
      "ACTRule3aDetailsXMLString": ACTRule3aDetailsXMLString,
      "ACTRuleWorkmen17XMLString": ACTRuleWorkmen17XMLString,
      "ACTRule973DetailsXMLString": ACTRule973DetailsXMLString,
      "ACTRuleDesignationXMLString": ACTRuleDesignationXMLString,
      "ACTRuleMainDivEmployeesXMLString": ACTRuleMainDivEmployeesXMLString,
      "ACTID": ACTID,
      "MainContraventionsWagesAct": isSwitchedActs1,
      "MainContraventionsWagesActNote": _Act1RemarksController.text,
      "BreakRule26d1Note": _ActSection26dController.text,
      "IsBreakRule26d": isSwitchedActs1_1,
      "IsBreakRule262": isSwitchedActs1_2,
      "IsBreakRule26b1": isSwitchedActs1_3,
      "IsBreakRule22": isSwitchedActs1_4,
      "IsBreakRule211a": isSwitchedActs1_6,
      "IsBreakRule214FormC": isSwitchedActs1_5,
      "BreakRule214FormCNote": _ActSection214Controller.text,
      "IsBreakRule251": isSwitchedActs1_7,
      "IsBreakRuleK12": isSwitchedActs1_8,
      "IsBreakRule121": false,
      "IsBreakRule261": isSwitchedActs1_10,
      "IsBreakRule263": isSwitchedActs1_11,
      "IsBreakRule264": isSwitchedActs1_9,
      "IsBreakRule265": isSwitchedActs1_12,
      "IsBreakRule26a": IsBreakRule26a,
      "IsBreakRule26b2": isSwitchedActs1_13,
      "BreakRule26b2Year": _ActRule2bYearController.text,
      "BreakRule26b2Year1": _ActRule2bYear1Controller.text,
      "IsBreakRule26b3": isSwitchedActs1_14,
      "IsBreakRule252": isSwitchedActs1_15,
      "IsBreakRule23": isSwitchedActs1_18,
      "IsBreakRule231": isSwitchedActs1_17,
      "IsBreakRule13ba": isSwitchedActs1_16,
      "IsBreakRule194": isSwitchedActs1_19,
      "IsBreakRule121Doc": IsBreakRule121Doc,
      "IsBreakRule121DocCID": IsBreakRule121DocCID,
      "MainContraventionsPayBounus1965Act": isSwitchedActs2,
      "MainContraventionsPayBounus1965ActNote": _Act2RemarksController.text,
      "IsBreakRule274": isSwitchedActs2_1,
      "BreakRule274Year1": _Act2_1FinancialYearController.text,
      "BreakRule274Year2": _Act2_1FinancialYearController.text,
      "FormA": isFromA,
      "FormB": isFromB,
      "FormC": isFromC,
      "FormD": isFromD,
      "IsBreakRule219b": isSwitchedActs2_2,
      "BreakRule4aYear": _ActR4aController.text,
      "IsBreakRule4a": isSwitchedActs2_3,
      "IsBreakRule4b": isSwitchedActs2_4,
      "BreakRule4bYear": _ActR4bController.text,
      "IsBreakRule4c": isSwitchedActs2_5,
      "BreakRule4cYear": _ActR4cController.text,
      "IsBreakRule5": isSwitchedActs2_6,
      "BreakRule5Year": _ActS26R5Controller.text,
      "MainContraventionsPayBounus1972Act": isSwitchedActs3,
      "MainContraventionsPayBounus1972ActNote": _Act3RemarksController.text,
      "IsBreakRule31": isSwitchedActs3_1,
      "IsBreakRule41": isSwitchedActs6_1_1,
      "IsBreakRule62": isSwitchedActs3_2,
      "IsBreakRule19": isSwitchedActs1_19,
      "IsBreakRule32": isSwitchedActs3_3,
      "BreakRule32note": _ActR32Controller.text,
      "IsBreakRule33": IsBreakRule33,
      "IsBreakRule7b": isSwitchedActs3_4,
      "MainContraventionsContractLabour1972Act": isSwitchedActs4,
      "MainContraventionsContractLabour1972ActNote": _Act4_principalRemarksController.text,
      "IsEngagesContractExtraWork": IsEngagesContractExtraWork,
      "EngagesContractExtraWorkUser": _ActISNoController.text,
      "IsBreakRule171": isSwitchedActs4_1_1,
      "IsBreakRule74": isSwitchedActs4_1_2,
      "IsBreakRule201": isSwitchedActs4_1_3,
      "IsBreakRule214": isSwitchedActs4_1_4,
      "IsBreakRule9k": isSwitchedActs4_1_5,
      "BreakRule9kUser": _ActS9aLaborersController.text,
      "BreakRule9kTotalUser": _ActS9aSnoController.text,
      "IsBreakRule72": isSwitchedActs4_1_6,
      "BreakRule72User": _ActR72Controller.text,
      "IsBreakRule73": isSwitchedActs4_1_7,
      "BreakRule73User": _ActS212SnoController.text,
      "IsBreakRule822": isSwitchedActs4_1_9,
      "BreakRule822Year1": _ActR822YearController.text.isNotEmpty ? int.tryParse(_ActR822YearController.text) : 0,
      "BreakRule822Year2": _ActR822Year1Controller.text.isNotEmpty ? int.tryParse(_ActR822Year1Controller.text) : 0,
      "IsBreakRule811": isSwitchedActs4_2_18,
      "BreakRule811User": isSwitchedActs4_2_18,
      "IsBreakRule812": isSwitchedActs4_1_10,
      "IsBreakRule183": isSwitchedActs4_1_11,
      "ContractLabourChangeDetails": changeDetailsController.text,
      "ContractLabourDateofModification": dateModificationController.text.isEmpty ? null : dateModificationController.text,
      "MainContraventionsObservedUnderContractLabour1972Act": isSwitchedActs4,
      "MainContraventionsObservedUnderContractLabour1972ActNote": _Act4_contractorRemarksController.text,
      "IsBreakRuleS121k211": isSwitchedActs4_2_1,
      "IsBreakRuleS131k211": isSwitchedActs4_2_1,
      "IsBreakRule421": isSwitchedActs4_2_2,
      "IsBreakRuleS17k41": isSwitchedActs4_2_3,
      "IsBreakRule401": isSwitchedActs4_2_4,
      "IsBreakRuleS211k65": isSwitchedActs4_2_5,
      "BreakRuleS211k65Year": _ActS211R65Controller.text,
      "IsBreakRuleS213k72": isSwitchedActs4_2_6,
      "IsBreakRuleS291k75": isSwitchedActs4_2_7,
      "IsBreakRuleS291k76": isSwitchedActs4_2_8,
      "IsBreakRule804": isSwitchedActs4_2_9,
      "IsBreakRuleS122k25": isSwitchedActs4_2_10,
      "IsBreakRuleS122k25LicNo": _ActS122R25Controller.text,
      "IsBreakRuleS131k29": isSwitchedActs4_2_11,
      "IsBreakRuleS291k781a": isSwitchedActs4_2_12,
      "IsBreakRuleS291k781b": isSwitchedActs4_2_13,
      "IsBreakRuleS291k781d": isSwitchedActs4_2_14,
      "IsBreakRuleS291k782b": isSwitchedActs4_2_15,
      "IsBreakRule821": isSwitchedActs4_2_16,
      "BreakRule821Year1": _ActR821Year1Controller.text.isNotEmpty ? int.tryParse(_ActR821Year1Controller.text) ?? 0 : 0,
      "BreakRule821Year2": _ActR821Year1Controller.text.isNotEmpty ? int.tryParse(_ActR821Year1Controller.text) ?? 0 : 0,
      "IsBreakRule71": isSwitchedActs4_2_17,
      "IsBreakRule8111": isSwitchedActs4_2_18,
      "IsBreakRuleU812": isSwitchedActs4_2_19,
      "IsBreakRule58": isSwitchedActs4_2_20,
      "MainContraventionsObservedUnderRemuneration1976Act": isSwitchedActs5,
      "MainContraventionsObservedUnderRemuneration1976ActNote": _Act5RemarksController.text,
      "IsBreakRule6": isSwitchedActs5_1,
      "IsBreakRule93b": isSwitchedActs5_2,
      "IsBreakRule94": isSwitchedActs5_3,
      "IsBreakRuleUN1976k41": isSwitchedActs5_4,
      "MainContraventionsObservedUnderInterStateMigrantWorkmen1979Act": isSwitchedActs6,
      "MainContraventionsInterStateMigrantWorkmen1979ActNote": _Act6RemarksController.text,
      "IsBreakRule4131": isSwitchedActs6_1_1,
      "IsBreakRule48": isSwitchedActs6_1_2,
      "IsBreakRuleK6": isSwitchedActs6_1_3,
      "IsBreakRuleK6Not1": _ActR6Controller.text,
      "IsBreakRule35": isSwitchedActs6_1_4,
      "IsBreakRule35Not1": _ActS172R34Controller.text,
      "IsBreakRule49": isSwitchedActs6_1_5,
      "IsBreakRule551": isSwitchedActs6_1_6,
      "IsBreakRule552": isSwitchedActs6_1_7,
      "MainContObsInterStateWorkmen1981Act": MainContObsInterStateWorkmen1981Act,
      "MainContObsInterStateWorkmen1981ActNote": _Act6_conRemarksController.text,
      "IsBreakRule7281": isSwitchedActs6_2_1,
      "IsBreakRule211": isSwitchedActs6_2_2,
      "IsBreakRule511": isSwitchedActs6_2_3,
      "MainContObsInterStateWorkmen1986Act": isSwitchedActs7,
      "MainContObsInterStateWorkmen1986ActNote": _Act7RemarksController.text,
      "IsBreakRulek3": isSwitchedActs7_1_1,
      "IsBreakRule3a": isSwitchedActs7_1_2,
      "IsBreakRule17": isSwitchedActs7_1_3,
      "IsBreakRule16": isSwitchedActs7_2_1,
      "IsBreakRule312": isSwitchedActs7_2_2,
      "IsBreakRule941": isSwitchedActs7_2_3,
      "IsBreakRule972": isSwitchedActs7_2_3,
      "IsBreakRule973": isSwitchedActs7_2_4,
      "MainContObsInterStateWorkmen1946Act": isSwitchedActs8,
      "MainContObsInterStateWorkmen1946ActNote": _Act8RemarksController.text,
      "IsBreakRuleo5": isSwitchedActs8_1,
      "IsBreakRulek9": isSwitchedActs8_2,
      "IsBreakRuleS10": isSwitchedActs8_3,
      // "MainContObsInterStateWorkmen1961Act": isSwitchedActs9,
      "MainContObsInterStateWorkmen1961ActNote": _Act9RemarksController.text,
      "IsBreakRule324": isSwitchedActs9_1,
      "IsBreakRule126": isSwitchedActs9_2,
      "IsBreakRule931": isSwitchedActs9_3,
      "IsBreakRule341": isSwitchedActs9_4,
      "IsBreakRuleS13": isSwitchedActs9_5,
      "IsBreakRuleS13Not": IsBreakRuleS13Not,
      "MainContObsInterStateWorkmen1957Act": isSwitchedActs10,
      "MainContObsInterStateWorkmen1957ActNote": _Act10RemarksController.text,
      "IsBreakRulek324": isSwitchedActs10_1,
      "IsBreakRulek17a94": isSwitchedActs10_2,
      "IsBreakRulek17a94checkbox1": empFormD,
      "IsBreakRulek17a94checkbox2": serviceFormE,
      "IsBreakRulek17a94checkbox3": leaveRegFormF,
      "IsBreakRulek17a94checkbox4": musterRollFormG,
      "IsBreakRule131425": isSwitchedActs10_3,
      "IsBreakRule131425Not": _ActR13_14_25S7NotController.text,
      "IsBreakRule131425Not1": _ActR13_14_25S7Not1Controller.text,
      "MainInspectionSalesEmployeesAct": isSwitchedActs11,
      "MainInspectionSalesEmployeesActNote": _Act11RemarksController.text,
      "IsBreakRuleS5": isSwitchedActs11_1,
      "IsBreakRuleS7": isSwitchedActs11_2,
      "IsBreakRuleS4": isSwitchedActs11_3,
      "IsBreakRuleSK4": isSwitchedActs11_4,
      "IsBreakRuleS4Not": _ActR14_15_16S4Controller.text,
      "IsNonComplianceObserved": selectedNonCompliance,
      "ApplicationStatus": 0,
      "InspectorName": _inspectorName.text,
      "InspectorEmail": _inspectorEmail.text,
      "AuthorizedPersonSignatureNote": _otherRemarksController.text,
      "IsAuthorizedPersonSignature": selectedAuthSign,
      "IsComplianceDocument": IsComplianceDocument,
      "ComplianceDocumentReceivedby": ComplianceDocumentReceivedby,
      "AuthorizedSignPath": AuthorizedSignPath,
      "InspectorSignPath": InspectorSignPath,
      "ComplianceSignPath": ComplianceSignPath,
      "InspectionSignCID": InspectionSignCID,
      "AuthorizedSignCID": AuthorizedSignCID,
      "ComplianceSignCID": ComplianceSignCID,
      "MapImagefilename": MapImagefilename,
      "MapImageCID": MapImageCID,
      "ComplianceDocumentReceivedDate": "18-08-2023",
      "StiplatedTimeLimit": selectedTimeLimit,
      "InspectionaclID": selectedReportingAuth == null ? 0 : selectedReportingAuth,
      "IsSubmit": IsSubmit,
      "latitude": latitude,
      "longitude": longitude,
      "IsOffline": IsOffline,
      "InspectionOnsitePictureXML": InspectionOnsitePictureXMLString,
      "ACTRule972DetailsRecordXML": ACTRule972DetailsRecordXMLString,
      "EmailDetailsRecordXML": EmailXMLString,
      "DID": 0,
      "IsBreakRuleSK4Not": _ActR143_144_145Controller.text
    });

    print('---$MapImagefilename');
    print('---$MapImageCID');
// "MapImagefilename": MapImagefilename,
//       "MapImageCID": MapImageCID,
    try {
      final response = await _dio.post('/MobileAppAPI/SingleSaveInspectionDetails', data: requestData);
      if (response.statusCode == 200) {
        // Parse the JSON data
        Map<String, dynamic> jsonMap = json.decode(response.data);

        // Access the "InspectionID"
        SendEmail_inspectionId = jsonMap['InspectionID'];
        // Use the inspectionID as needed
        print('InspectionID: $SendEmail_inspectionId');
        if (IsSubmit == true) {
          SendEmail(userID, SendEmail_inspectionId, IsSubmit ? 1 : 0, selectedTimeLimit);
          print("Send Email Successfully...");
        }
        CircularLoader().hide(context);
        if (isSubmitButtonClicked == true) {
          AppUtils.showSnackBar(context, 'Application Submit Successfully');
        } else {
          AppUtils.showSnackBar(context, 'Application Save Successfully');
        }

        Future.delayed(Duration(seconds: 2), () {
          Navigator.pop(context);
        });
        // Navigator.pop(context);
        return response.data;
      } else {
        CircularLoader().hide(context);
        return response.data;
      }
    } catch (e) {
      CircularLoader().hide(context);
      return;
    }
  }

  Future<bool> checkConnectivity() async {
    var connectivityResult = await Connectivity().checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }

  Future<void> offlineSetUpData() async {
    final data = await dbHelper.getRecord(dbID!);
    final tempDict = data[0];
    print(tempDict);
    print(tempDict[DatabaseHelper.EstName]);
    _reportNoController.text = tempDict[DatabaseHelper.ReportNo];
    _inspectionDateController.text = tempDict[DatabaseHelper.InspectionDate];

    selectedReportDistrict = tempDict[DatabaseHelper.District];
    selectedReportTaluka = tempDict[DatabaseHelper.Taluka];
    _pinCodeController.text = tempDict[DatabaseHelper.PinCode].toString();
    _areaController.text = tempDict[DatabaseHelper.Area];
    dropdownValue = tempDict[DatabaseHelper.InspectionType];
    print(tempDict[DatabaseHelper.IFSCNo]);
    if (dropdownValue == 1) {
      isOnline = true;
      isComplain = false;
      isUnScheduled = false;
    } else if (dropdownValue == 2) {
      isOnline = false;
      isComplain = true;
      isUnScheduled = false;
    } else if (dropdownValue == 3) {
      isOnline = false;
      isComplain = false;
      isUnScheduled = true;
    }
    _IFSCNoBaseController.text = tempDict[DatabaseHelper.IFSCNo];
    _nameOfComplain.text = tempDict[DatabaseHelper.NameComplainant];
    _subjectOfComplain.text = tempDict[DatabaseHelper.SubjectOfComplain];
    _dateOfComplain.text = tempDict[DatabaseHelper.DateOfComplain];
    selectedEstablishment = tempDict[DatabaseHelper.EstType];
    _establishmentNameController.text = tempDict[DatabaseHelper.EstName];
    _permanentAddressController.text = tempDict[DatabaseHelper.EstPermanentAdd];
    selectedDistrict = tempDict[DatabaseHelper.EstDistrict];
    selectedTaluka = tempDict[DatabaseHelper.EstTaluka];
    _est_area_Controller.text = tempDict[DatabaseHelper.EstArea];
    _est_pincode_Controller.text = tempDict[DatabaseHelper.EstPinCode].toString();
    IsFactoriesAct = tempDict[DatabaseHelper.IsFactoriesAct] == 0 ? false : true;
    IsTrustAct = tempDict[DatabaseHelper.IsTrustAct] == 0 ? false : true;
    IsEstablishmentAct = tempDict[DatabaseHelper.IsEstablishmentAct] == 0 ? false : true;
    IsLabourAct = tempDict[DatabaseHelper.IsLabourAct] == 0 ? false : true;
    IsSocietyAct = tempDict[DatabaseHelper.IsSocietyAct] == 0 ? false : true;
    IsTMTWAct1961Grul1965 = tempDict[DatabaseHelper.IsTMTWAct1961Grul1965] == 0 ? false : true;
    IsRegistrationUnderGST = tempDict[DatabaseHelper.IsRegistrationUnderGST] == 0 ? false : true;
    registerUnder = tempDict[DatabaseHelper.IsRegisteredUnder];
    _regUnderNoneOfAboveController.text = tempDict[DatabaseHelper.EstRegUnderNoneOfAbove];
    _regNo_Controller.text = tempDict[DatabaseHelper.EstRegNo];

    if (tempDict[DatabaseHelper.fileLicensePath].toString().isNotEmpty && tempDict[DatabaseHelper.fileLicensePath].toString() != "null") {
      fileLicenseProof = File(tempDict[DatabaseHelper.fileLicensePath].toString());
    }
    if (tempDict[DatabaseHelper.fileRegPath].toString().isNotEmpty && tempDict[DatabaseHelper.fileRegPath].toString() != "null") {
      fileRegProof = File(tempDict[DatabaseHelper.fileRegPath].toString());
    }

    filePathEstImageList = tempDict[DatabaseHelper.estImage].toString() == "" ? [] : tempDict[DatabaseHelper.estImage].toString().split(',');
    filePathEstDocList = tempDict[DatabaseHelper.estDocument].toString() == "" ? [] : tempDict[DatabaseHelper.estDocument].toString().split(',');

    if (tempDict[DatabaseHelper.fileAuthorizedSign] != null) {
      fileAuthorizedSign = File(tempDict[DatabaseHelper.fileAuthorizedSign]);
      _signatureImageBytes = fileAuthorizedSign?.readAsBytesSync();
    }
    if (tempDict[DatabaseHelper.fileInspectorSign] != null) {
      fileInspectorSign = File(tempDict[DatabaseHelper.fileInspectorSign]);
      _signatureInspectionBytes = fileInspectorSign?.readAsBytesSync();
    }

    _registrationDateController.text = tempDict[DatabaseHelper.EstRegDate];
    selectedIndustory = tempDict[DatabaseHelper.EstTypeofIndustry];
    print("EstselectedIndustory--$selectedIndustory");
    _maleWorkerController.text = tempDict[DatabaseHelper.EstMaleWorker].toString();
    _femaleWorkerController.text = tempDict[DatabaseHelper.EstFeMaleWorker].toString();
    _transgenderWorkerController.text = tempDict[DatabaseHelper.EstTransGenderWorker].toString();
    _totalWorkerController.text = tempDict[DatabaseHelper.EstTotalWorker].toString();
    _authorizedPersonController.text = tempDict[DatabaseHelper.EstAuthorizedPerson];
    // _authorizedPersonEmailController.text = tempDict[DatabaseHelper.EstAuthorizedPersonEmail];
    if (tempDict[DatabaseHelper.EstAuthorizedPersonEmail] != '') {
      emails = tempDict[DatabaseHelper.EstAuthorizedPersonEmail].split(',');
    } else {
      // Handle the case where AuthorizedPersonEmail is null
      // You can choose to set emails to an empty list or handle it differently based on your use case.
      emails = [];
    }
    _authorizedPersonNoController.text = tempDict[DatabaseHelper.EstAuthorizedPersonNo];
    _authorizedPersonDesignController.text = tempDict[DatabaseHelper.EstAuthorizedPersonDesign];

    EmployeeDetailsXMLString = tempDict[DatabaseHelper.EmployerXMLString].toString();
    List<dynamic> employeeList = xmlToList(EmployeeDetailsXMLString);

    if (employeeList.length > 0) {
      for (int i = 0; i < employeeList.length; i++) {
        int newIndex = employerWidgets.length;
        print("EmployeeDetailsList----${employeeList[i]["DesignationID"]}");
        employeeIds.add(int.parse(employeeList[i]["EmployeeID"] ?? 0));
        employerNameControllers.add(TextEditingController());
        empPermanentAddressControllers.add(TextEditingController());
        otherNoteControllers.add(TextEditingController());
        empDesignation.add(int.parse(employeeList[i]["DesignationID"] ?? 0));
        empAgeControllers.add(TextEditingController());

        otherNoteControllers[i].text = employeeList[i]["OtherDesignationNote"].toString();
        employerNameControllers[i].text = employeeList[i]["EmployeeName"].toString();
        empPermanentAddressControllers[i].text = employeeList[i]["PAddress"].toString();

        empAgeControllers[i].text = employeeList[i]["Age"].toString();

        addEmployerDetails(
            employerWidgets.length, employerNameControllers[newIndex], empPermanentAddressControllers[newIndex], otherNoteControllers[newIndex], empDesignation[newIndex], empAgeControllers[newIndex]);
      }
    } else {
      createNewEmployee();
    }

    ContractorDetailsXMLString = tempDict[DatabaseHelper.ContractorXMLString].toString();
    List<dynamic> ContractorDetailsList = xmlToList(ContractorDetailsXMLString);
    if (ContractorDetailsList.length > 0) {
      if (int.parse(ContractorDetailsList[0]["IsContractors"]) == 1) {
        selectContractor = 1;
        isContractor = true;
        for (int i = 0; i < ContractorDetailsList.length; i++) {
          addContractore();
          _contractorIds[i] = int.parse(ContractorDetailsList[i]["ContractorID"]);
          _ListOwnerNameTextEditingController[i].text = ContractorDetailsList[i]["ContractorName"].toString();
          print("KKKKKKKKKKKKKKKKKKKKKKKKKKKk===== ${_ListOwnerNameTextEditingController[i].text}");
          _ListCompanyNameTextEditingController[i].text = ContractorDetailsList[i]["CompanyName"].toString();
          _ListJobTypeTextEditingController[i].text = ContractorDetailsList[i]["JobType"].toString();
          _ListContractorsHasLicence[i] = int.parse(ContractorDetailsList[i]["IsLicense"]);

          _ListContractorsHasLicencebool[i] = int.parse(ContractorDetailsList[i]["IsLicense"]) == 1 ? true : false;
          _ListCommencemenDateTextEditingController[i].text = ContractorDetailsList[i]["CommencementDate"];

          _ListCompletionDateTextEditingController[i].text = ContractorDetailsList[i]["CompletionDate"];

          _ListMaleWorkerTextEditingController[i].text = ContractorDetailsList[i]["MaleCount"].toString();
          _ListFeMaleWorkerTextEditingController[i].text = ContractorDetailsList[i]["FemaleCount"].toString();
          _ListTransgenderWorkerTextEditingController[i].text = ContractorDetailsList[i]["TransgenderCount"].toString();
          _ListTotalWorkerTextEditingController[i].text = ContractorDetailsList[i]["TotalWorkerCount"].toString();
          _ListHolderContractoreDetailsModel[i].image_name = ContractorDetailsList[i]["ContractFileupload"] == null ? null : ContractorDetailsList[i]["ContractFileupload"];

          final String? path = ContractorDetailsList[i]["ContractFileupload"];
          _ListHolderContractoreDetailsModel[i].image_path = path == null ? '' : path.toString().split('/').last;
        }
      }
    }

    latitude = tempDict[DatabaseHelper.latitude];
    longitude = tempDict[DatabaseHelper.longitude];

    IsextraworkDoc = tempDict[DatabaseHelper.IsextraworkDoc];
    EmailXMLString = tempDict[DatabaseHelper.EmailDetailsRecordXML];
    //  DatabaseHelper.IsextraworkDoc: IsextraworkDoc,
    //   DatabaseHelper.EmailDetailsRecordXML: EmailXMLString,

    isSwitchedActs1 = tempDict[DatabaseHelper.isSwitchedActs1] == 0 ? false : true;

    isSwitchedActs1_1 = tempDict[DatabaseHelper.isSwitchedActs1_1] == 0 ? false : true;
    if (isSwitchedActs1_1 == true) {
      isreadOnly = false;
      _ActSection26dController.text = tempDict[DatabaseHelper.BreakRule26d1Note];
    }

    isSwitchedActs1_2 = tempDict[DatabaseHelper.isSwitchedActs1_2] == 0 ? false : true;
    isSwitchedActs1_3 = tempDict[DatabaseHelper.isSwitchedActs1_3] == 0 ? false : true;
    isSwitchedActs1_4 = tempDict[DatabaseHelper.isSwitchedActs1_4] == 0 ? false : true;
    isSwitchedActs1_5 = tempDict[DatabaseHelper.isSwitchedActs1_5] == 0 ? false : true;
    if (isSwitchedActs1_5 == true) {
      isreadOnly1_5 = false;
      _ActSection214Controller.text = tempDict[DatabaseHelper.BreakRule214FormCNote].toString();
    }
    isSwitchedActs1_6 = tempDict[DatabaseHelper.isSwitchedActs1_6] == 0 ? false : true;
    MainDivACT1WorkerDetailsXMLString = tempDict[DatabaseHelper.MainDivACT1WorkerDetailsXMLString].toString();
    List<dynamic> act1_6List = xmlToList(MainDivACT1WorkerDetailsXMLString);

    if (act1_6List.length > 0) {
      for (int i = 0; i < act1_6List.length; i++) {
        int newIndex = Act1_6Widgets.length;
        act1_6WorkerIds.add(int.parse(act1_6List[i]["ACT1MinWorkerID"]));
        act1_6RuleIds.add(int.parse(act1_6List[i]["ACTRuleID"]));
        act1_6Ids.add(int.parse(act1_6List[i]["ACTID"]));
        _Act1SrNoControllers.add(TextEditingController());
        _Act1NameControllers.add(TextEditingController());

        _Act1NameControllers[i].text = act1_6List[i]["WorkerAct1FirstName"].toString();
        Acts1_6(
          newIndex,
          _Act1SrNoControllers[newIndex],
          _Act1NameControllers[newIndex],
        );
      }
    } else {
      createAct1_6();
    }
    isSwitchedActs1_7 = tempDict[DatabaseHelper.isSwitchedActs1_7] == 0 ? false : true;
    isSwitchedActs1_8 = tempDict[DatabaseHelper.isSwitchedActs1_8] == 0 ? false : true;

    MainDivACT18WorkersDetailsXMLString = tempDict[DatabaseHelper.MainDivACT18WorkersDetailsXMLString].toString();
    List<dynamic> MainDivACT18WorkerDetailsList = xmlToList(MainDivACT18WorkersDetailsXMLString);

    if (MainDivACT18WorkerDetailsList.length > 0) {
      for (int i = 0; i < MainDivACT18WorkerDetailsList.length; i++) {
        addWorkInformation1_8();
        act1_8Rule8MinWorkerIds[i] = int.parse(MainDivACT18WorkerDetailsList[i]["ACT1Rule8MinWorkerID"]);
        act1_8RuleIds[i] = int.parse(MainDivACT18WorkerDetailsList[i]["ACTRuleID"]);
        act1_8Ids[i] = int.parse(MainDivACT18WorkerDetailsList[i]["ACTID"]);

        _ListWorkersNameTextEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8FirstName"].toString();
        _ListDesginationEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8Designation"].toString();
        _ListWorkersLenghtOfServiceEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8LengthofService"].toString();
        _ListWorkersDailyWorkingHouseEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8DailyWorkingHours"].toString();
        _ListWorkersDayMonth[i] = int.parse(MainDivACT18WorkerDetailsList[i]["Isdaymonth"]);
        print("DaliyMonthlys--${_ListWorkersDayMonth[i]}");
        if (_ListWorkersDayMonth[i] == 1) {
          _ListIsWorkersDay[i] = true;
          _ListIsWorkersMonth[i] = false;
        } else if (_ListWorkersDayMonth[i] == 2) {
          _ListIsWorkersDay[i] = false;
          _ListIsWorkersMonth[i] = true;
        }
        _ListWorkerSwagesPaidPerMonthEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaidPerMonth"].toString();
        _ListWorkerSwagesPaidPerDayEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaidPerDay"].toString();
        _ListWorkersWagesEntitledFormDateEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesEntitledfromDate"].toString();
        //  ==
        //     "0001-01-01T00:00:00"
        // ? ""
        // : DateFormat('dd-MM-yyyy').format(
        //     DateTime.parse(MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesEntitledfromDate"].toString()));
        _ListWorkersWagesPayableEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesAmount"].toString();
        _ListWorkersWagesPaidEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaid"].toString();
        _ListWorkersDiffrenceWagesAmountEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8DifferenceWagesAmount"].toString();
        _ListWorkersRemarksAmountEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8Remarks"].toString();
        _ListHolderWorkInformationModel[i].file_name =
            MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8UploadStatement"] == null ? null : MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8UploadStatement"];
        _ListHolderWorkInformationModel[i].file_path =
            MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8UploadStatementCID"] == null ? null : MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8UploadStatementCID"];
      }
    } else {
      createAct1_8();
    }

    isSwitchedActs1_9 = tempDict[DatabaseHelper.isSwitchedActs1_9] == 0 ? false : true;
    isSwitchedActs1_10 = tempDict[DatabaseHelper.isSwitchedActs1_10] == 0 ? false : true;
    isSwitchedActs1_11 = tempDict[DatabaseHelper.isSwitchedActs1_11] == 0 ? false : true;
    isSwitchedActs1_12 = tempDict[DatabaseHelper.isSwitchedActs1_12] == 0 ? false : true;
    isSwitchedActs1_13 = tempDict[DatabaseHelper.isSwitchedActs1_13] == 0 ? false : true;
    if (isSwitchedActs1_13 == true) {
      isreadOnlyRule2bYear = false;
      print(tempDict[DatabaseHelper.BreakRule26b2Year].toString());
      _ActRule2bYearController.text = tempDict[DatabaseHelper.BreakRule26b2Year].toString();
      _ActRule2bYear1Controller.text = tempDict[DatabaseHelper.BreakRule26b2Year1].toString();
    }
    isSwitchedActs1_14 = tempDict[DatabaseHelper.isSwitchedActs1_14] == 0 ? false : true;
    isSwitchedActs1_15 = tempDict[DatabaseHelper.isSwitchedActs1_15] == 0 ? false : true;
    isSwitchedActs1_16 = tempDict[DatabaseHelper.isSwitchedActs1_16] == 0 ? false : true;
    isSwitchedActs1_17 = tempDict[DatabaseHelper.isSwitchedActs1_17] == 0 ? false : true;
    isSwitchedActs1_18 = tempDict[DatabaseHelper.isSwitchedActs1_18] == 0 ? false : true;
    isSwitchedActs1_19 = tempDict[DatabaseHelper.isSwitchedActs1_19] == 0 ? false : true;

    _Act1RemarksController.text = tempDict[DatabaseHelper.Act1Remark];
    _Act2RemarksController.text = tempDict[DatabaseHelper.Act2Remark];
    _Act3RemarksController.text = tempDict[DatabaseHelper.Act3Remark];
    _Act4_principalRemarksController.text = tempDict[DatabaseHelper.Act4Remark];
    _Act4_contractorRemarksController.text = tempDict[DatabaseHelper.Act4_2Remark];
    _Act5RemarksController.text = tempDict[DatabaseHelper.Act5Remark];
    _Act6RemarksController.text = tempDict[DatabaseHelper.Act6Remark];
    _Act6_conRemarksController.text = tempDict[DatabaseHelper.Act6_2Remark];
    _Act7RemarksController.text = tempDict[DatabaseHelper.Act7Remark];
    _Act8RemarksController.text = tempDict[DatabaseHelper.Act8Remark];
    _Act9RemarksController.text = tempDict[DatabaseHelper.Act9Remark];
    _Act10RemarksController.text = tempDict[DatabaseHelper.Act10Remark];
    _Act11RemarksController.text = tempDict[DatabaseHelper.Act11Remark];

    isSwitchedActs2 = tempDict[DatabaseHelper.isSwitchedActs2] == 0 ? false : true;
    isSwitchedActs2_1 = tempDict[DatabaseHelper.isSwitchedActs2_1] == 0 ? false : true;
    ActFinancial12ListXMLString = tempDict[DatabaseHelper.ActFinancial12ListXMLString].toString();
    List<dynamic> act2_1List = xmlToList(ActFinancial12ListXMLString);

    if (act2_1List.length > 0) {
      for (int i = 0; i < act2_1List.length; i++) {
        int newIndex = Act2_1Widgets.length;
        _Act2_1FinancialYearControllers.add(TextEditingController());
        _Act2_1SrNoControllers.add(TextEditingController());
        IsFromA.add(int.parse(act2_1List[i]["ISActFinancial12ListFormA"]) == 0 ? false : true);
        IsFromB.add(int.parse(act2_1List[i]["IsActFinancial12ListFormB"]) == 0 ? false : true);
        IsFromC.add(int.parse(act2_1List[i]["IsActFinancial12ListFormC"]) == 0 ? false : true);
        IsFromD.add(int.parse(act2_1List[i]["IsActFinancial12ListFormD"]) == 0 ? false : true);
        act2_1FinancialLIstIds.add(int.parse(act2_1List[i]["ActFinancial12ListDNo"]));
        act2_1RuleIds.add(int.parse(act2_1List[i]["ACTRuleID"]));
        act2_1Ids.add(int.parse(act2_1List[i]["ACTID"]));

        _Act2_1FinancialYearControllers[i].text = act2_1List[i]["ActFinancial12ListYear"].toString();

        Acts2_1(newIndex, _Act2_1SrNoControllers[newIndex], _Act2_1FinancialYearControllers[newIndex], IsFromA[newIndex], IsFromB[newIndex], IsFromC[newIndex], IsFromD[newIndex]);
      }
    } else {
      createAct2_1();
    }

    isSwitchedActs2_2 = tempDict[DatabaseHelper.isSwitchedActs2_2] == 0 ? false : true;
    _Act2_2FinancialYearController.text = tempDict[DatabaseHelper.NoPaidBonusPersonyear];
    ACTRuleNotPaidWorkerXMLString = tempDict[DatabaseHelper.ACTRuleNotPaidWorkerXMLString].toString();
    List<dynamic> act2_2List = xmlToList(ACTRuleNotPaidWorkerXMLString);

    if (act2_2List.length > 0) {
      for (int i = 0; i < act2_2List.length; i++) {
        int newIndex = Act2_2Widgets.length;
        act2_2NotPaidWorkerDetailDNoIds.add(int.parse(act2_2List[i]["ACTRuleNotPaidWorkerDetailDNo"]));
        act2_2RuleIds.add(int.parse(act2_2List[i]["ACTRuleID"]));
        act2_2Ids.add(int.parse(act2_2List[i]["ACTID"]));
        _Act2_2WorkerNameControllers.add(TextEditingController());
        _Act2_2SrNoControllers.add(TextEditingController());
        Acts2_2(newIndex, _Act2_2SrNoControllers[newIndex], _Act2_2WorkerNameControllers[newIndex]);

        _Act2_2WorkerNameControllers[i].text = act2_2List[i]["NoPaidBonusPersonName"].toString();
      }
    } else {
      createAct2_2();
    }
    isSwitchedActs2_3 = tempDict[DatabaseHelper.isSwitchedActs2_3] == 0 ? false : true;
    if (isSwitchedActs2_3 == true) {
      isreadOnlyR4a = false;
      _ActR4aController.text = tempDict[DatabaseHelper.BreakRule4aYear].toString();
    }
    isSwitchedActs2_4 = tempDict[DatabaseHelper.isSwitchedActs2_4] == 0 ? false : true;
    if (isSwitchedActs2_4 == true) {
      isreadOnlyR4b = false;
      _ActR4bController.text = tempDict[DatabaseHelper.BreakRule4bYear].toString();
    }
    isSwitchedActs2_5 = tempDict[DatabaseHelper.isSwitchedActs2_5] == 0 ? false : true;
    if (isSwitchedActs2_5 == true) {
      isreadOnlyR4c = false;
      _ActR4cController.text = tempDict[DatabaseHelper.BreakRule4cYear].toString();
    }
    isSwitchedActs2_6 = tempDict[DatabaseHelper.isSwitchedActs2_6] == 0 ? false : true;
    if (isSwitchedActs2_6 == true) {
      isreadOnlyS26R5 = false;
      _ActS26R5Controller.text = tempDict[DatabaseHelper.BreakRule5Year].toString();
    }

    isSwitchedActs3 = tempDict[DatabaseHelper.isSwitchedActs3] == 0 ? false : true;
    isSwitchedActs3_1 = tempDict[DatabaseHelper.isSwitchedActs3_1] == 0 ? false : true;
    isSwitchedActs3_2 = tempDict[DatabaseHelper.isSwitchedActs3_2] == 0 ? false : true;
    isSwitchedActs3_3 = tempDict[DatabaseHelper.isSwitchedActs3_3] == 0 ? false : true;
    isSwitchedActs3_4 = tempDict[DatabaseHelper.isSwitchedActs3_4] == 0 ? false : true;

    _ActR32Controller.text = tempDict[DatabaseHelper.BreakRule32note].toString();

    isSwitchedActs4 = tempDict[DatabaseHelper.isSwitchedActs4] == 0 ? false : true;
    isSwitchedActs4_1_1 = tempDict[DatabaseHelper.isSwitchedActs4_1_1] == 0 ? false : true;
    isSwitchedActs4_1_2 = tempDict[DatabaseHelper.isSwitchedActs4_1_2] == 0 ? false : true;
    isSwitchedActs4_1_3 = tempDict[DatabaseHelper.isSwitchedActs4_1_3] == 0 ? false : true;
    isSwitchedActs4_1_4 = tempDict[DatabaseHelper.isSwitchedActs4_1_4] == 0 ? false : true;
    isSwitchedActs4_1_5 = tempDict[DatabaseHelper.isSwitchedActs4_1_5] == 0 ? false : true;

    if (isSwitchedActs4_1_5) {
      isreadOnlyS9a = false;
      _ActS9aLaborersController.text = tempDict[DatabaseHelper.BreakRule9kUser].toString();
      _ActS9aSnoController.text = tempDict[DatabaseHelper.BreakRule9kTotalUser].toString();
    }

    isSwitchedActs4_1_6 = tempDict[DatabaseHelper.isSwitchedActs4_1_6] == 0 ? false : true;
    if (isSwitchedActs4_1_6) {
      isreadOnlyR72 = false;
      _ActR72Controller.text = tempDict[DatabaseHelper.BreakRule72User].toString();
    }

    isSwitchedActs4_1_7 = tempDict[DatabaseHelper.isSwitchedActs4_1_7] == 0 ? false : true;
    if (isSwitchedActs4_1_7) {
      isreadOnlyS212Sno = false;
      _ActS212SnoController.text = tempDict[DatabaseHelper.BreakRule73User].toString();
    }
    isSwitchedActs4_1_8 = tempDict[DatabaseHelper.isSwitchedActs4_1_8] == 0 ? false : true;
    isSwitchedActs4_1_9 = tempDict[DatabaseHelper.isSwitchedActs4_1_9] == 0 ? false : true;
    isSwitchedActs4_1_10 = tempDict[DatabaseHelper.isSwitchedActs4_1_10] == 0 ? false : true;
    isSwitchedActs4_1_11 = tempDict[DatabaseHelper.isSwitchedActs4_1_11] == 0 ? false : true;

    changeDetailsController.text = tempDict[DatabaseHelper.ContractLabourChangeDetails].toString();
    dateModificationController.text = tempDict[DatabaseHelper.ContractLabourDateofModification].toString();

// if (_InspectionACTList[0]["ContractLabourDateofModification"].toString() != "0001-01-01T00:00:00") {
//       dateModificationController.text = DateFormat('dd-MM-yyyy')
//           .format(DateTime.parse(_InspectionACTList[0]["ContractLabourDateofModification"].toString()));
//     }

    isSwitchedActs4_1_12 = tempDict[DatabaseHelper.isSwitchedActs4_1_12] == 0 ? false : true;
    isSwitchedActs4_1_12 = tempDict[DatabaseHelper.isSwitchedActs4_1_12] == 0 ? false : true;

    ACTSharamk214DetailsXMLString = tempDict[DatabaseHelper.ACTSharamk214DetailsXMLString].toString();
    List<dynamic> MainDivACTSharamk214DetailList = xmlToList(ACTSharamk214DetailsXMLString);

    if (MainDivACTSharamk214DetailList.length > 0) {
      for (int i = 0; i < MainDivACTSharamk214DetailList.length; i++) {
        int newIndex = Act4_1_5Widgets.length;
        act4_1_5Sharamk214DNo.add(int.parse(MainDivACTSharamk214DetailList[i]["Sharamk214DNo"]));
        act4_1_5RuleIds.add(int.parse(MainDivACTSharamk214DetailList[i]["ACTRuleID"]));
        act4_1_5Ids.add(int.parse(MainDivACTSharamk214DetailList[i]["ACTID"]));
        _Act4_1_5SrNoControllers.add(TextEditingController());
        _Act4_1_5NameContractorControllers.add(TextEditingController());
        _Act4_1_5NameContractorLabourControllers.add(TextEditingController());
        WagesToPaid.add(int.parse(MainDivACTSharamk214DetailList[i]["IsSharamk214PaidWages"]));
        _Act4_1_5WagesTobePaidControllers.add(TextEditingController());
        _Act4_1_5DifferAmountControllers.add(TextEditingController());

        _Act4_1_5NameContractorControllers[i].text = MainDivACTSharamk214DetailList[i]["Sharamk214NameofContractor"].toString();
        _Act4_1_5NameContractorLabourControllers[i].text = MainDivACTSharamk214DetailList[i]["Sharamk214NameofContractLabour"].toString();
        _Act4_1_5WagesTobePaidControllers[i].text = MainDivACTSharamk214DetailList[i]["Sharamk214Wagestobepaid"].toString();
        _Act4_1_5DifferAmountControllers[i].text = MainDivACTSharamk214DetailList[i]["Sharamk214DifferentialAmounttobepaid"].toString();

        Act4_1_5(
          newIndex,
          _Act4_1_5SrNoControllers[newIndex],
          _Act4_1_5NameContractorControllers[newIndex],
          _Act4_1_5NameContractorLabourControllers[newIndex],
          WagesToPaid[newIndex],
          _Act4_1_5WagesTobePaidControllers[newIndex],
          _Act4_1_5DifferAmountControllers[newIndex],
        );
      }
    } else {
      createAct4_1_5();
    }
    isSwitchedActs4_2_1 = tempDict[DatabaseHelper.isSwitchedActs4_2_1] == 0 ? false : true;
    isSwitchedActs4_2_2 = tempDict[DatabaseHelper.isSwitchedActs4_2_2] == 0 ? false : true;
    isSwitchedActs4_2_3 = tempDict[DatabaseHelper.isSwitchedActs4_2_3] == 0 ? false : true;
    isSwitchedActs4_2_4 = tempDict[DatabaseHelper.isSwitchedActs4_2_4] == 0 ? false : true;
    isSwitchedActs4_2_5 = tempDict[DatabaseHelper.isSwitchedActs4_2_5] == 0 ? false : true;
    isSwitchedActs4_2_6 = tempDict[DatabaseHelper.isSwitchedActs4_2_6] == 0 ? false : true;
    isSwitchedActs4_2_7 = tempDict[DatabaseHelper.isSwitchedActs4_2_7] == 0 ? false : true;
    isSwitchedActs4_2_8 = tempDict[DatabaseHelper.isSwitchedActs4_2_8] == 0 ? false : true;
    isSwitchedActs4_2_9 = tempDict[DatabaseHelper.isSwitchedActs4_2_9] == 0 ? false : true;
    isSwitchedActs4_2_10 = tempDict[DatabaseHelper.isSwitchedActs4_2_10] == 0 ? false : true;
    isSwitchedActs4_2_11 = tempDict[DatabaseHelper.isSwitchedActs4_2_11] == 0 ? false : true;
    isSwitchedActs4_2_12 = tempDict[DatabaseHelper.isSwitchedActs4_2_12] == 0 ? false : true;
    isSwitchedActs4_2_13 = tempDict[DatabaseHelper.isSwitchedActs4_2_13] == 0 ? false : true;
    isSwitchedActs4_2_14 = tempDict[DatabaseHelper.isSwitchedActs4_2_14] == 0 ? false : true;
    isSwitchedActs4_2_15 = tempDict[DatabaseHelper.isSwitchedActs4_2_15] == 0 ? false : true;
    isSwitchedActs4_2_16 = tempDict[DatabaseHelper.isSwitchedActs4_2_16] == 0 ? false : true;
    isSwitchedActs4_2_17 = tempDict[DatabaseHelper.isSwitchedActs4_2_17] == 0 ? false : true;
    isSwitchedActs4_2_18 = tempDict[DatabaseHelper.isSwitchedActs4_2_18] == 0 ? false : true;
    isSwitchedActs4_2_19 = tempDict[DatabaseHelper.isSwitchedActs4_2_19] == 0 ? false : true;
    isSwitchedActs4_2_20 = tempDict[DatabaseHelper.isSwitchedActs4_2_20] == 0 ? false : true;

    if (isSwitchedActs4_2_5) {
      isreadOnlyS211R65 = false;

      _ActS211R65Controller.text = tempDict[DatabaseHelper.BreakRuleS211k65Year].toString();
    }
    if (isSwitchedActs4_2_10) {
      isreadOnlyS122R25 = false;
      _ActS122R25Controller.text = tempDict[DatabaseHelper.IsBreakRuleS122k25LicNo].toString();
    }

    ACTRuleS211k65DetailsXMLString = tempDict[DatabaseHelper.ACTRuleS211k65DetailsXMLString].toString();
    List<dynamic> MainDivACTIsBreakRuleS211k65DetailList = xmlToList(ACTRuleS211k65DetailsXMLString);

    if (MainDivACTIsBreakRuleS211k65DetailList.length > 0) {
      for (int i = 0; i < MainDivACTIsBreakRuleS211k65DetailList.length; i++) {
        int newIndex = Act4_2_5Widgets.length;
        act4_2_5ACTIsBreakRuleS211k65DNo.add(int.parse(MainDivACTIsBreakRuleS211k65DetailList[i]["ACTIsBreakRuleS211k65DNo"]));
        act4_2_5RuleIds.add(int.parse(MainDivACTIsBreakRuleS211k65DetailList[i]["ACTRuleID"]));
        act4_2_5Ids.add(int.parse(MainDivACTIsBreakRuleS211k65DetailList[i]["ACTID"]));
        _Act4_2_5SrNoControllers.add(TextEditingController());
        _Act4_2_5NameContractorControllers.add(TextEditingController());

        _Act4_2_5NameContractorControllers[i].text = MainDivACTIsBreakRuleS211k65DetailList[i]["ACTIsBreakRuleS211k65Contractorname"].toString();

        Act4_2_5(newIndex, _Act4_2_5SrNoControllers[newIndex], _Act4_2_5NameContractorControllers[newIndex]);
      }
    } else {
      createAct4_2_5();
    }

    isSwitchedActs5 = tempDict[DatabaseHelper.isSwitchedActs5] == 0 ? false : true;
    isSwitchedActs5_1 = tempDict[DatabaseHelper.isSwitchedActs5_1] == 0 ? false : true;
    isSwitchedActs5_2 = tempDict[DatabaseHelper.isSwitchedActs5_2] == 0 ? false : true;
    isSwitchedActs5_3 = tempDict[DatabaseHelper.isSwitchedActs5_3] == 0 ? false : true;
    isSwitchedActs5_4 = tempDict[DatabaseHelper.isSwitchedActs5_4] == 0 ? false : true;

    ACTWorkerDetailsXMLString = tempDict[DatabaseHelper.ACTWorkerDetailsXMLString].toString();
    List<dynamic> ACTRuleWorkerList = xmlToList(ACTWorkerDetailsXMLString);

// List ACTRuleWorkerList = json["_InspectionACTRuleWorkerList"];

    if (ACTRuleWorkerList.length > 0) {
      for (int i = 0; i < ACTRuleWorkerList.length; i++) {
        int newIndex = Act5_4Widgets.length;
        act5_4RuleIds.add(int.parse(ACTRuleWorkerList[i]["ACTRuleID"]));
        act5_4Ids.add(int.parse(ACTRuleWorkerList[i]["ACTID"]));
        _Act5_4SrNoControllers.add(TextEditingController());
        _Act5_4MaleWorkersControllers.add(TextEditingController());
        _Act5_4MDesgControllers.add(TextEditingController());
        _Act5_4MSalaryPaidControllers.add(TextEditingController());
        _Act5_4FemaleWorkersControllers.add(TextEditingController());
        _Act5_4FDesgControllers.add(TextEditingController());
        _Act5_4FSalaryPaidControllers.add(TextEditingController());

        _Act5_4MaleWorkersControllers[i].text = ACTRuleWorkerList[i]["MaleWorkerName"].toString();
        _Act5_4MDesgControllers[i].text = ACTRuleWorkerList[i]["MDesignation"].toString();
        _Act5_4MSalaryPaidControllers[i].text = ACTRuleWorkerList[i]["MSalarypaid"].toString();
        _Act5_4FemaleWorkersControllers[i].text = ACTRuleWorkerList[i]["FemaleWorkerName"].toString();
        _Act5_4FDesgControllers[i].text = ACTRuleWorkerList[i]["FDesignation"].toString();
        _Act5_4FSalaryPaidControllers[i].text = ACTRuleWorkerList[i]["FSalarypaid"].toString();
        Act5_4(newIndex, _Act5_4SrNoControllers[newIndex], _Act5_4MaleWorkersControllers[newIndex], _Act5_4MDesgControllers[newIndex], _Act5_4MSalaryPaidControllers[newIndex],
            _Act5_4FemaleWorkersControllers[newIndex], _Act5_4FDesgControllers[newIndex], _Act5_4FSalaryPaidControllers[newIndex]);
      }
    } else {
      createAct5_4();
    }
    isSwitchedActs6 = tempDict[DatabaseHelper.isSwitchedActs6] == 0 ? false : true;
    isSwitchedActs6_1_1 = tempDict[DatabaseHelper.isSwitchedActs6_1_1] == 0 ? false : true;
    isSwitchedActs6_1_2 = tempDict[DatabaseHelper.isSwitchedActs6_1_2] == 0 ? false : true;
    isSwitchedActs6_1_3 = tempDict[DatabaseHelper.isSwitchedActs6_1_3] == 0 ? false : true;
    isSwitchedActs6_1_4 = tempDict[DatabaseHelper.isSwitchedActs6_1_4] == 0 ? false : true;
    isSwitchedActs6_1_5 = tempDict[DatabaseHelper.isSwitchedActs6_1_5] == 0 ? false : true;
    isSwitchedActs6_1_6 = tempDict[DatabaseHelper.isSwitchedActs6_1_6] == 0 ? false : true;
    isSwitchedActs6_1_7 = tempDict[DatabaseHelper.isSwitchedActs6_1_7] == 0 ? false : true;
    isSwitchedActs6_2_1 = tempDict[DatabaseHelper.isSwitchedActs6_2_1] == 0 ? false : true;
    isSwitchedActs6_2_2 = tempDict[DatabaseHelper.isSwitchedActs6_2_2] == 0 ? false : true;
    isSwitchedActs6_2_3 = tempDict[DatabaseHelper.isSwitchedActs6_2_3] == 0 ? false : true;

    if (isSwitchedActs6_1_3 == true) {
      isreadOnlyR6 = false;
      _ActR6Controller.text = tempDict[DatabaseHelper.IsBreakRuleK6Not1].toString();
    }
    if (isSwitchedActs6_1_4 == true) {
      isreadOnlyS172R34 = false;
      _ActS172R34Controller.text = tempDict[DatabaseHelper.IsBreakRule35Not1].toString();
      _ActS172R34Controller.text = tempDict[DatabaseHelper.IsBreakRule35Not1].toString();
    }

    ACTContractPersonDetailsXMLString = tempDict[DatabaseHelper.ACTContractPersonDetailsXMLString].toString();
    List<dynamic> ActRuleContractPersonDetailsList = xmlToList(ACTContractPersonDetailsXMLString);

    // List ActRuleContractPersonDetailsList = json["_inspectionActRuleContractPersonDetailsList"];

    if (ActRuleContractPersonDetailsList.length > 0) {
      for (int i = 0; i < ActRuleContractPersonDetailsList.length; i++) {
        int newIndex = Act6Widgets.length;
        act6ContractorPersonDetailsDetailDNo.add(int.parse(ActRuleContractPersonDetailsList[i]["ContractorPersonDetailsDetailDNo"]));
        act6RuleIds.add(int.parse(ActRuleContractPersonDetailsList[i]["ACTRuleID"]));
        act6Ids.add(int.parse(ActRuleContractPersonDetailsList[i]["ACTID"]));
        _Act6SrNoControllers.add(TextEditingController());
        _Act6NameContractorControllers.add(TextEditingController());
        _Act6AddressControllers.add(TextEditingController());
        _Act6DetailsWorkControllers.add(TextEditingController());
        currentTimeSinceDates.add(DateTime.now());
        _Act6TimeSinceControllers.add(TextEditingController());
        _Act6NoWorkersControllers.add(TextEditingController());
        _Act6TotalNoWorkersControllers.add(TextEditingController());

        _Act6NameContractorControllers[i].text = ActRuleContractPersonDetailsList[i]["ContractPersonName"].toString();
        _Act6AddressControllers[i].text = ActRuleContractPersonDetailsList[i]["ContractPersonDetailsPAddress"].toString();
        _Act6DetailsWorkControllers[i].text = ActRuleContractPersonDetailsList[i]["Detailswork"].toString();
        _Act6TimeSinceControllers[i].text = ActRuleContractPersonDetailsList[i]["initiationwork"].toString();
        //  == "0001-01-01T00:00:00"
        //     ? ""
        //     : DateFormat('dd-MM-yyyy')
        //         .format(DateTime.parse(ActRuleContractPersonDetailsList[i]["initiationwork"].toString()));
        _Act6NoWorkersControllers[i].text = ActRuleContractPersonDetailsList[i]["Noofworkersemployed"].toString();
        _Act6TotalNoWorkersControllers[i].text = ActRuleContractPersonDetailsList[i]["Totalnumberofworkers"].toString();

        Act6(
          newIndex,
          _Act6SrNoControllers[newIndex],
          _Act6NameContractorControllers[newIndex],
          _Act6AddressControllers[newIndex],
          _Act6DetailsWorkControllers[newIndex],
          currentTimeSinceDates[newIndex],
          _Act6TimeSinceControllers[newIndex],
          _Act6NoWorkersControllers[newIndex],
          _Act6TotalNoWorkersControllers[newIndex],
        );
      }
    } else {
      createAct6();
    }
    isSwitchedActs7 = tempDict[DatabaseHelper.isSwitchedActs7] == 0 ? false : true;
    isSwitchedActs7_1_1 = tempDict[DatabaseHelper.isSwitchedActs7_1_1] == 0 ? false : true;
    isSwitchedActs7_1_2 = tempDict[DatabaseHelper.isSwitchedActs7_1_2] == 0 ? false : true;
    isSwitchedActs7_1_3 = tempDict[DatabaseHelper.isSwitchedActs7_1_3] == 0 ? false : true;
    isSwitchedActs7_2_1 = tempDict[DatabaseHelper.isSwitchedActs7_2_1] == 0 ? false : true;
    isSwitchedActs7_2_2 = tempDict[DatabaseHelper.isSwitchedActs7_2_2] == 0 ? false : true;
    isSwitchedActs7_2_3 = tempDict[DatabaseHelper.isSwitchedActs7_2_3] == 0 ? false : true;
    isSwitchedActs7_2_4 = tempDict[DatabaseHelper.isSwitchedActs7_2_4] == 0 ? false : true;

    ACTRule972DetailsRecordXMLString = tempDict[DatabaseHelper.ACTRule972DetailsRecordXMLString].toString();
    List<dynamic> MainDivACTRule972DetailDetailList = xmlToList(ACTRule972DetailsRecordXMLString);

    if (MainDivACTRule972DetailDetailList.length > 0) {
      for (int i = 0; i < MainDivACTRule972DetailDetailList.length; i++) {
        int newIndex = Act7_3Widgets.length;
        act7_3ACTIsBreakRule972DetailDNo.add(int.parse(MainDivACTRule972DetailDetailList[i]["ACTIsBreakRule972DetailDNo"]));
        act7_3RuleIds.add(int.parse(MainDivACTRule972DetailDetailList[i]["ACTRuleID"]));
        act7_3Ids.add(int.parse(MainDivACTRule972DetailDetailList[i]["ACTID"]));
        _Act7_3SrNoControllers.add(TextEditingController());
        _Act7_3NameAdolescentLabourControllers.add(TextEditingController());
        _Act7_3AddressControllers.add(TextEditingController());
        _Act7_3AgeControllers.add(TextEditingController());

        _Act7_3NameAdolescentLabourControllers[i].text = MainDivACTRule972DetailDetailList[i]["ACTIsBreakRule972NameofAdolescentLabour"].toString();
        _Act7_3AddressControllers[i].text = MainDivACTRule972DetailDetailList[i]["ACTIsBreakRule972DetailAddress"].toString();
        _Act7_3AgeControllers[i].text = MainDivACTRule972DetailDetailList[i]["ACTIsBreakRule972DetailAge"].toString();

        Act7_3(
          newIndex,
          _Act7_3SrNoControllers[newIndex],
          _Act7_3NameAdolescentLabourControllers[newIndex],
          _Act7_3AddressControllers[newIndex],
          _Act7_3AgeControllers[newIndex],
        );
      }
    } else {
      createAct7_3();
    }
    ACTRule973DetailsXMLString = tempDict[DatabaseHelper.ACTRule973DetailsXMLString].toString();
    List<dynamic> MainDivACTRule973DetailDetailList = xmlToList(ACTRule973DetailsXMLString);

    if (MainDivACTRule973DetailDetailList.length > 0) {
      for (int i = 0; i < MainDivACTRule973DetailDetailList.length; i++) {
        int newIndex = Act7_2_4Widgets.length;
        act7_4ACTIsBreakRule973DetailDNo.add(int.parse(MainDivACTRule973DetailDetailList[i]["ACTIsBreakRule973DetailDNo"]));
        act7_4RuleIds.add(int.parse(MainDivACTRule973DetailDetailList[i]["ACTRuleID"]));
        act7_4Ids.add(int.parse(MainDivACTRule973DetailDetailList[i]["ACTID"]));
        _Act7_2_4SrNoControllers.add(TextEditingController());
        _Act7_2_4NameAdolescentLabourControllers.add(TextEditingController());
        _Act7_2_4AddressControllers.add(TextEditingController());
        _Act7_2_4AgeControllers.add(TextEditingController());

        _Act7_2_4NameAdolescentLabourControllers[i].text = MainDivACTRule973DetailDetailList[i]["ACTIsBreakRule973NameofAdolescentLabour"].toString();
        _Act7_2_4AddressControllers[i].text = MainDivACTRule973DetailDetailList[i]["ACTIsBreakRule973DetailAddress"].toString();
        _Act7_2_4AgeControllers[i].text = MainDivACTRule973DetailDetailList[i]["ACTIsBreakRule973DetailAge"].toString();

        Act7_2_4(
          newIndex,
          _Act7_2_4SrNoControllers[newIndex],
          _Act7_2_4NameAdolescentLabourControllers[newIndex],
          _Act7_2_4AddressControllers[newIndex],
          _Act7_2_4AgeControllers[newIndex],
        );
      }
    } else {
      createAct7_2_4();
    }

    ACTRuleWorkmen17XMLString = tempDict[DatabaseHelper.ACTRuleWorkmen17XMLString].toString();
    List<dynamic> ACTRuleWorkmenList = xmlToList(ACTRuleWorkmen17XMLString);
    if (ACTRuleWorkmenList.length > 0) {
      for (int i = 0; i < ACTRuleWorkmenList.length; i++) {
        int newIndex = Act7_1_3Widgets.length;
        act7_5WorkemenSrNo.add(int.parse(ACTRuleWorkmenList[i]["WorkemenSrNo"]));
        act7_5RuleIds.add(int.parse(ACTRuleWorkmenList[i]["ACTRuleID"]));
        act7_5Ids.add(int.parse(ACTRuleWorkmenList[i]["ACTID"]));
        _Act7_1_3SrNoControllers.add(TextEditingController());
        _Act7_1_3NameChildLabourControllers.add(TextEditingController());
        _Act7_1_3AddressControllers.add(TextEditingController());
        _Act7_1_3AgeControllers.add(TextEditingController());

        _Act7_1_3NameChildLabourControllers[i].text = ACTRuleWorkmenList[i]["NameofChildLabour"].toString();
        _Act7_1_3AddressControllers[i].text = ACTRuleWorkmenList[i]["ChildPAddress"].toString();
        _Act7_1_3AgeControllers[i].text = ACTRuleWorkmenList[i]["childAge"].toString();

        Act7_1_3(
          newIndex,
          _Act7_1_3SrNoControllers[newIndex],
          _Act7_1_3NameChildLabourControllers[newIndex],
          _Act7_1_3AddressControllers[newIndex],
          _Act7_1_3AgeControllers[newIndex],
        );
      }
    } else {
      createAct7_5();
    }
    isSwitchedActs8 = tempDict[DatabaseHelper.isSwitchedActs8] == 0 ? false : true;
    isSwitchedActs8_1 = tempDict[DatabaseHelper.isSwitchedActs8_1] == 0 ? false : true;
    isSwitchedActs8_2 = tempDict[DatabaseHelper.isSwitchedActs8_2] == 0 ? false : true;
    isSwitchedActs8_3 = tempDict[DatabaseHelper.isSwitchedActs8_3] == 0 ? false : true;

    ACTRuleDesignationXMLString = tempDict[DatabaseHelper.ACTRuleDesignationXMLString].toString();
    List<dynamic> ACTRuleDesignationDetalisList = xmlToList(ACTRuleDesignationXMLString);
    // List ACTRuleDesignationDetalisList = json["_InspectionACTRuleDesignationDetalisList"];

    if (ACTRuleDesignationDetalisList.length > 0) {
      for (int i = 0; i < ACTRuleDesignationDetalisList.length; i++) {
        int newIndex = Act8_3Widgets.length;
        act8_3dessrno.add(int.parse(ACTRuleDesignationDetalisList[i]["dessrno"]));
        act8_3RuleIds.add(int.parse(ACTRuleDesignationDetalisList[i]["ACTRuleID"]));
        act8_3Ids.add(int.parse(ACTRuleDesignationDetalisList[i]["ACTID"]));
        _Act8_3SrNoControllers.add(TextEditingController());
        _Act8_3NameControllers.add(TextEditingController());
        _Act8_3DesgControllers.add(TextEditingController());
        current_suspensionDates.add(DateTime.now());
        _Act8_3DateSuspensionControllers.add(TextEditingController());

        _Act8_3NameControllers[i].text = ACTRuleDesignationDetalisList[i]["DegprofileName"].toString();
        _Act8_3DesgControllers[i].text = ACTRuleDesignationDetalisList[i]["DesignationName"].toString();
        _Act8_3DateSuspensionControllers[i].text = ACTRuleDesignationDetalisList[i]["Dateofsuspension"].toString();
        //  == "0001-01-01T00:00:00"
        //     ? ""
        //     : DateFormat('dd-MM-yyyy')
        //         .format(DateTime.parse(ACTRuleDesignationDetalisList[i]["Dateofsuspension"].toString()));

        Act8_3(
          newIndex,
          _Act8_3SrNoControllers[newIndex],
          _Act8_3NameControllers[newIndex],
          _Act8_3DesgControllers[newIndex],
          current_suspensionDates[newIndex],
          _Act8_3DateSuspensionControllers[newIndex],
        );
      }
    } else {
      createAct8_3();
    }

    isSwitchedActs8 = tempDict[DatabaseHelper.isSwitchedActs8] == 0 ? false : true;

    isSwitchedActs9 = tempDict[DatabaseHelper.isSwitchedActs9] == 0 ? false : true;
    isSwitchedActs9_1 = tempDict[DatabaseHelper.isSwitchedActs9_1] == 0 ? false : true;
    isSwitchedActs9_2 = tempDict[DatabaseHelper.isSwitchedActs9_2] == 0 ? false : true;
    isSwitchedActs9_3 = tempDict[DatabaseHelper.isSwitchedActs9_3] == 0 ? false : true;
    isSwitchedActs9_4 = tempDict[DatabaseHelper.isSwitchedActs9_4] == 0 ? false : true;
    isSwitchedActs9_5 = tempDict[DatabaseHelper.isSwitchedActs9_5] == 0 ? false : true;

    isSwitchedActs10 = tempDict[DatabaseHelper.isSwitchedActs10] == 0 ? false : true;
    isSwitchedActs10_1 = tempDict[DatabaseHelper.isSwitchedActs10_1] == 0 ? false : true;
    isSwitchedActs10_2 = tempDict[DatabaseHelper.isSwitchedActs10_2] == 0 ? false : true;
    isSwitchedActs10_3 = tempDict[DatabaseHelper.isSwitchedActs10_3] == 0 ? false : true;
    if (isSwitchedActs10_3 == true) {
      isreadOnlyR13_14_25S7 = false;

      _ActR13_14_25S7NotController.text = tempDict[DatabaseHelper.IsBreakRule131425Not].toString();
      _ActR13_14_25S7Not1Controller.text = tempDict[DatabaseHelper.IsBreakRule131425Not1].toString();
    }

    empFormD = tempDict[DatabaseHelper.IsBreakRulek17a94checkbox1] == 0 ? false : true;
    serviceFormE = tempDict[DatabaseHelper.IsBreakRulek17a94checkbox2] == 0 ? false : true;
    leaveRegFormF = tempDict[DatabaseHelper.IsBreakRulek17a94checkbox3] == 0 ? false : true;
    musterRollFormG = tempDict[DatabaseHelper.IsBreakRulek17a94checkbox4] == 0 ? false : true;

    isSwitchedActs11 = tempDict[DatabaseHelper.isSwitchedActs11] == 0 ? false : true;
    isSwitchedActs11_1 = tempDict[DatabaseHelper.isSwitchedActs11_1] == 0 ? false : true;
    isSwitchedActs11_2 = tempDict[DatabaseHelper.isSwitchedActs11_2] == 0 ? false : true;
    isSwitchedActs11_3 = tempDict[DatabaseHelper.isSwitchedActs11_3] == 0 ? false : true;
    if (isSwitchedActs11_3 == true) {
      isreadOnlyR14_15_16S4 = false;
      _ActR14_15_16S4Controller.text = tempDict[DatabaseHelper.IsBreakRuleS4Not].toString();
    }
    isSwitchedActs11_4 = tempDict[DatabaseHelper.isSwitchedActs11_4] == 0 ? false : true;
    if (isSwitchedActs11_4 == true) {
      isreadONOnly143_144_145 = false;
      _ActR143_144_145Controller.text = tempDict[DatabaseHelper.IsBreakRuleSK4Not].toString();
    }

    ACTRuleMainDivEmployeesXMLString = tempDict[DatabaseHelper.ACTRuleMainDivEmployeesXMLString].toString();
    List<dynamic> MainDivEmployeesDetailsList = xmlToList(ACTRuleMainDivEmployeesXMLString);

    if (MainDivEmployeesDetailsList.length > 0) {
      for (int i = 0; i < MainDivEmployeesDetailsList.length; i++) {
        int newIndex = Act11_1Widgets.length;
        act11_1EmployeesActNo.add(int.parse(MainDivEmployeesDetailsList[i]["EmployeesActNo"]));
        act11_1RuleIds.add(int.parse(MainDivEmployeesDetailsList[i]["ACTRuleID"]));
        act11_1Ids.add(int.parse(MainDivEmployeesDetailsList[i]["ACTID"]));
        _Act11_1SrNoControllers.add(TextEditingController());
        _Act11_1NameControllers.add(TextEditingController());
        _Act11_1DesgControllers.add(TextEditingController());
        _Act11_1DesgControllers.add(TextEditingController());
        current_appointmentDates.add(DateTime.now());
        _Act11_1DateAppointmentControllers.add(TextEditingController());

        _Act11_1NameControllers[i].text = MainDivEmployeesDetailsList[i]["EmployeesActName"].toString();
        _Act11_1DesgControllers[i].text = MainDivEmployeesDetailsList[i]["EmployeesActDesignation"].toString();
        _Act11_1DateAppointmentControllers[i].text = MainDivEmployeesDetailsList[i]["EmployeesActDateofappointment"].toString();
        // == "0001-01-01T00:00:00"
        //     ? ""
        //     : DateFormat('dd-MM-yyyy')
        //         .format(DateTime.parse(MainDivEmployeesDetailsList[i]["EmployeesActDateofappointment"].toString()));

        Act11_1(
          newIndex,
          _Act11_1SrNoControllers[newIndex],
          _Act11_1NameControllers[newIndex],
          _Act11_1DesgControllers[newIndex],
          current_appointmentDates[newIndex],
          _Act11_1DateAppointmentControllers[newIndex],
        );
      }
    } else {
      createAct11_1();
    }
    selectedAuthSign = tempDict[DatabaseHelper.authSign];
    isAuthSign = selectedAuthSign == 0 ? false : true;
    _otherRemarksController.text = tempDict[DatabaseHelper.remarks].toString();
    selectedNonCompliance = tempDict[DatabaseHelper.non_compliance];
    selectedTimeLimit = tempDict[DatabaseHelper.stipulatedTimeLimit];
    selectedReportingAuth = tempDict[DatabaseHelper.reportingAuth];
    isLoadingStream.add(false);
  }

  Future<void> setUpData() async {
    String? DropDownData = await _preferences.getInspectionViewDetails();
    print(DropDownData);
    // Convert string to JSON
    Map<String, dynamic> json = jsonDecode(DropDownData!);
    List _inspectionList = json['_inspectionList'];
    print('TalukaID====${_inspectionList[0]["TalukaID"]}');

    _inspectorName.text = _inspectionList[0]["InspectorName"];
    _inspectorEmail.text = _inspectionList[0]["InspectorEmail"];
    _reportNoController.text = _inspectionList[0]["ReportNo"] ?? '';
    _inspectionDateController.text = DateFormat('dd-MM-yyyy').format(DateTime.parse(_inspectionList[0]["InspectionDate"] ?? ''));
    getDropDown();
    getDisctict();
    if (Type == "view") {
      authKey();
      GetTalukaList(selectedReportDistrict);
    }
    selectedReportTaluka = (_inspectionList[0]["TalukaID"] ?? 0) > 0 ? _inspectionList[0]["TalukaID"] : null;
    _pinCodeController.text = _inspectionList[0]["Pincode"].toString();
    _areaController.text = _inspectionList[0]["InspectAreaName"].toString();
    dropdownValue = (_inspectionList[0]["InspectionType"] ?? 0) > 0 ? _inspectionList[0]["InspectionType"] : null;
    if (dropdownValue == 1) {
      isOnline = true;
      isComplain = false;
      isUnScheduled = false;
    } else if (dropdownValue == 2) {
      isOnline = false;
      isComplain = true;
      isUnScheduled = false;
    } else if (dropdownValue == 3) {
      isOnline = false;
      isComplain = false;
      isUnScheduled = true;
    }
    _IFSCNoBaseController.text = _inspectionList[0]["IFPApplicationNo"].toString();
    _dateOfComplain.text = DateFormat('dd-MM-yyyy').format(DateTime.parse(_inspectionList[0]["ComplainDate"] ?? ''));
    _subjectOfComplain.text = _inspectionList[0]["ComplainSubject"].toString();
    _nameOfComplain.text = _inspectionList[0]["ComplainName"].toString();

    List EstablishmentsDetailsList = json['_inspectionEstablishmentsDetailsList'];
    EID = EstablishmentsDetailsList[0]["EID"];
    _establishmentNameController.text = EstablishmentsDetailsList[0]["EstablishmentName"].toString();
    _permanentAddressController.text = EstablishmentsDetailsList[0]["PAddress"].toString();
    selectedDistrict = EstablishmentsDetailsList[0]["DistrictID"];
    if (Type == "view" || Type == "edit") {
      authKey();
      GetEstablishTalukaList(selectedDistrict);
    }
    LicensepProofDoc = EstablishmentsDetailsList[0]["LicensepProofDoc"] == null ? "" : EstablishmentsDetailsList[0]["LicensepProofDoc"];
    LicensepProofCID = EstablishmentsDetailsList[0]["LicensepProofCID"] == null ? "" : EstablishmentsDetailsList[0]["LicensepProofCID"];
    RegistrationDoc = EstablishmentsDetailsList[0]["RegistrationDoc"] == null ? "" : EstablishmentsDetailsList[0]["RegistrationDoc"];
    RegistrationCID = EstablishmentsDetailsList[0]["RegistrationCID"] == null ? "" : EstablishmentsDetailsList[0]["RegistrationCID"];
    selectedTaluka = (EstablishmentsDetailsList[0]["TalukaID"] ?? 0) > 0 ? EstablishmentsDetailsList[0]["TalukaID"] : null;
    _est_area_Controller.text = EstablishmentsDetailsList[0]["InspectEstAreaName"].toString();
    _est_pincode_Controller.text = EstablishmentsDetailsList[0]["Pincode"].toString();
    IsFactoriesAct = EstablishmentsDetailsList[0]["IsFactoriesAct"] ?? false;
    IsTrustAct = EstablishmentsDetailsList[0]["IsTrustAct"] ?? false;
    IsEstablishmentAct = EstablishmentsDetailsList[0]["IsEstablishmentAct"] ?? false;
    IsLabourAct = EstablishmentsDetailsList[0]["IsLabourAct"] ?? false;
    IsSocietyAct = EstablishmentsDetailsList[0]["IsSocietyAct"] ?? false;
    IsTMTWAct1961Grul1965 = EstablishmentsDetailsList[0]["IsTMTWAct1961Grul1965"] ?? false;
    IsRegistrationUnderGST = EstablishmentsDetailsList[0]["IsRegistrationunderGST"] ?? false;
    registerUnder = EstablishmentsDetailsList[0]["IsRegisteredUnder"];
    _regUnderNoneOfAboveController.text = EstablishmentsDetailsList[0]["RegisteredUnder"].toString();
    _regNo_Controller.text = EstablishmentsDetailsList[0]["RegistrationNumber"].toString();
    _registrationDateController.text = EstablishmentsDetailsList[0]["RegistrationDate"].toString() == "0001-01-01T00:00:00"
        ? ""
        : DateFormat('dd-MM-yyyy').format(DateTime.parse(EstablishmentsDetailsList[0]["RegistrationDate"].toString()));
    selectedIndustory = (EstablishmentsDetailsList[0]["IndustrytypeID"] ?? 0) > 0 ? EstablishmentsDetailsList[0]["IndustrytypeID"] : null;
    print("EstIndisutroy---$selectedIndustory");
    _EstOtherController.text = EstablishmentsDetailsList[0]["Mentionbelow"].toString();
    _maleWorkerController.text = EstablishmentsDetailsList[0]["MaleCount"].toString();
    _femaleWorkerController.text = EstablishmentsDetailsList[0]["FemaleCount"].toString();
    _transgenderWorkerController.text = EstablishmentsDetailsList[0]["TransgenderCount"].toString();
    _totalWorkerController.text = EstablishmentsDetailsList[0]["TotalEmployees"].toString();
    _authorizedPersonController.text = EstablishmentsDetailsList[0]["AuthorizedPersonName"].toString();
    //_authorizedPersonEmailController.text = EstablishmentsDetailsList[0]["AuthorizedPersonEmail"].toString();
    if (EstablishmentsDetailsList[0]["AuthorizedPersonEmail"] != null) {
      emails = EstablishmentsDetailsList[0]["AuthorizedPersonEmail"].split(',');
    } else {
      // Handle the case where AuthorizedPersonEmail is null
      // You can choose to set emails to an empty list or handle it differently based on your use case.
      emails = [];
    }
    // List<String> emailList = emailString.split(',');
    _authorizedPersonNoController.text = EstablishmentsDetailsList[0]["AuthorizedPersonContactNo"].toString();
    _authorizedPersonDesignController.text = EstablishmentsDetailsList[0]["AuthorizedPersonDesignation"].toString();

    List EmployeeDetailsList = json['_inspectionEstablishmentEmployeeDetailsList'];

    if (EmployeeDetailsList.length > 0) {
      for (int i = 0; i < EmployeeDetailsList.length; i++) {
        int newIndex = employerWidgets.length;
        print("EmployeeDetailsList----${EmployeeDetailsList[i]["DesignationID"]}");
        employeeIds.add(EmployeeDetailsList[i]["EmployeeID"] ?? 0);
        employerNameControllers.add(TextEditingController());
        empPermanentAddressControllers.add(TextEditingController());
        otherNoteControllers.add(TextEditingController());
        empDesignation.add(EmployeeDetailsList[i]["DesignationID"]);
        empAgeControllers.add(TextEditingController());

        otherNoteControllers[i].text = EmployeeDetailsList[i]["OtherDesignationNote"].toString();
        employerNameControllers[i].text = EmployeeDetailsList[i]["EmployeeName"].toString();
        empPermanentAddressControllers[i].text = EmployeeDetailsList[i]["PAddress"].toString();
        empDesignation[i] = EmployeeDetailsList[i]["DesignationID"];
        empAgeControllers[i].text = EmployeeDetailsList[i]["Age"].toString();

        addEmployerDetails(
            employerWidgets.length, employerNameControllers[newIndex], empPermanentAddressControllers[newIndex], otherNoteControllers[newIndex], empDesignation[newIndex], empAgeControllers[newIndex]);
      }
    }

    List ContractorDetailsList = json['_inspectionEstablishmentContractorDetailsList'];
    if (ContractorDetailsList.length > 0) {
      if (ContractorDetailsList[0]["IsContractors"]) {
        selectContractor = 1;
        isContractor = true;
        for (int i = 0; i < ContractorDetailsList.length; i++) {
          addContractore();
          _contractorIds[i] = ContractorDetailsList[i]["ContractorID"];
          _ListOwnerNameTextEditingController[i].text = ContractorDetailsList[i]["ContractorName"].toString();
          print("KKKKKKKKKKKKKKKKKKKKKKKKKKKk===== ${_ListOwnerNameTextEditingController[i].text}");
          _ListCompanyNameTextEditingController[i].text = ContractorDetailsList[i]["CompanyName"].toString();
          _ListJobTypeTextEditingController[i].text = ContractorDetailsList[i]["JobType"].toString();
          _ListContractorsHasLicence[i] = (ContractorDetailsList[i]["IsLicense"] == true) ? 1 : 0;
          _ListContractorsHasLicencebool[i] = ContractorDetailsList[i]["IsLicense"];
          _ListCommencemenDateTextEditingController[i].text =
              ContractorDetailsList[i]["CommencementDate"] == "0001-01-01T00:00:00" ? "" : DateFormat('dd-MM-yyyy').format(DateTime.parse(ContractorDetailsList[i]["CommencementDate"] ?? ''));
          _ListCompletionDateTextEditingController[i].text =
              ContractorDetailsList[i]["CompletionDate"] == "0001-01-01T00:00:00" ? "" : DateFormat('dd-MM-yyyy').format(DateTime.parse(ContractorDetailsList[i]["CompletionDate"] ?? ''));
          _ListMaleWorkerTextEditingController[i].text = ContractorDetailsList[i]["MaleCount"].toString();
          _ListFeMaleWorkerTextEditingController[i].text = ContractorDetailsList[i]["FemaleCount"].toString();
          _ListTransgenderWorkerTextEditingController[i].text = ContractorDetailsList[i]["TransgenderCount"].toString();
          _ListTotalWorkerTextEditingController[i].text = ContractorDetailsList[i]["TotalWorkerCount"].toString();
          _ListHolderContractoreDetailsModel[i].image_name = ContractorDetailsList[i]["ContractFileupload"] == null ? null : ContractorDetailsList[i]["ContractFileupload"];
          _ListHolderContractoreDetailsModel[i].image_path = ContractorDetailsList[i]["ContractFileuploadCID"] == null ? null : ContractorDetailsList[i]["ContractFileuploadCID"];
        }
      }
    }
    // if (ContractorDetailsList.length > 0) {
    //   if (ContractorDetailsList[0]["IsContractors"]) {
    //     selectContractor = 1;
    //     isContractor = true;
    //     for (int i = 0; i < ContractorDetailsList.length; i++) {
    //       int newIndex = _ListHolderContractoreDetailsModel.length;
    //       _contractorIds.add(0);
    //       _contractorNameControllers.add(TextEditingController());
    //       _companyNameControllers.add(TextEditingController());
    //       _jobTypeControllers.add(TextEditingController());
    //       _commencementDateControllers.add(TextEditingController());
    //       _completionDateControllers.add(TextEditingController());
    //       _contractorMaleWorkerControllers.add(TextEditingController(text: "0"));
    //       _contractorFeMaleWorkerControllers.add(TextEditingController(text: "0"));
    //       _contractorTransgenderWorkerControllers.add(TextEditingController(text: "0"));
    //       _contractorTotalWorkerControllers.add(TextEditingController(text: "0"));
    //       _selectContractors.add('');
    //       isContractorsList.add(true);
    //       _selectedHasLicense.add(0);
    //       _isHasLicenesList.add(false);
    //       selectedFileUploadNames.add('');
    //       contractorImages.add(InspectionOneSiteModel());
    //
    //       //  _selectContractors[i] = (ContractorDetailsList[i]["CID"] ?? 0) > 0 ? ContractorDetailsList[i]["CID"] : null;
    //       _contractorIds[i] = ContractorDetailsList[i]["ContractorID"];
    //       _contractorNameControllers[i].text = ContractorDetailsList[i]["ContractorName"].toString();
    //       print("KKKKKKKKKKKKKKKKKKKKKKKKKKKk===== ${_contractorNameControllers[i].text}");
    //       _companyNameControllers[i].text = ContractorDetailsList[i]["CompanyName"].toString();
    //       _jobTypeControllers[i].text = ContractorDetailsList[i]["JobType"].toString();
    //       _selectedHasLicense[i] = (ContractorDetailsList[i]["IsLicense"] == true) ? 1 : 0;
    //       _isHasLicenesList[i] = ContractorDetailsList[i]["IsLicense"];
    //       _commencementDateControllers[i].text =
    //           ContractorDetailsList[i]["CommencementDate"] == "0001-01-01T00:00:00" ? "" : DateFormat('dd-MM-yyyy').format(DateTime.parse(ContractorDetailsList[i]["CommencementDate"] ?? ''));
    //       _completionDateControllers[i].text =
    //           ContractorDetailsList[i]["CompletionDate"] == "0001-01-01T00:00:00" ? "" : DateFormat('dd-MM-yyyy').format(DateTime.parse(ContractorDetailsList[i]["CompletionDate"] ?? ''));
    //       _contractorMaleWorkerControllers[i].text = ContractorDetailsList[i]["MaleCount"].toString();
    //       _contractorFeMaleWorkerControllers[i].text = ContractorDetailsList[i]["FemaleCount"].toString();
    //       _contractorTransgenderWorkerControllers[i].text = ContractorDetailsList[i]["TransgenderCount"].toString();
    //       _contractorTotalWorkerControllers[i].text = ContractorDetailsList[i]["TotalWorkerCount"].toString();
    //       contractorImages[i].DocumentPath = ContractorDetailsList[i]["ContractFileupload"] == null ? null : ContractorDetailsList[i]["ContractFileupload"].toString();
    //       contractorImages[i].DocumentPathCID = ContractorDetailsList[i]["ContractFileuploadCID"] == null ? null : ContractorDetailsList[i]["ContractFileuploadCID"].toString();
    //       addContractors(
    //           newIndex,
    //           _contractorIds[newIndex],
    //           _contractorNameControllers[newIndex],
    //           _companyNameControllers[newIndex],
    //           _jobTypeControllers[newIndex],
    //           _commencementDateControllers[newIndex],
    //           _completionDateControllers[newIndex],
    //           _contractorMaleWorkerControllers[newIndex],
    //           _contractorFeMaleWorkerControllers[newIndex],
    //           _contractorTransgenderWorkerControllers[newIndex],
    //           _contractorTotalWorkerControllers[newIndex],
    //           _selectedHasLicense[newIndex],
    //           _isHasLicenesList[newIndex],
    //           selectedFileUploadNames[newIndex],
    //           contractorImages[newIndex]);
    //     }
    //   }
    // }

    List eDocList = json['DocumentList'];
    for (int i = 0; i < eDocList.length; i++) {
      if (eDocList[i]["DocumentPath"].toString().contains("OnsitePicture")) {
        inspectionOneSiteModel_EstImage
            .add(InspectionOneSiteDocModel(DID: eDocList[i]["DID"] ?? 0, DocumentPath: eDocList[i]["DocumentPath"].toString(), DocumentPathCID: eDocList[i]["DocumentPathCID"].toString()));
      } else if (eDocList[i]["DocumentPath"].toString().contains("OnsiteDocument")) {
        inspectionOneSiteModel_EstDoc
            .add(InspectionOneSiteDocModel(DID: eDocList[i]["DID"] ?? 0, DocumentPath: eDocList[i]["DocumentPath"].toString(), DocumentPathCID: eDocList[i]["DocumentPathCID"].toString()));
      }
      // inspectionOneSiteModel
      //     .add(InspectionOneSiteDocModel(DID: eDocList[i]["DID"] ?? 0, DocumentPath: eDocList[i]["DocumentPath"].toString(), DocumentPathCID: eDocList[i]["DocumentPathCID"].toString()));
    }

    selectedAuthSign = (_inspectionList[0]["IsAuthorizedPersonSignature"] ?? 0) > 0 ? _inspectionList[0]["IsAuthorizedPersonSignature"] : 0;
    isAuthSign = selectedAuthSign == 0 ? false : true;
    AuthorizedSignPath = _inspectionList[0]["AuthorizedSignPath"] == null ? "" : _inspectionList[0]["AuthorizedSignPath"];
    AuthorizedSignCID = _inspectionList[0]["AuthorizedSignCID"] == null ? "" : _inspectionList[0]["AuthorizedSignCID"];
    if (AuthorizedSignPath.isNotEmpty && AuthorizedSignCID.isNotEmpty) {
      authorizedSignBase64 = _inspectionList[0]["AuthorizedSignBase64"].toString();
    }
    InspectorSignPath = _inspectionList[0]["InspectorSignPath"] == null ? "" : _inspectionList[0]["InspectorSignPath"];
    InspectionSignCID = _inspectionList[0]["InspectionSignCID"] == null ? "" : _inspectionList[0]["InspectionSignCID"];
    if (InspectorSignPath.isNotEmpty && InspectionSignCID.isNotEmpty) {
      inspectorSignBase64 = _inspectionList[0]["InspectionSignBase64"].toString();
    }
    MapImageCID = _inspectionList[0]["MapImageCID"] == null ? "" : _inspectionList[0]["MapImageCID"];
    MapImagefilename = _inspectionList[0]["MapImagefilename"] == null ? "" : _inspectionList[0]["MapImagefilename"];
    mapImageCIDBase64 = _inspectionList[0]["MapImageCIDBase64"].toString();

    IsOffline = _inspectionList[0]["IsOffline"];
    latitude = _inspectionList[0]["latitude"] ?? 0;
    longitude = _inspectionList[0]["longitude"] ?? 0;

    _otherRemarksController.text = _inspectionList[0]["AuthorizedPersonSignatureNote"].toString();

    selectedNonCompliance = (_inspectionList[0]["IsNonComplianceObserved"] != null) ? _inspectionList[0]["IsNonComplianceObserved"] : null;
    selectedTimeLimit = (_inspectionList[0]["StiplatedTimeLimit"] ?? 0) > 0 ? _inspectionList[0]["StiplatedTimeLimit"] : null;
    selectedReportingAuth = (_inspectionList[0]["InspectionaclID"] ?? 0) > 0 ? _inspectionList[0]["InspectionaclID"] : null;

    List _InspectionACTList = json['_InspectionACTList'];
    ACTID = (_InspectionACTList[0]["ACTID"] ?? 0) > 0 ? _InspectionACTList[0]["ACTID"] : 0;

    print("ACTID:- $ACTID");

    isSwitchedActs1 = _InspectionACTList[0]["MainContraventionsWagesAct"] ?? false;
    print("MainContraventionsWagesAct-----$isSwitchedActs1");
    isSwitchedActs1_1 = _InspectionACTList[0]["IsBreakRule26d"] ?? false;
    if (isSwitchedActs1_1 == true) {
      isreadOnly = false;
      _ActSection26dController.text = _InspectionACTList[0]["BreakRule26d1Note"] ?? '';
    }

    isSwitchedActs1_2 = _InspectionACTList[0]["IsBreakRule262"] ?? false;
    isSwitchedActs1_3 = _InspectionACTList[0]["IsBreakRule26b1"] ?? false;
    isSwitchedActs1_4 = _InspectionACTList[0]["IsBreakRule22"] ?? false;
    isSwitchedActs1_5 = _InspectionACTList[0]["IsBreakRule214FormC"] ?? false;
    if (isSwitchedActs1_5 == true) {
      isreadOnly1_5 = false;
      _ActSection214Controller.text = _InspectionACTList[0]["BreakRule214FormCNote"].toString();
    }

    isSwitchedActs1_6 = _InspectionACTList[0]["IsBreakRule211a"] ?? false;

    List getMainDivACT1WorkerDetailsList = json['_inspectionMainDivACT1WorkerDetailsList'];
    ACTRuleID = (getMainDivACT1WorkerDetailsList[0]["ACTRuleID"] ?? 0) > 0 ? getMainDivACT1WorkerDetailsList[0]["ACTRuleID"] : null;
    // _Act1NameController.text = MainDivACT1WorkerDetailsList[0]["WorkerAct1FirstName"].toString();
    if (getMainDivACT1WorkerDetailsList.length > 0) {
      for (int i = 0; i < getMainDivACT1WorkerDetailsList.length; i++) {
        int newIndex = Act1_6Widgets.length;
        act1_6WorkerIds.add(getMainDivACT1WorkerDetailsList[i]["ACT1MinWorkerID"] ?? 0);
        act1_6RuleIds.add(getMainDivACT1WorkerDetailsList[i]["ACTRuleID"] ?? 0);
        act1_6Ids.add(getMainDivACT1WorkerDetailsList[i]["ACTID"] ?? 0);
        _Act1SrNoControllers.add(TextEditingController());
        _Act1NameControllers.add(TextEditingController());
        Acts1_6(
          newIndex,
          _Act1SrNoControllers[newIndex],
          _Act1NameControllers[newIndex],
        );
        _Act1NameControllers[i].text = getMainDivACT1WorkerDetailsList[i]["WorkerAct1FirstName"].toString();
      }
    }

    isSwitchedActs1_7 = _InspectionACTList[0]["IsBreakRule251"] ?? false;
    isSwitchedActs1_8 = _InspectionACTList[0]["IsBreakRuleK12"] ?? false;
    isSwitchedActs1_9 = _InspectionACTList[0]["IsBreakRule264"] ?? false;
    isSwitchedActs1_10 = _InspectionACTList[0]["IsBreakRule261"] ?? false;
    isSwitchedActs1_11 = _InspectionACTList[0]["IsBreakRule263"] ?? false;
    isSwitchedActs1_12 = _InspectionACTList[0]["IsBreakRule265"] ?? false;
    isSwitchedActs1_13 = _InspectionACTList[0]["IsBreakRule26b2"] ?? false;
    if (isSwitchedActs1_13 == true) {
      isreadOnlyRule2bYear = false;
      _ActRule2bYearController.text = _InspectionACTList[0]["BreakRule26b2Year"].toString();
      _ActRule2bYear1Controller.text = _InspectionACTList[0]["BreakRule26b2Year1"].toString();
    }
    isSwitchedActs1_14 = _InspectionACTList[0]["IsBreakRule26b3"] ?? false;
    isSwitchedActs1_15 = _InspectionACTList[0]["IsBreakRule252"] ?? false;
    isSwitchedActs1_16 = _InspectionACTList[0]["IsBreakRule13ba"] ?? false;
    isSwitchedActs1_17 = _InspectionACTList[0]["IsBreakRule231"] ?? false;
    isSwitchedActs1_18 = _InspectionACTList[0]["IsBreakRule23"] ?? false;
    isSwitchedActs1_19 = _InspectionACTList[0]["IsBreakRule194"] ?? false;

    print(_InspectionACTList[0]["MainContraventionsWagesActNote"]);
    _Act1RemarksController.text = _InspectionACTList[0]["MainContraventionsWagesActNote"] ?? '';
    _Act2RemarksController.text = _InspectionACTList[0]["MainContraventionsPayBounus1965ActNote"] ?? '';
    _Act3RemarksController.text = _InspectionACTList[0]["MainContraventionsPayBounus1972ActNote"] ?? '';
    _Act4_principalRemarksController.text = _InspectionACTList[0]["MainContraventionsContractLabour1972ActNote"] ?? '';
    _Act4_contractorRemarksController.text = _InspectionACTList[0]["MainContraventionsObservedUnderContractLabour1972ActNote"] ?? '';
    _Act5RemarksController.text = _InspectionACTList[0]["MainContraventionsObservedUnderRemuneration1976ActNote"] ?? '';
    _Act6RemarksController.text = _InspectionACTList[0]["MainContraventionsInterStateMigrantWorkmen1979ActNote"] ?? '';
    _Act6_conRemarksController.text = _InspectionACTList[0]["MainContObsInterStateWorkmen1981ActNote"] ?? '';
    _Act7RemarksController.text = _InspectionACTList[0]["MainContObsInterStateWorkmen1986ActNote"] ?? '';
    _Act8RemarksController.text = _InspectionACTList[0]["MainContObsInterStateWorkmen1946ActNote"] ?? '';
    _Act9RemarksController.text = _InspectionACTList[0]["MainContObsInterStateWorkmen1961ActNote"] ?? '';
    _Act10RemarksController.text = _InspectionACTList[0]["MainContObsInterStateWorkmen1957ActNote"] ?? '';
    _Act11RemarksController.text = _InspectionACTList[0]["MainInspectionSalesEmployeesActNote"] ?? '';

    List MainDivACT18WorkerDetailsList = json['_inspectionMainDivACT18WorkerDetailsList'];

    if (MainDivACT18WorkerDetailsList.length > 0) {
      for (int i = 0; i < MainDivACT18WorkerDetailsList.length; i++) {
        addWorkInformation1_8();
        act1_8Rule8MinWorkerIds[i] = MainDivACT18WorkerDetailsList[i]["ACT1Rule8MinWorkerID"];
        act1_8RuleIds[i] = MainDivACT18WorkerDetailsList[i]["ACTRuleID"];
        act1_8Ids[i] = MainDivACT18WorkerDetailsList[i]["ACTID"];

        _ListWorkersNameTextEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8FirstName"].toString();
        _ListDesginationEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8Designation"].toString();
        _ListWorkersLenghtOfServiceEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8LengthofService"].toString();
        _ListWorkersDailyWorkingHouseEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8DailyWorkingHours"].toString();
        _ListWorkersDayMonth[i] = MainDivACT18WorkerDetailsList[i]["Isdaymonth"];
        print("DaliyMonthlys--${_ListWorkersDayMonth[i]}");
        if (_ListWorkersDayMonth[i] == 1) {
          _ListIsWorkersDay[i] = true;
          _ListIsWorkersMonth[i] = false;
        } else if (_ListWorkersDayMonth[i] == 2) {
          _ListIsWorkersDay[i] = false;
          _ListIsWorkersMonth[i] = true;
        }
        _ListWorkerSwagesPaidPerMonthEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaidPerMonth"].toString();
        _ListWorkerSwagesPaidPerDayEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaidPerDay"].toString();
        _ListWorkersWagesEntitledFormDateEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesEntitledfromDate"].toString() == "0001-01-01T00:00:00"
            ? ""
            : DateFormat('dd-MM-yyyy').format(DateTime.parse(MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesEntitledfromDate"].toString()));
        _ListWorkersWagesPayableEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesAmount"].toString();
        _ListWorkersWagesPaidEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaid"].toString();
        _ListWorkersDiffrenceWagesAmountEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8DifferenceWagesAmount"].toString();
        _ListWorkersRemarksAmountEditingController[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8Remarks"].toString();
        _ListHolderWorkInformationModel[i].file_name =
            MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8UploadStatement"] == null ? null : MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8UploadStatement"];
        _ListHolderWorkInformationModel[i].file_path =
            MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8UploadStatementCID"] == null ? null : MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8UploadStatementCID"];
      }
    }
    // if (MainDivACT18WorkerDetailsList.length > 0) {
    //   for (int i = 0; i < MainDivACT18WorkerDetailsList.length; i++) {
    //     int newIndex = Act1_8Widgets.length;
    //     act1_8Rule8MinWorkerIds.add(MainDivACT18WorkerDetailsList[i]["ACT1Rule8MinWorkerID"] ?? 0);
    //     act1_8RuleIds.add(MainDivACT18WorkerDetailsList[i]["ACTRuleID"] ?? 0);
    //     act1_8Ids.add(MainDivACT18WorkerDetailsList[i]["ACTID"] ?? 0);
    //     WagesToPaid.add(0);
    //     DaliyMonthlys.add(MainDivACT18WorkerDetailsList[i]["Isdaymonth"]);
    //     isMonth.add(false);
    //     isDay.add(false);
    //     current_wagesEntitleds.add(DateTime.now());
    //     _Act1_8SrNoControllers.add(TextEditingController());
    //     _Act1_8NameControllers.add(TextEditingController());
    //     _Act1_8DesgControllers.add(TextEditingController());
    //     _Act1_8lengthServiceControllers.add(TextEditingController());
    //     _Act1_8dailyWorkHrsControllers.add(TextEditingController());
    //     _Act1_8MonthControllers.add(TextEditingController());
    //     _Act1_8dayControllers.add(TextEditingController());
    //     _Act1_8wageEntitledControllers.add(TextEditingController());
    //     _Act1_8wagePayableControllers.add(TextEditingController());
    //     _Act1_8wagePaidControllers.add(TextEditingController());
    //     _Act1_8differenceWageAmountControllers.add(TextEditingController());
    //     _Act1_8UploadFiles.add(TextEditingController());
    //     _Act1_8remarksControllers.add(TextEditingController());
    //     Acts1_8(
    //         newIndex,
    //         _Act1_8SrNoControllers[newIndex],
    //         _Act1_8NameControllers[newIndex],
    //         _Act1_8DesgControllers[newIndex],
    //         _Act1_8lengthServiceControllers[newIndex],
    //         _Act1_8dailyWorkHrsControllers[newIndex],
    //         _Act1_8dayControllers[newIndex],
    //         _Act1_8MonthControllers[newIndex],
    //         current_wagesEntitleds[newIndex],
    //         DaliyMonthlys[newIndex],
    //         isMonth[newIndex],
    //         isDay[newIndex],
    //         _Act1_8wageEntitledControllers[newIndex],
    //         _Act1_8wagePayableControllers[newIndex],
    //         _Act1_8wagePaidControllers[newIndex],
    //         _Act1_8differenceWageAmountControllers[newIndex],
    //         _Act1_8remarksControllers[newIndex]);
    //     print("ISDayMonth---- ${MainDivACT18WorkerDetailsList[i]["Isdaymonth"]}");
    //     _Act1_8NameControllers[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8FirstName"].toString();
    //     _Act1_8DesgControllers[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8Designation"].toString();
    //     _Act1_8lengthServiceControllers[i].text =
    //         MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8LengthofService"].toString();
    //     _Act1_8dailyWorkHrsControllers[i].text =
    //         MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8DailyWorkingHours"].toString();
    //     DaliyMonthlys[i] = MainDivACT18WorkerDetailsList[i]["Isdaymonth"];
    //     print("DaliyMonthlys--${DaliyMonthlys[i]}");
    //     if (DaliyMonthlys[i] == 1) {
    //       isDay[i] = true;
    //       isMonth[i] = false;
    //     } else if (DaliyMonthlys[i] == 2) {
    //       isDay[i] = false;
    //       isMonth[i] = true;
    //     }
    //     _Act1_8MonthControllers[i].text =
    //         MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaidPerMonth"].toString();
    //     _Act1_8dayControllers[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaidPerDay"].toString();
    //     _Act1_8wageEntitledControllers[i]
    //         .text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesEntitledfromDate"].toString() ==
    //             "0001-01-01T00:00:00"
    //         ? ""
    //         : DateFormat('dd-MM-yyyy').format(
    //             DateTime.parse(MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesEntitledfromDate"].toString()));
    //     _Act1_8wagePayableControllers[i].text =
    //         MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesAmount"].toString();
    //     _Act1_8wagePaidControllers[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8WagesPaid"].toString();
    //     _Act1_8differenceWageAmountControllers[i].text =
    //         MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8DifferenceWagesAmount"].toString();
    //     _Act1_8remarksControllers[i].text = MainDivACT18WorkerDetailsList[i]["WorkerAct1Rule8Remarks"].toString();
    //     print("day--${_Act1_8MonthControllers[i].text}");
    //     print("month--${_Act1_8MonthControllers[i].text}");
    //     print("amount--${_Act1_8wagePayableControllers[i].text}");
    //   }
    // }

    isSwitchedActs2 = _InspectionACTList[0]["MainContraventionsPayBounus1965Act"] ?? false;
    isSwitchedActs2_1 = _InspectionACTList[0]["IsBreakRule274"] ?? false;
    isSwitchedActs2_2 = _InspectionACTList[0]["IsBreakRule219b"] ?? false;
    isSwitchedActs2_3 = _InspectionACTList[0]["IsBreakRule4a"] ?? false;
    if (isSwitchedActs2_3 == true) {
      isreadOnlyR4a = false;
      _ActR4aController.text = _InspectionACTList[0]["BreakRule4aYear"].toString();
    }
    isSwitchedActs2_4 = _InspectionACTList[0]["IsBreakRule4b"] ?? false;
    if (isSwitchedActs2_4 == true) {
      isreadOnlyR4b = false;
      _ActR4bController.text = _InspectionACTList[0]["BreakRule4bYear"].toString();
    }
    isSwitchedActs2_5 = _InspectionACTList[0]["IsBreakRule4c"] ?? false;
    if (isSwitchedActs2_5 == true) {
      isreadOnlyR4c = false;
      _ActR4cController.text = _InspectionACTList[0]["BreakRule4cYear"].toString();
    }
    isSwitchedActs2_6 = _InspectionACTList[0]["IsBreakRule5"] ?? false;
    if (isSwitchedActs2_6 == true) {
      isreadOnlyS26R5 = false;
      _ActS26R5Controller.text = _InspectionACTList[0]["BreakRule5Year"].toString();
    }

    List Financial12List = json['_inspectionActFinancial12List'];

    if (Financial12List.length > 0) {
      for (int i = 0; i < Financial12List.length; i++) {
        int newIndex = Act2_1Widgets.length;
        _Act2_1FinancialYearControllers.add(TextEditingController());
        _Act2_1SrNoControllers.add(TextEditingController());
        IsFromA.add(Financial12List[i]["ISActFinancial12ListFormA"]);
        IsFromB.add(Financial12List[i]["IsActFinancial12ListFormB"]);
        IsFromC.add(Financial12List[i]["IsActFinancial12ListFormC"]);
        IsFromD.add(Financial12List[i]["IsActFinancial12ListFormD"]);
        act2_1FinancialLIstIds.add(Financial12List[i]["ActFinancial12ListDNo"] ?? 0);
        act2_1RuleIds.add(Financial12List[i]["ACTRuleID"] ?? 0);
        act2_1Ids.add(Financial12List[i]["ACTID"] ?? 0);
        Acts2_1(newIndex, _Act2_1SrNoControllers[newIndex], _Act2_1FinancialYearControllers[newIndex], IsFromA[newIndex], IsFromB[newIndex], IsFromC[newIndex], IsFromD[newIndex]);

        print("IsFromA---- ${Financial12List[i]["ISActFinancial12ListFormA"]}");
        _Act2_1FinancialYearControllers[i].text = Financial12List[i]["ActFinancial12ListYear"].toString();
        IsFromA[i] = Financial12List[i]["ISActFinancial12ListFormA"] ?? false;
        IsFromB[i] = Financial12List[i]["IsActFinancial12ListFormB"] ?? false;
        IsFromC[i] = Financial12List[i]["IsActFinancial12ListFormC"] ?? false;
        IsFromD[i] = Financial12List[i]["IsActFinancial12ListFormD"] ?? false;
      }
      setState(() {});
    }

    List ACTRuleNotPaidWorkerList = json["_inspectionACTRuleNotPaidWorkerList"];

    _Act2_2FinancialYearController.text = ACTRuleNotPaidWorkerList[0]["NoPaidBonusPersonyear"].toString();

    if (ACTRuleNotPaidWorkerList.length > 0) {
      for (int i = 0; i < ACTRuleNotPaidWorkerList.length; i++) {
        int newIndex = Act2_2Widgets.length;
        act2_2NotPaidWorkerDetailDNoIds.add(ACTRuleNotPaidWorkerList[i]["ACTRuleNotPaidWorkerDetailDNo"] ?? 0);
        act2_2RuleIds.add(ACTRuleNotPaidWorkerList[i]["ACTRuleID"] ?? 0);
        act2_2Ids.add(ACTRuleNotPaidWorkerList[i]["ACTID"] ?? 0);
        _Act2_2WorkerNameControllers.add(TextEditingController());
        _Act2_2SrNoControllers.add(TextEditingController());
        Acts2_2(newIndex, _Act2_2SrNoControllers[newIndex], _Act2_2WorkerNameControllers[newIndex]);

        _Act2_2WorkerNameControllers[i].text = ACTRuleNotPaidWorkerList[i]["NoPaidBonusPersonName"].toString();
      }
    }

    isSwitchedActs3 = _InspectionACTList[0]["MainContraventionsPayBounus1972Act"] ?? false;
    isSwitchedActs3_1 = _InspectionACTList[0]["IsBreakRule31"] ?? false;
    isSwitchedActs3_2 = _InspectionACTList[0]["IsBreakRule62"] ?? false;
    isSwitchedActs3_3 = _InspectionACTList[0]["IsBreakRule32"] ?? false;
    if (isSwitchedActs3_3 == true) {
      isreadOnlyR32 = false;
      _ActR32Controller.text = _InspectionACTList[0]["BreakRule32note"].toString();
    }
    isSwitchedActs3_4 = _InspectionACTList[0]["IsBreakRule7b"] ?? false;
    IsextraworkDoc = _InspectionACTList[0]["IsextraworkDoc"] == null ? "" : _InspectionACTList[0]["IsextraworkDoc"];
    IsextraworkDocCID = _InspectionACTList[0]["IsextraworkDocCID"] == null ? "" : _InspectionACTList[0]["IsextraworkDocCID"];
    isSwitchedActs4 = _InspectionACTList[0]["MainContraventionsContractLabour1972Act"] ?? false;
    isSwitchedActs4_1_1 = _InspectionACTList[0]["IsBreakRule171"] ?? false;
    isSwitchedActs4_1_2 = _InspectionACTList[0]["IsBreakRule74"] ?? false;
    isSwitchedActs4_1_3 = _InspectionACTList[0]["IsBreakRule201"] ?? false;
    isSwitchedActs4_1_4 = _InspectionACTList[0]["IsBreakRule214"] ?? false;
    isSwitchedActs4_1_5 = _InspectionACTList[0]["IsBreakRule9k"] ?? false;
    if (isSwitchedActs4_1_5 == true) {
      isreadOnlyS9a = false;
      _ActS9aLaborersController.text = _InspectionACTList[0]["BreakRule9kTotalUser"].toString();
      _ActS9aSnoController.text = _InspectionACTList[0]["BreakRule9kUser"].toString();
    }
    isSwitchedActs4_1_6 = _InspectionACTList[0]["IsBreakRule72"] ?? false;
    if (isSwitchedActs4_1_6 == true) {
      isreadOnlyR72 = false;
      _ActR72Controller.text = _InspectionACTList[0]["BreakRule72User"].toString();
    }
    isSwitchedActs4_1_7 = _InspectionACTList[0]["IsBreakRule73"] ?? false;
    if (isSwitchedActs4_1_7 == true) {
      isreadOnlyS212Sno = false;
      _ActS212SnoController.text = _InspectionACTList[0]["BreakRule73User"].toString();
    }
    isSwitchedActs4_1_11 = _InspectionACTList[0]["IsBreakRule183"] ?? false;

    List MainDivACTSharamk214DetailList = json["_inspectionMainDivACTSharamk214DetailList"];

    if (MainDivACTSharamk214DetailList.length > 0) {
      for (int i = 0; i < MainDivACTSharamk214DetailList.length; i++) {
        print("WagesToPaid--${MainDivACTSharamk214DetailList[i]["IsSharamk214PaidWages"]}");
        int newIndex = Act4_1_5Widgets.length;
        act4_1_5Sharamk214DNo.add(MainDivACTSharamk214DetailList[i]["Sharamk214DNo"] ?? 0);
        act4_1_5RuleIds.add(MainDivACTSharamk214DetailList[i]["ACTRuleID"] ?? 0);
        act4_1_5Ids.add(MainDivACTSharamk214DetailList[i]["ACTID"] ?? 0);
        _Act4_1_5SrNoControllers.add(TextEditingController());
        _Act4_1_5NameContractorControllers.add(TextEditingController());
        _Act4_1_5NameContractorLabourControllers.add(TextEditingController());
        WagesToPaid.add(MainDivACTSharamk214DetailList[i]["IsSharamk214PaidWages"]);
        _Act4_1_5WagesTobePaidControllers.add(TextEditingController());
        _Act4_1_5DifferAmountControllers.add(TextEditingController());
        Act4_1_5(
          newIndex,
          _Act4_1_5SrNoControllers[newIndex],
          _Act4_1_5NameContractorControllers[newIndex],
          _Act4_1_5NameContractorLabourControllers[newIndex],
          WagesToPaid[newIndex],
          _Act4_1_5WagesTobePaidControllers[newIndex],
          _Act4_1_5DifferAmountControllers[newIndex],
        );
        _Act4_1_5NameContractorControllers[i].text = MainDivACTSharamk214DetailList[i]["Sharamk214NameofContractor"].toString();
        _Act4_1_5NameContractorLabourControllers[i].text = MainDivACTSharamk214DetailList[i]["Sharamk214NameofContractLabour"].toString();
        WagesToPaid[i] = MainDivACTSharamk214DetailList[i]["IsSharamk214PaidWages"];
        _Act4_1_5WagesTobePaidControllers[i].text = MainDivACTSharamk214DetailList[i]["Sharamk214Wagestobepaid"].toString();
        _Act4_1_5DifferAmountControllers[i].text = MainDivACTSharamk214DetailList[i]["Sharamk214DifferentialAmounttobepaid"].toString();
      }
    }

    changeDetailsController.text = _InspectionACTList[0]["ContractLabourChangeDetails"].toString();
    print("Date----${_InspectionACTList[0]["ContractLabourDateofModification"].toString()}");
    if (_InspectionACTList[0]["ContractLabourDateofModification"].toString() != "0001-01-01T00:00:00") {
      String rawDate = _InspectionACTList[0]["ContractLabourDateofModification"];
      DateTime parsedDate = DateTime.parse(rawDate);

// Convert to the local time zone
      DateTime localDate = parsedDate.toLocal();

// Format the date
      dateModificationController.text = DateFormat('dd-MM-yyyy').format(localDate);
    }

    isSwitchedActs4_2_1 = _InspectionACTList[0]["IsBreakRuleS121k211"] ?? false;
    isSwitchedActs4_2_2 = _InspectionACTList[0]["IsBreakRule421"] ?? false;
    isSwitchedActs4_2_3 = _InspectionACTList[0]["IsBreakRuleS17k41"] ?? false;
    isSwitchedActs4_2_4 = _InspectionACTList[0]["IsBreakRule401"] ?? false;
    isSwitchedActs4_2_5 = _InspectionACTList[0]["IsBreakRuleS211k65"] ?? false;
    _ActS211R65Controller.text = _InspectionACTList[0]["BreakRuleS211k65Year"].toString();
    isSwitchedActs4_2_6 = _InspectionACTList[0]["IsBreakRuleS213k72"] ?? false;
    isSwitchedActs4_2_7 = _InspectionACTList[0]["IsBreakRuleS291k75"] ?? false;
    isSwitchedActs4_2_8 = _InspectionACTList[0]["IsBreakRuleS291k76"] ?? false;
    isSwitchedActs4_2_9 = _InspectionACTList[0]["IsBreakRule804"] ?? false;
    isSwitchedActs4_2_10 = _InspectionACTList[0]["IsBreakRuleS122k25"] ?? false;
    isSwitchedActs4_2_12 = _InspectionACTList[0]["IsBreakRuleS291k781a"] ?? false;
    isSwitchedActs4_2_13 = _InspectionACTList[0]["IsBreakRuleS291k781b"] ?? false;
    isSwitchedActs4_2_14 = _InspectionACTList[0]["IsBreakRuleS291k781d"] ?? false;
    isSwitchedActs4_2_15 = _InspectionACTList[0]["IsBreakRuleS291k782b"] ?? false;
    isSwitchedActs4_2_17 = _InspectionACTList[0]["IsBreakRule71"] ?? false;
    isSwitchedActs4_2_18 = _InspectionACTList[0]["IsBreakRule8111"] ?? false;
    isSwitchedActs4_2_20 = _InspectionACTList[0]["IsBreakRule58"] ?? false;

    _ActS122R25Controller.text = _InspectionACTList[0]["IsBreakRuleS122k25LicNo"].toString();

    List MainDivACTIsBreakRuleS211k65DetailList = json["_inspectionMainDivACTIsBreakRuleS211k65DetailList"];

    if (MainDivACTIsBreakRuleS211k65DetailList.length > 0) {
      for (int i = 0; i < MainDivACTIsBreakRuleS211k65DetailList.length; i++) {
        int newIndex = Act4_2_5Widgets.length;
        act4_2_5ACTIsBreakRuleS211k65DNo.add(MainDivACTIsBreakRuleS211k65DetailList[i]["ACTIsBreakRuleS211k65DNo"] ?? 0);
        act4_2_5RuleIds.add(MainDivACTIsBreakRuleS211k65DetailList[i]["ACTRuleID"] ?? 0);
        act4_2_5Ids.add(MainDivACTIsBreakRuleS211k65DetailList[i]["ACTID"] ?? 0);
        _Act4_2_5SrNoControllers.add(TextEditingController());
        _Act4_2_5NameContractorControllers.add(TextEditingController());
        Act4_2_5(newIndex, _Act4_2_5SrNoControllers[newIndex], _Act4_2_5NameContractorControllers[newIndex]);

        _Act4_2_5NameContractorControllers[i].text = MainDivACTIsBreakRuleS211k65DetailList[i]["ACTIsBreakRuleS211k65Contractorname"].toString();
      }
    }

    isSwitchedActs5 = _InspectionACTList[0]["MainContraventionsObservedUnderRemuneration1976Act"] ?? false;
    isSwitchedActs5_1 = _InspectionACTList[0]["IsBreakRule6"] ?? false;
    isSwitchedActs5_2 = _InspectionACTList[0]["IsBreakRule93b"] ?? false;
    isSwitchedActs5_3 = _InspectionACTList[0]["IsBreakRule94"] ?? false;
    isSwitchedActs5_4 = _InspectionACTList[0]["IsBreakRuleUN1976k41"] ?? false;

    List ACTRuleWorkerList = json["_InspectionACTRuleWorkerList"];

    if (ACTRuleWorkerList.length > 0) {
      for (int i = 0; i < ACTRuleWorkerList.length; i++) {
        int newIndex = Act5_4Widgets.length;
        act5_4RuleIds.add(ACTRuleWorkerList[i]["ACTRuleID"] ?? 0);
        act5_4Ids.add(ACTRuleWorkerList[i]["ACTID"] ?? 0);
        _Act5_4SrNoControllers.add(TextEditingController());
        _Act5_4MaleWorkersControllers.add(TextEditingController());
        _Act5_4MDesgControllers.add(TextEditingController());
        _Act5_4MSalaryPaidControllers.add(TextEditingController());
        _Act5_4FemaleWorkersControllers.add(TextEditingController());
        _Act5_4FDesgControllers.add(TextEditingController());
        _Act5_4FSalaryPaidControllers.add(TextEditingController());
        Act5_4(newIndex, _Act5_4SrNoControllers[newIndex], _Act5_4MaleWorkersControllers[newIndex], _Act5_4MDesgControllers[newIndex], _Act5_4MSalaryPaidControllers[newIndex],
            _Act5_4FemaleWorkersControllers[newIndex], _Act5_4FDesgControllers[newIndex], _Act5_4FSalaryPaidControllers[newIndex]);

        _Act5_4MaleWorkersControllers[i].text = ACTRuleWorkerList[i]["MaleWorkerName"].toString();
        _Act5_4MDesgControllers[i].text = ACTRuleWorkerList[i]["MDesignation"].toString();
        _Act5_4MSalaryPaidControllers[i].text = ACTRuleWorkerList[i]["MSalarypaid"].toString();
        _Act5_4FemaleWorkersControllers[i].text = ACTRuleWorkerList[i]["FemaleWorkerName"].toString();
        _Act5_4FDesgControllers[i].text = ACTRuleWorkerList[i]["FDesignation"].toString();
        _Act5_4FSalaryPaidControllers[i].text = ACTRuleWorkerList[i]["FSalarypaid"].toString();
      }
    }

    isSwitchedActs6 = _InspectionACTList[0]["MainContraventionsObservedUnderInterStateMigrantWorkmen1979Act"] ?? false;
    isSwitchedActs6_1_1 = _InspectionACTList[0]["IsBreakRule4131"] ?? false;
    isSwitchedActs6_1_2 = _InspectionACTList[0]["IsBreakRule48"] ?? false;
    isSwitchedActs6_1_3 = _InspectionACTList[0]["IsBreakRuleK6"] ?? false;
    if (isSwitchedActs6_1_3 == true) {
      isreadOnlyR6 = false;
      _ActR6Controller.text = _InspectionACTList[0]["IsBreakRuleK6Not1"].toString();
    }
    isSwitchedActs6_1_4 = _InspectionACTList[0]["IsBreakRule35"] ?? false;
    if (isSwitchedActs6_1_4 == true) {
      isreadOnlyS172R34 = false;
      _ActS172R34Controller.text = _InspectionACTList[0]["IsBreakRule35Not1"].toString();
    }
    isSwitchedActs6_1_5 = _InspectionACTList[0]["IsBreakRule49"] ?? false;
    isSwitchedActs6_1_6 = _InspectionACTList[0]["IsBreakRule551"] ?? false;
    isSwitchedActs6_1_7 = _InspectionACTList[0]["IsBreakRule552"] ?? false;
    isSwitchedActs6_2_1 = _InspectionACTList[0]["IsBreakRule7281"] ?? false;
    isSwitchedActs6_2_2 = _InspectionACTList[0]["IsBreakRule211"] ?? false;
    isSwitchedActs6_2_3 = _InspectionACTList[0]["IsBreakRule511"] ?? false;

    List ActRuleContractPersonDetailsList = json["_inspectionActRuleContractPersonDetailsList"];

    if (ActRuleContractPersonDetailsList.length > 0) {
      for (int i = 0; i < ActRuleContractPersonDetailsList.length; i++) {
        int newIndex = Act6Widgets.length;
        act6ContractorPersonDetailsDetailDNo.add(ActRuleContractPersonDetailsList[i]["ContractorPersonDetailsDetailDNo"] ?? 0);
        act6RuleIds.add(ActRuleContractPersonDetailsList[i]["ACTRuleID"] ?? 0);
        act6Ids.add(ActRuleContractPersonDetailsList[i]["ACTID"] ?? 0);
        _Act6SrNoControllers.add(TextEditingController());
        _Act6NameContractorControllers.add(TextEditingController());
        _Act6AddressControllers.add(TextEditingController());
        _Act6DetailsWorkControllers.add(TextEditingController());
        currentTimeSinceDates.add(DateTime.now());
        _Act6TimeSinceControllers.add(TextEditingController());
        _Act6NoWorkersControllers.add(TextEditingController());
        _Act6TotalNoWorkersControllers.add(TextEditingController());
        Act6(
          newIndex,
          _Act6SrNoControllers[newIndex],
          _Act6NameContractorControllers[newIndex],
          _Act6AddressControllers[newIndex],
          _Act6DetailsWorkControllers[newIndex],
          currentTimeSinceDates[newIndex],
          _Act6TimeSinceControllers[newIndex],
          _Act6NoWorkersControllers[newIndex],
          _Act6TotalNoWorkersControllers[newIndex],
        );

        _Act6NameContractorControllers[i].text = ActRuleContractPersonDetailsList[i]["ContractPersonName"].toString();
        _Act6AddressControllers[i].text = ActRuleContractPersonDetailsList[i]["ContractPersonDetailsPAddress"].toString();
        _Act6DetailsWorkControllers[i].text = ActRuleContractPersonDetailsList[i]["Detailswork"].toString();
        _Act6TimeSinceControllers[i].text = ActRuleContractPersonDetailsList[i]["initiationwork"].toString() == "0001-01-01T00:00:00"
            ? ""
            : DateFormat('dd-MM-yyyy').format(DateTime.parse(ActRuleContractPersonDetailsList[i]["initiationwork"].toString()));
        _Act6NoWorkersControllers[i].text = ActRuleContractPersonDetailsList[i]["Noofworkersemployed"].toString();
        _Act6TotalNoWorkersControllers[i].text = ActRuleContractPersonDetailsList[i]["Totalnumberofworkers"].toString();
      }
    }

    isSwitchedActs7 = _InspectionACTList[0]["MainContObsInterStateWorkmen1986Act"] ?? false;
    isSwitchedActs7_2_1 = _InspectionACTList[0]["IsBreakRule312"] ?? false;
    isSwitchedActs7_2_2 = _InspectionACTList[0]["IsBreakRule941"] ?? false;
    isSwitchedActs7_2_3 = _InspectionACTList[0]["IsBreakRule972"] ?? false;
    isSwitchedActs7_2_4 = _InspectionACTList[0]["IsBreakRule973"] ?? false;
    isSwitchedActs7_1_3 = _InspectionACTList[0]["IsBreakRule17"] ?? false;

    List MainDivACTRule972DetailDetailList = json["_inspectionMainDivACTRule972DetailDetailList"];

    if (MainDivACTRule972DetailDetailList.length > 0) {
      for (int i = 0; i < MainDivACTRule972DetailDetailList.length; i++) {
        int newIndex = Act7_3Widgets.length;
        act7_3ACTIsBreakRule972DetailDNo.add(MainDivACTRule972DetailDetailList[i]["ACTIsBreakRule972DetailDNo"] ?? 0);
        act7_3RuleIds.add(MainDivACTRule972DetailDetailList[i]["ACTRuleID"] ?? 0);
        act7_3Ids.add(MainDivACTRule972DetailDetailList[i]["ACTID"] ?? 0);
        _Act7_3SrNoControllers.add(TextEditingController());
        _Act7_3NameAdolescentLabourControllers.add(TextEditingController());
        _Act7_3AddressControllers.add(TextEditingController());
        _Act7_3AgeControllers.add(TextEditingController());
        Act7_3(
          newIndex,
          _Act7_3SrNoControllers[newIndex],
          _Act7_3NameAdolescentLabourControllers[newIndex],
          _Act7_3AddressControllers[newIndex],
          _Act7_3AgeControllers[newIndex],
        );

        _Act7_3NameAdolescentLabourControllers[i].text = MainDivACTRule972DetailDetailList[i]["ACTIsBreakRule972NameofAdolescentLabour"].toString();
        _Act7_3AddressControllers[i].text = MainDivACTRule972DetailDetailList[i]["ACTIsBreakRule972DetailAddress"].toString();
        _Act7_3AgeControllers[i].text = MainDivACTRule972DetailDetailList[i]["ACTIsBreakRule972DetailAge"].toString();
      }
    }

    List MainDivACTRule973DetailDetailList = json["_inspectionMainDivACTRule973DetailDetailList"];

    if (MainDivACTRule973DetailDetailList.length > 0) {
      for (int i = 0; i < MainDivACTRule973DetailDetailList.length; i++) {
        int newIndex = Act7_2_4Widgets.length;
        act7_4ACTIsBreakRule973DetailDNo.add(MainDivACTRule973DetailDetailList[i]["ACTIsBreakRule973DetailDNo"] ?? 0);
        act7_4RuleIds.add(MainDivACTRule973DetailDetailList[i]["ACTRuleID"] ?? 0);
        act7_4Ids.add(MainDivACTRule973DetailDetailList[i]["ACTID"] ?? 0);
        _Act7_2_4SrNoControllers.add(TextEditingController());
        _Act7_2_4NameAdolescentLabourControllers.add(TextEditingController());
        _Act7_2_4AddressControllers.add(TextEditingController());
        _Act7_2_4AgeControllers.add(TextEditingController());
        Act7_2_4(
          newIndex,
          _Act7_2_4SrNoControllers[newIndex],
          _Act7_2_4NameAdolescentLabourControllers[newIndex],
          _Act7_2_4AddressControllers[newIndex],
          _Act7_2_4AgeControllers[newIndex],
        );
        _Act7_2_4NameAdolescentLabourControllers[i].text = MainDivACTRule973DetailDetailList[i]["ACTIsBreakRule973NameofAdolescentLabour"].toString();
        _Act7_2_4AddressControllers[i].text = MainDivACTRule973DetailDetailList[i]["ACTIsBreakRule973DetailAddress"].toString();
        _Act7_2_4AgeControllers[i].text = MainDivACTRule973DetailDetailList[i]["ACTIsBreakRule973DetailAge"].toString();
      }
    }

    List ACTRuleWorkmenList = json["_InspectionACTRuleWorkmenList"];
    if (ACTRuleWorkmenList.length > 0) {
      for (int i = 0; i < ACTRuleWorkmenList.length; i++) {
        int newIndex = Act7_1_3Widgets.length;
        act7_5WorkemenSrNo.add(ACTRuleWorkmenList[i]["WorkemenSrNo"] ?? 0);
        act7_5RuleIds.add(ACTRuleWorkmenList[i]["ACTRuleID"] ?? 0);
        act7_5Ids.add(ACTRuleWorkmenList[i]["ACTID"] ?? 0);
        _Act7_1_3SrNoControllers.add(TextEditingController());
        _Act7_1_3NameChildLabourControllers.add(TextEditingController());
        _Act7_1_3AddressControllers.add(TextEditingController());
        _Act7_1_3AgeControllers.add(TextEditingController());
        Act7_1_3(
          newIndex,
          _Act7_1_3SrNoControllers[newIndex],
          _Act7_1_3NameChildLabourControllers[newIndex],
          _Act7_1_3AddressControllers[newIndex],
          _Act7_1_3AgeControllers[newIndex],
        );
        _Act7_1_3NameChildLabourControllers[i].text = ACTRuleWorkmenList[i]["NameofChildLabour"].toString();
        _Act7_1_3AddressControllers[i].text = ACTRuleWorkmenList[i]["ChildPAddress"].toString();
        _Act7_1_3AgeControllers[i].text = ACTRuleWorkmenList[i]["childAge"].toString();
      }
    }

    isSwitchedActs8 = _InspectionACTList[0]["MainContObsInterStateWorkmen1946Act"] ?? false;
    isSwitchedActs8_1 = _InspectionACTList[0]["IsBreakRuleo5"] ?? false;
    isSwitchedActs8_2 = _InspectionACTList[0]["IsBreakRulek9"] ?? false;
    isSwitchedActs8_3 = _InspectionACTList[0]["IsBreakRuleS10"] ?? false;

    List ACTRuleDesignationDetalisList = json["_InspectionACTRuleDesignationDetalisList"];

    if (ACTRuleDesignationDetalisList.length > 0) {
      for (int i = 0; i < ACTRuleDesignationDetalisList.length; i++) {
        int newIndex = Act8_3Widgets.length;
        act8_3dessrno.add(ACTRuleDesignationDetalisList[i]["dessrno"] ?? 0);
        act8_3RuleIds.add(ACTRuleDesignationDetalisList[i]["ACTRuleID"] ?? 0);
        act8_3Ids.add(ACTRuleDesignationDetalisList[i]["ACTID"] ?? 0);
        _Act8_3SrNoControllers.add(TextEditingController());
        _Act8_3NameControllers.add(TextEditingController());
        _Act8_3DesgControllers.add(TextEditingController());
        current_suspensionDates.add(DateTime.now());
        _Act8_3DateSuspensionControllers.add(TextEditingController());
        Act8_3(
          newIndex,
          _Act8_3SrNoControllers[newIndex],
          _Act8_3NameControllers[newIndex],
          _Act8_3DesgControllers[newIndex],
          current_suspensionDates[newIndex],
          _Act8_3DateSuspensionControllers[newIndex],
        );

        _Act8_3NameControllers[i].text = ACTRuleDesignationDetalisList[i]["DegprofileName"].toString();
        _Act8_3DesgControllers[i].text = ACTRuleDesignationDetalisList[i]["DesignationName"].toString();
        _Act8_3DateSuspensionControllers[i].text = ACTRuleDesignationDetalisList[i]["Dateofsuspension"].toString() == "0001-01-01T00:00:00"
            ? ""
            : DateFormat('dd-MM-yyyy').format(DateTime.parse(ACTRuleDesignationDetalisList[i]["Dateofsuspension"].toString()));
      }
    }

    isSwitchedActs9 = _InspectionACTList[0]["MainContObsInterStateWorkmen1961Act"] ?? false;
    isSwitchedActs9_1 = _InspectionACTList[0]["IsBreakRule324"] ?? false;
    isSwitchedActs9_2 = _InspectionACTList[0]["IsBreakRule126"] ?? false;
    isSwitchedActs9_3 = _InspectionACTList[0]["IsBreakRule931"] ?? false;
    isSwitchedActs9_4 = _InspectionACTList[0]["IsBreakRule341"] ?? false;
    isSwitchedActs9_5 = _InspectionACTList[0]["IsBreakRuleS13"] ?? false;

    isSwitchedActs10 = _InspectionACTList[0]["MainContObsInterStateWorkmen1957Act"] ?? false;
    isSwitchedActs10_1 = _InspectionACTList[0]["IsBreakRulek324"] ?? false;
    isSwitchedActs10_2 = _InspectionACTList[0]["IsBreakRulek17a94"] ?? false;
    isSwitchedActs10_3 = _InspectionACTList[0]["IsBreakRule131425"] ?? false;
    if (isSwitchedActs10_3 == true) {
      isreadOnlyR13_14_25S7 = false;
      _ActR13_14_25S7NotController.text = _InspectionACTList[0]["IsBreakRule131425Not"].toString();
      _ActR13_14_25S7Not1Controller.text = _InspectionACTList[0]["IsBreakRule131425Not1"].toString();
    }

    empFormD = _InspectionACTList[0]["IsBreakRulek17a94checkbox1"] ?? false;
    serviceFormE = _InspectionACTList[0]["IsBreakRulek17a94checkbox2"] ?? false;
    leaveRegFormF = _InspectionACTList[0]["IsBreakRulek17a94checkbox3"] ?? false;
    musterRollFormG = _InspectionACTList[0]["IsBreakRulek17a94checkbox4"] ?? false;

    isSwitchedActs11 = _InspectionACTList[0]["MainInspectionSalesEmployeesAct"] ?? false;
    isSwitchedActs11_1 = _InspectionACTList[0]["IsBreakRuleS5"] ?? false;
    isSwitchedActs11_2 = _InspectionACTList[0]["IsBreakRuleS7"] ?? false;
    isSwitchedActs11_3 = _InspectionACTList[0]["IsBreakRuleS4"] ?? false;
    if (isSwitchedActs11_3 == true) {
      isreadOnlyR14_15_16S4 = false;
      _ActR14_15_16S4Controller.text = _InspectionACTList[0]["IsBreakRuleS4Not"].toString();
    }
    isSwitchedActs11_4 = _InspectionACTList[0]["IsBreakRuleSK4"] ?? false;
    if (isSwitchedActs11_4 == true) {
      isreadONOnly143_144_145 = false;
      _ActR143_144_145Controller.text = _InspectionACTList[0]["IsBreakRuleSK4Not"].toString();
    }
    List MainDivEmployeesDetailsList = json["_inspectionActRuleMainDivEmployeesDetailsList"];

    if (MainDivEmployeesDetailsList.length > 0) {
      for (int i = 0; i < MainDivEmployeesDetailsList.length; i++) {
        int newIndex = Act11_1Widgets.length;
        act11_1EmployeesActNo.add(MainDivEmployeesDetailsList[i]["EmployeesActNo"] ?? 0);
        act11_1RuleIds.add(MainDivEmployeesDetailsList[i]["ACTRuleID"] ?? 0);
        act11_1Ids.add(MainDivEmployeesDetailsList[i]["ACTID"] ?? 0);
        _Act11_1SrNoControllers.add(TextEditingController());
        _Act11_1NameControllers.add(TextEditingController());
        _Act11_1DesgControllers.add(TextEditingController());
        _Act11_1DesgControllers.add(TextEditingController());
        current_appointmentDates.add(DateTime.now());
        _Act11_1DateAppointmentControllers.add(TextEditingController());
        Act11_1(
          newIndex,
          _Act11_1SrNoControllers[newIndex],
          _Act11_1NameControllers[newIndex],
          _Act11_1DesgControllers[newIndex],
          current_appointmentDates[newIndex],
          _Act11_1DateAppointmentControllers[newIndex],
        );
        _Act11_1NameControllers[i].text = MainDivEmployeesDetailsList[i]["EmployeesActName"].toString();
        _Act11_1DesgControllers[i].text = MainDivEmployeesDetailsList[i]["EmployeesActDesignation"].toString();
        _Act11_1DateAppointmentControllers[i].text = MainDivEmployeesDetailsList[i]["EmployeesActDateofappointment"].toString() == "0001-01-01T00:00:00"
            ? ""
            : DateFormat('dd-MM-yyyy').format(DateTime.parse(MainDivEmployeesDetailsList[i]["EmployeesActDateofappointment"].toString()));
      }
    }

    isLoadingStream.add(false);
  }

  Future<void> GetTalukaList(int? DistrictID) async {
    final requestData = jsonEncode({"DistrictID": DistrictID});
    debugPrint("requestData :- $requestData");
    final response = await _dio.post('/MobileAppAPI/GetTalukaList', data: requestData);
    print(response.data);
    if (response.statusCode == 200) {
      // ReportTalukatList = jsonDecode(response.data).map((json) => DropDownResponseModel.fromJson(json)).toList();
      final List<dynamic> data = json.decode(response.data);
      ReportTalukatList = data.map((json) => DropDownResponseModel.fromJson(json)).toList();
      setState(() {});
      return response.data;
    } else {
      return response.data;
    }
  }

  Future<void> GetEstablishTalukaList(int? DistrictID) async {
    final requestData = jsonEncode({"DistrictID": DistrictID});
    debugPrint("requestData :- $requestData");
    final response = await _dio.post('/MobileAppAPI/GetTalukaList', data: requestData);
    print(response.data);
    if (response.statusCode == 200) {
      // ReportTalukatList = jsonDecode(response.data).map((json) => DropDownResponseModel.fromJson(json)).toList();
      final List<dynamic> data = json.decode(response.data);
      EstablishTalukaList = data.map((json) => DropDownResponseModel.fromJson(json)).toList();
      _preferences.setTalukaList(EstablishTalukaList);
      setState(() {});
      return response.data;
    } else {
      return response.data;
    }
  }

  Future<String> InspectionRecordDetails(int? userId, int? inspectionID) async {
    final requestData = jsonEncode({"UserID": userId, "UserMode": 1, "InspectionID": inspectionID});
    final response = await _dio.post('/MobileAppAPI/InspectionRecordDetails', data: requestData);

    if (response.statusCode == 200) {
      _saveInspectionDetails(response.data);
      return response.data;
    } else {
      throw Exception('Failed to load inspection Details');
    }
  }

  void _saveInspectionDetails(String response) {
    _preferences.setInspectionViewDetails(response);
  }

  Future<String> authKey() async {
    final requestData = jsonEncode({"UserId": "1", "UserName": "Admin", "Password": "admin#123"});
    final response = await _dio.post('/JWTToken', data: requestData);
    _preferences.setUserToken(response.data);
    print("response: - ${response.data}");
    return response.data;
  }

  updateEmails() {
    _textFormFieldFocusNode12.unfocus();
    setState(() {
      if (validateEmail(_authorizedPersonEmailController.text)) {
        if (!emails.contains(_authorizedPersonEmailController.text)) {
          emails.add(_authorizedPersonEmailController.text.trim());
        }
        _authorizedPersonEmailController.clear();
      } else if (!validateEmail(_authorizedPersonEmailController.text)) {
        _authorizedPersonEmailController.clear();
      }
    });
  }

  setEmails(List<String> emails) {
    this.emails = emails;
  }

  bool validateEmail(String value) {
    final RegExp regex = RegExp(r'^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)| (".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$');
    return regex.hasMatch(value);
  }

  Future<File> uint8ListToFile(Uint8List? uint8List) async {
    final buffer = Uint8List.fromList(uint8List!);
    // Get the temporary directory
    final directory = await getTemporaryDirectory();

    // Generate a random file name
    // final random = Random();
    // final fileName = 'temp_${random.nextInt(999999)}';
    // Generate a unique file name based on the current timestamp
    String fileExtension = 'jpg'; // Specify the file extension
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final fileName = 'OneSiteInspection_$timestamp.$fileExtension';

    // Create the file in the temporary directory
    final file = File('${directory.path}/$fileName');

    // Write the bytes to the file
    await file.writeAsBytes(buffer);

    return file;
  }

  Future<void> deleteImageList(int? inspectionID, int? DID) async {
    final requestData = jsonEncode({"InspectionID": inspectionID, "DID": DID});
    debugPrint("requestData :- $requestData");
    final response = await _dio.post('/MobileAppAPI/OnsiteImgdocDeleterecord', data: requestData);
    print(response.data);
    if (response.statusCode == 200) {
      return response.data;
    } else {
      return response.data;
    }
  }

  Future<void> SendEmail(int? userID, int? inspectionID, int? isSubmit, int? StiplatedTimeLimit) async {
    final requestData = jsonEncode({"UserID": userID, "InspectionID": inspectionID, "IsSubmit": isSubmit, "StiplatedTimeLimit": StiplatedTimeLimit});
    debugPrint("requestData :- $requestData");
    final response = await _dio.post('/MobileAppAPI/SendSubmitInspectionmail', data: requestData);
    print(response.data);
    if (response.statusCode == 200) {
      return response.data;
    } else {
      return response.data;
    }
  }
}
